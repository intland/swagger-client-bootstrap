/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.ISODateTimeFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.model.AbstractBackgroundJobStatusInfo;
import com.intland.swagger.client.model.AbstractField;
import com.intland.swagger.client.model.AbstractFieldValue;
import com.intland.swagger.client.model.AbstractOutline;
import com.intland.swagger.client.model.AbstractReference;
import com.intland.swagger.client.model.AbstractTrackerItemReference;
import com.intland.swagger.client.model.ArtifactReference;
import com.intland.swagger.client.model.ArtifactReferenceField;
import com.intland.swagger.client.model.AssociationTypeReference;
import com.intland.swagger.client.model.AttachmentReference;
import com.intland.swagger.client.model.BoolField;
import com.intland.swagger.client.model.BoolFieldValue;
import com.intland.swagger.client.model.ChoiceFieldValue;
import com.intland.swagger.client.model.ChoiceOptionReference;
import com.intland.swagger.client.model.ColorField;
import com.intland.swagger.client.model.ColorFieldValue;
import com.intland.swagger.client.model.CommentReference;
import com.intland.swagger.client.model.CountryField;
import com.intland.swagger.client.model.CountryFieldValue;
import com.intland.swagger.client.model.DateField;
import com.intland.swagger.client.model.DateFieldValue;
import com.intland.swagger.client.model.DecimalField;
import com.intland.swagger.client.model.DecimalFieldValue;
import com.intland.swagger.client.model.DependencyEntityReference;
import com.intland.swagger.client.model.DependencyFinderJobStatusInfo;
import com.intland.swagger.client.model.DownstreamTrackerItemReference;
import com.intland.swagger.client.model.DurationField;
import com.intland.swagger.client.model.DurationFieldValue;
import com.intland.swagger.client.model.FieldReference;
import com.intland.swagger.client.model.IncomingTrackerItemAssociation;
import com.intland.swagger.client.model.IntegerField;
import com.intland.swagger.client.model.IntegerFieldValue;
import com.intland.swagger.client.model.LanguageField;
import com.intland.swagger.client.model.LanguageFieldValue;
import com.intland.swagger.client.model.MemberField;
import com.intland.swagger.client.model.NotSupportedFieldValue;
import com.intland.swagger.client.model.NotSupportedJobStatusInfo;
import com.intland.swagger.client.model.OptionChoiceField;
import com.intland.swagger.client.model.OutgoingTrackerItemAssociation;
import com.intland.swagger.client.model.OutlineItem;
import com.intland.swagger.client.model.OutlineWiki;
import com.intland.swagger.client.model.ProjectBaselineReference;
import com.intland.swagger.client.model.ProjectChoiceField;
import com.intland.swagger.client.model.ProjectReference;
import com.intland.swagger.client.model.ReferenceField;
import com.intland.swagger.client.model.ReferredTestStepFieldValue;
import com.intland.swagger.client.model.ReportGroup;
import com.intland.swagger.client.model.ReportGroupWithGroups;
import com.intland.swagger.client.model.ReportGroupWithReferencedRows;
import com.intland.swagger.client.model.ReportGroupWithRows;
import com.intland.swagger.client.model.ReportReference;
import com.intland.swagger.client.model.RepositoryChoiceField;
import com.intland.swagger.client.model.RepositoryReference;
import com.intland.swagger.client.model.ReviewMemberReferenceField;
import com.intland.swagger.client.model.RoleReference;
import com.intland.swagger.client.model.TableField;
import com.intland.swagger.client.model.TableFieldValue;
import com.intland.swagger.client.model.TextField;
import com.intland.swagger.client.model.TextFieldValue;
import com.intland.swagger.client.model.TrackerBaselineReference;
import com.intland.swagger.client.model.TrackerChoiceField;
import com.intland.swagger.client.model.TrackerItemAttachmentRequest;
import com.intland.swagger.client.model.TrackerItemChange;
import com.intland.swagger.client.model.TrackerItemChoiceField;
import com.intland.swagger.client.model.TrackerItemReference;
import com.intland.swagger.client.model.TrackerItemRowChange;
import com.intland.swagger.client.model.TrackerItemsRequest;
import com.intland.swagger.client.model.TrackerPermissionReference;
import com.intland.swagger.client.model.TrackerReference;
import com.intland.swagger.client.model.TrackerTypeReference;
import com.intland.swagger.client.model.UpstreamTrackerItemReference;
import com.intland.swagger.client.model.UrlField;
import com.intland.swagger.client.model.UrlFieldValue;
import com.intland.swagger.client.model.UserChoiceField;
import com.intland.swagger.client.model.UserGroupReference;
import com.intland.swagger.client.model.UserReference;
import com.intland.swagger.client.model.WikiPageReference;
import com.intland.swagger.client.model.WikiTextField;
import com.intland.swagger.client.model.WikiTextFieldValue;

import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import okio.ByteString;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private DateTimeTypeAdapter dateTimeTypeAdapter = new DateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(AbstractBackgroundJobStatusInfo.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DependencyFinderJobStatusInfo", DependencyFinderJobStatusInfo.class);
                        classByDiscriminatorValue.put("NotSupportedJobStatusInfo", NotSupportedJobStatusInfo.class);
                        classByDiscriminatorValue.put("AbstractBackgroundJobStatusInfo", AbstractBackgroundJobStatusInfo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(AbstractField.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ArtifactReferenceField", ArtifactReferenceField.class);
                        classByDiscriminatorValue.put("BoolField", BoolField.class);
                        classByDiscriminatorValue.put("ColorField", ColorField.class);
                        classByDiscriminatorValue.put("CountryField", CountryField.class);
                        classByDiscriminatorValue.put("DateField", DateField.class);
                        classByDiscriminatorValue.put("DecimalField", DecimalField.class);
                        classByDiscriminatorValue.put("DurationField", DurationField.class);
                        classByDiscriminatorValue.put("IntegerField", IntegerField.class);
                        classByDiscriminatorValue.put("LanguageField", LanguageField.class);
                        classByDiscriminatorValue.put("MemberField", MemberField.class);
                        classByDiscriminatorValue.put("OptionChoiceField", OptionChoiceField.class);
                        classByDiscriminatorValue.put("ProjectChoiceField", ProjectChoiceField.class);
                        classByDiscriminatorValue.put("ReferenceField", ReferenceField.class);
                        classByDiscriminatorValue.put("RepositoryChoiceField", RepositoryChoiceField.class);
                        classByDiscriminatorValue.put("ReviewMemberReferenceField", ReviewMemberReferenceField.class);
                        classByDiscriminatorValue.put("TableField", TableField.class);
                        classByDiscriminatorValue.put("TextField", TextField.class);
                        classByDiscriminatorValue.put("TrackerChoiceField", TrackerChoiceField.class);
                        classByDiscriminatorValue.put("TrackerItemChoiceField", TrackerItemChoiceField.class);
                        classByDiscriminatorValue.put("UrlField", UrlField.class);
                        classByDiscriminatorValue.put("UserChoiceField", UserChoiceField.class);
                        classByDiscriminatorValue.put("WikiTextField", WikiTextField.class);
                        classByDiscriminatorValue.put("AbstractField", AbstractField.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(AbstractFieldValue.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("BoolFieldValue", BoolFieldValue.class);
                        classByDiscriminatorValue.put("ChoiceFieldValue", ChoiceFieldValue.class);
                        classByDiscriminatorValue.put("ColorFieldValue", ColorFieldValue.class);
                        classByDiscriminatorValue.put("CountryFieldValue", CountryFieldValue.class);
                        classByDiscriminatorValue.put("DateFieldValue", DateFieldValue.class);
                        classByDiscriminatorValue.put("DecimalFieldValue", DecimalFieldValue.class);
                        classByDiscriminatorValue.put("DurationFieldValue", DurationFieldValue.class);
                        classByDiscriminatorValue.put("IntegerFieldValue", IntegerFieldValue.class);
                        classByDiscriminatorValue.put("LanguageFieldValue", LanguageFieldValue.class);
                        classByDiscriminatorValue.put("NotSupportedFieldValue", NotSupportedFieldValue.class);
                        classByDiscriminatorValue.put("ReferredTestStepFieldValue", ReferredTestStepFieldValue.class);
                        classByDiscriminatorValue.put("TableFieldValue", TableFieldValue.class);
                        classByDiscriminatorValue.put("TextFieldValue", TextFieldValue.class);
                        classByDiscriminatorValue.put("UrlFieldValue", UrlFieldValue.class);
                        classByDiscriminatorValue.put("WikiTextFieldValue", WikiTextFieldValue.class);
                        classByDiscriminatorValue.put("AbstractFieldValue", AbstractFieldValue.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(AbstractOutline.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("OutlineItem", OutlineItem.class);
                        classByDiscriminatorValue.put("OutlineWiki", OutlineWiki.class);
                        classByDiscriminatorValue.put("AbstractOutline", AbstractOutline.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(AbstractReference.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ArtifactReference", ArtifactReference.class);
                        classByDiscriminatorValue.put("AssociationTypeReference", AssociationTypeReference.class);
                        classByDiscriminatorValue.put("AttachmentReference", AttachmentReference.class);
                        classByDiscriminatorValue.put("ChoiceOptionReference", ChoiceOptionReference.class);
                        classByDiscriminatorValue.put("CommentReference", CommentReference.class);
                        classByDiscriminatorValue.put("DependencyEntityReference", DependencyEntityReference.class);
                        classByDiscriminatorValue.put("FieldReference", FieldReference.class);
                        classByDiscriminatorValue.put("ProjectBaselineReference", ProjectBaselineReference.class);
                        classByDiscriminatorValue.put("ProjectReference", ProjectReference.class);
                        classByDiscriminatorValue.put("ReportReference", ReportReference.class);
                        classByDiscriminatorValue.put("RepositoryReference", RepositoryReference.class);
                        classByDiscriminatorValue.put("RoleReference", RoleReference.class);
                        classByDiscriminatorValue.put("TrackerBaselineReference", TrackerBaselineReference.class);
                        classByDiscriminatorValue.put("TrackerItemReference", TrackerItemReference.class);
                        classByDiscriminatorValue.put("TrackerPermissionReference", TrackerPermissionReference.class);
                        classByDiscriminatorValue.put("TrackerReference", TrackerReference.class);
                        classByDiscriminatorValue.put("TrackerTypeReference", TrackerTypeReference.class);
                        classByDiscriminatorValue.put("UserGroupReference", UserGroupReference.class);
                        classByDiscriminatorValue.put("UserReference", UserReference.class);
                        classByDiscriminatorValue.put("WikiPageReference", WikiPageReference.class);
                        classByDiscriminatorValue.put("AbstractReference", AbstractReference.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(AbstractTrackerItemReference.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DownstreamTrackerItemReference", DownstreamTrackerItemReference.class);
                        classByDiscriminatorValue.put("IncomingTrackerItemAssociation", IncomingTrackerItemAssociation.class);
                        classByDiscriminatorValue.put("OutgoingTrackerItemAssociation", OutgoingTrackerItemAssociation.class);
                        classByDiscriminatorValue.put("UpstreamTrackerItemReference", UpstreamTrackerItemReference.class);
                        classByDiscriminatorValue.put("AbstractTrackerItemReference", AbstractTrackerItemReference.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(ReportGroup.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ReportGroupWithGroups", ReportGroupWithGroups.class);
                        classByDiscriminatorValue.put("ReportGroupWithReferencedRows", ReportGroupWithReferencedRows.class);
                        classByDiscriminatorValue.put("ReportGroupWithRows", ReportGroupWithRows.class);
                        classByDiscriminatorValue.put("ReportGroup", ReportGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(TrackerItemChange.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("TrackerItemRowChange", TrackerItemRowChange.class);
                        classByDiscriminatorValue.put("TrackerItemChange", TrackerItemChange.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(TrackerItemsRequest.class, new TypeSelector() {
                    @Override
                    public Class getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("TrackerItemAttachmentRequest", TrackerItemAttachmentRequest.class);
                        classByDiscriminatorValue.put("TrackerItemsRequest", TrackerItemsRequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(DateTime.class, dateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for Joda DateTime type
     */
    public static class DateTimeTypeAdapter extends TypeAdapter<DateTime> {

        private DateTimeFormatter formatter;

        public DateTimeTypeAdapter() {
            this(new DateTimeFormatterBuilder()
                .append(ISODateTimeFormat.dateTime().getPrinter(), ISODateTimeFormat.dateOptionalTimeParser().getParser())
                .toFormatter());
        }

        public DateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, DateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.print(date));
            }
        }

        @Override
        public DateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return formatter.parseDateTime(date);
            }
        }
    }

    /**
     * Gson TypeAdapter for Joda LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(ISODateTimeFormat.date());
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.print(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return formatter.parseLocalDate(date);
            }
        }
    }

    public JSON setDateTimeFormat(DateTimeFormatter dateFormat) {
        dateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
