/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.BatchGetTrackerItemReviewsRequest;
import com.intland.swagger.client.model.ExportProject;
import com.intland.swagger.client.model.TrackerItem;
import com.intland.swagger.client.model.TrackerItemWithTrackerItemReviewsExport;
import com.intland.swagger.client.model.TrackerItemsRequest;

public class ExportApi {
    private ApiClient localVarApiClient;

    public ExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for batchGetTrackerItemReviews
     * @param batchGetTrackerItemReviewsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for each tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no baseline accessible with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetTrackerItemReviewsCall(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchGetTrackerItemReviewsRequest;

        // create path and map variables
        String localVarPath = "/v3/export/tracker-item-reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetTrackerItemReviewsValidateBeforeCall(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batchGetTrackerItemReviewsRequest' is set
        if (batchGetTrackerItemReviewsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchGetTrackerItemReviewsRequest' when calling batchGetTrackerItemReviews(Async)");
        }
        

        okhttp3.Call localVarCall = batchGetTrackerItemReviewsCall(batchGetTrackerItemReviewsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker item reviews by a list of tracker item IDs
     * 
     * @param batchGetTrackerItemReviewsRequest  (required)
     * @return List&lt;TrackerItemWithTrackerItemReviewsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for each tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no baseline accessible with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackerItemWithTrackerItemReviewsExport> batchGetTrackerItemReviews(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest) throws ApiException {
        ApiResponse<List<TrackerItemWithTrackerItemReviewsExport>> localVarResp = batchGetTrackerItemReviewsWithHttpInfo(batchGetTrackerItemReviewsRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker item reviews by a list of tracker item IDs
     * 
     * @param batchGetTrackerItemReviewsRequest  (required)
     * @return ApiResponse&lt;List&lt;TrackerItemWithTrackerItemReviewsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for each tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no baseline accessible with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackerItemWithTrackerItemReviewsExport>> batchGetTrackerItemReviewsWithHttpInfo(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchGetTrackerItemReviewsValidateBeforeCall(batchGetTrackerItemReviewsRequest, null);
        Type localVarReturnType = new TypeToken<List<TrackerItemWithTrackerItemReviewsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker item reviews by a list of tracker item IDs (asynchronously)
     * 
     * @param batchGetTrackerItemReviewsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for each tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no baseline accessible with the supplied ID </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetTrackerItemReviewsAsync(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback<List<TrackerItemWithTrackerItemReviewsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetTrackerItemReviewsValidateBeforeCall(batchGetTrackerItemReviewsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItemWithTrackerItemReviewsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for export
     * @param projectId  (required)
     * @param exportProject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported project contents in a zip file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during the project export </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCall(Integer projectId, ExportProject exportProject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exportProject;

        // create path and map variables
        String localVarPath = "/v3/projects/{projectId}/content"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(Integer projectId, ExportProject exportProject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling export(Async)");
        }
        
        // verify the required parameter 'exportProject' is set
        if (exportProject == null) {
            throw new ApiException("Missing the required parameter 'exportProject' when calling export(Async)");
        }
        

        okhttp3.Call localVarCall = exportCall(projectId, exportProject, _callback);
        return localVarCall;

    }

    /**
     * Exports the specified project to a zip file
     * 
     * @param projectId  (required)
     * @param exportProject  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported project contents in a zip file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during the project export </td><td>  -  </td></tr>
     </table>
     */
    public File export(Integer projectId, ExportProject exportProject) throws ApiException {
        ApiResponse<File> localVarResp = exportWithHttpInfo(projectId, exportProject);
        return localVarResp.getData();
    }

    /**
     * Exports the specified project to a zip file
     * 
     * @param projectId  (required)
     * @param exportProject  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported project contents in a zip file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during the project export </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportWithHttpInfo(Integer projectId, ExportProject exportProject) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, exportProject, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exports the specified project to a zip file (asynchronously)
     * 
     * @param projectId  (required)
     * @param exportProject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported project contents in a zip file. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Project not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during the project export </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAsync(Integer projectId, ExportProject exportProject, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, exportProject, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItems
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemsCall(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemsRequest;

        // create path and map variables
        String localVarPath = "/v3/export/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemsValidateBeforeCall(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerItemsRequest' is set
        if (trackerItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'trackerItemsRequest' when calling getTrackerItems(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemsCall(trackerItemsRequest, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @return List&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackerItem> getTrackerItems(TrackerItemsRequest trackerItemsRequest, Integer baselineId) throws ApiException {
        ApiResponse<List<TrackerItem>> localVarResp = getTrackerItemsWithHttpInfo(trackerItemsRequest, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackerItem>> getTrackerItemsWithHttpInfo(TrackerItemsRequest trackerItemsRequest, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(trackerItemsRequest, baselineId, null);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items (asynchronously)
     * API can be used for fetching basic information of tracker items
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemsAsync(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback<List<TrackerItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(trackerItemsRequest, baselineId, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
