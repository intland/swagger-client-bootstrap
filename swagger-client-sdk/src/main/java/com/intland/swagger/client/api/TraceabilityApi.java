/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.TraceabilityInitialLevelFilter;
import com.intland.swagger.client.model.TraceabilityItem;
import com.intland.swagger.client.model.TraceabilityLevelFilter;
import com.intland.swagger.client.model.TraceabilityResult;

public class TraceabilityApi {
    private ApiClient localVarApiClient;

    public TraceabilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TraceabilityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getTraceabilityInitialItemIds
     * @param pageSize Number of items in a result page. (optional)
     * @param pageNo Index of the result page. (optional)
     * @param traceabilityInitialLevelFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTraceabilityInitialItemIdsCall(Integer pageSize, Integer pageNo, TraceabilityInitialLevelFilter traceabilityInitialLevelFilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = traceabilityInitialLevelFilter;

        // create path and map variables
        String localVarPath = "/v3/traceability/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTraceabilityInitialItemIdsValidateBeforeCall(Integer pageSize, Integer pageNo, TraceabilityInitialLevelFilter traceabilityInitialLevelFilter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTraceabilityInitialItemIdsCall(pageSize, pageNo, traceabilityInitialLevelFilter, _callback);
        return localVarCall;

    }

    /**
     * Get initial ids
     * Get traceability initial ids!
     * @param pageSize Number of items in a result page. (optional)
     * @param pageNo Index of the result page. (optional)
     * @param traceabilityInitialLevelFilter  (optional)
     * @return List&lt;TraceabilityItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TraceabilityItem> getTraceabilityInitialItemIds(Integer pageSize, Integer pageNo, TraceabilityInitialLevelFilter traceabilityInitialLevelFilter) throws ApiException {
        ApiResponse<List<TraceabilityItem>> localVarResp = getTraceabilityInitialItemIdsWithHttpInfo(pageSize, pageNo, traceabilityInitialLevelFilter);
        return localVarResp.getData();
    }

    /**
     * Get initial ids
     * Get traceability initial ids!
     * @param pageSize Number of items in a result page. (optional)
     * @param pageNo Index of the result page. (optional)
     * @param traceabilityInitialLevelFilter  (optional)
     * @return ApiResponse&lt;List&lt;TraceabilityItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TraceabilityItem>> getTraceabilityInitialItemIdsWithHttpInfo(Integer pageSize, Integer pageNo, TraceabilityInitialLevelFilter traceabilityInitialLevelFilter) throws ApiException {
        okhttp3.Call localVarCall = getTraceabilityInitialItemIdsValidateBeforeCall(pageSize, pageNo, traceabilityInitialLevelFilter, null);
        Type localVarReturnType = new TypeToken<List<TraceabilityItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get initial ids (asynchronously)
     * Get traceability initial ids!
     * @param pageSize Number of items in a result page. (optional)
     * @param pageNo Index of the result page. (optional)
     * @param traceabilityInitialLevelFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTraceabilityInitialItemIdsAsync(Integer pageSize, Integer pageNo, TraceabilityInitialLevelFilter traceabilityInitialLevelFilter, final ApiCallback<List<TraceabilityItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTraceabilityInitialItemIdsValidateBeforeCall(pageSize, pageNo, traceabilityInitialLevelFilter, _callback);
        Type localVarReturnType = new TypeToken<List<TraceabilityItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTraceabilityLevelItemIds
     * @param itemsOnLevel Number of items per level. (optional)
     * @param itemsFromPreviousItem Number of items per item. (optional)
     * @param traceabilityLevelFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Traceability items list </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTraceabilityLevelItemIdsCall(Integer itemsOnLevel, Integer itemsFromPreviousItem, TraceabilityLevelFilter traceabilityLevelFilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = traceabilityLevelFilter;

        // create path and map variables
        String localVarPath = "/v3/traceability/relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemsOnLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsOnLevel", itemsOnLevel));
        }

        if (itemsFromPreviousItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsFromPreviousItem", itemsFromPreviousItem));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTraceabilityLevelItemIdsValidateBeforeCall(Integer itemsOnLevel, Integer itemsFromPreviousItem, TraceabilityLevelFilter traceabilityLevelFilter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTraceabilityLevelItemIdsCall(itemsOnLevel, itemsFromPreviousItem, traceabilityLevelFilter, _callback);
        return localVarCall;

    }

    /**
     * Get traceability level item ids
     * Get traceability item ids!
     * @param itemsOnLevel Number of items per level. (optional)
     * @param itemsFromPreviousItem Number of items per item. (optional)
     * @param traceabilityLevelFilter  (optional)
     * @return TraceabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Traceability items list </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TraceabilityResult getTraceabilityLevelItemIds(Integer itemsOnLevel, Integer itemsFromPreviousItem, TraceabilityLevelFilter traceabilityLevelFilter) throws ApiException {
        ApiResponse<TraceabilityResult> localVarResp = getTraceabilityLevelItemIdsWithHttpInfo(itemsOnLevel, itemsFromPreviousItem, traceabilityLevelFilter);
        return localVarResp.getData();
    }

    /**
     * Get traceability level item ids
     * Get traceability item ids!
     * @param itemsOnLevel Number of items per level. (optional)
     * @param itemsFromPreviousItem Number of items per item. (optional)
     * @param traceabilityLevelFilter  (optional)
     * @return ApiResponse&lt;TraceabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Traceability items list </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TraceabilityResult> getTraceabilityLevelItemIdsWithHttpInfo(Integer itemsOnLevel, Integer itemsFromPreviousItem, TraceabilityLevelFilter traceabilityLevelFilter) throws ApiException {
        okhttp3.Call localVarCall = getTraceabilityLevelItemIdsValidateBeforeCall(itemsOnLevel, itemsFromPreviousItem, traceabilityLevelFilter, null);
        Type localVarReturnType = new TypeToken<TraceabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get traceability level item ids (asynchronously)
     * Get traceability item ids!
     * @param itemsOnLevel Number of items per level. (optional)
     * @param itemsFromPreviousItem Number of items per item. (optional)
     * @param traceabilityLevelFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Traceability items list </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTraceabilityLevelItemIdsAsync(Integer itemsOnLevel, Integer itemsFromPreviousItem, TraceabilityLevelFilter traceabilityLevelFilter, final ApiCallback<TraceabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTraceabilityLevelItemIdsValidateBeforeCall(itemsOnLevel, itemsFromPreviousItem, traceabilityLevelFilter, _callback);
        Type localVarReturnType = new TypeToken<TraceabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
