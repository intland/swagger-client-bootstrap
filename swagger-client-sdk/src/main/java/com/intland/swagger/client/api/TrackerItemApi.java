/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.BulkOperationResponse;
import com.intland.swagger.client.model.LockInfo;
import com.intland.swagger.client.model.LockRequest;
import com.intland.swagger.client.model.ReferenceSearchResult;
import com.intland.swagger.client.model.TrackerItem;
import com.intland.swagger.client.model.TrackerItemChildReference;
import com.intland.swagger.client.model.TrackerItemField;
import com.intland.swagger.client.model.TrackerItemFieldAccessibilityList;
import com.intland.swagger.client.model.TrackerItemHistory;
import com.intland.swagger.client.model.TrackerItemReferenceSearchResult;
import com.intland.swagger.client.model.TrackerItemRelationsResult;
import com.intland.swagger.client.model.TrackerItemReview;
import com.intland.swagger.client.model.TrackerItemRevision;
import com.intland.swagger.client.model.TrackerItemSearchRequest;
import com.intland.swagger.client.model.TrackerItemSearchResult;
import com.intland.swagger.client.model.TrackerItemsRequest;
import com.intland.swagger.client.model.UpdateTrackerItemChildrenRequest;
import com.intland.swagger.client.model.UpdateTrackerItemField;
import com.intland.swagger.client.model.UpdateTrackerItemFieldWithItemId;
import com.intland.swagger.client.model.UpdateTrackerItemTableField;
import com.intland.swagger.client.model.WorkflowTransition;

public class TrackerItemApi {
    private ApiClient localVarApiClient;

    public TrackerItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addChildToTracker
     * @param trackerId  (required)
     * @param trackerItemRevision  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToTrackerCall(Integer trackerId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemRevision;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/children"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChildToTrackerValidateBeforeCall(Integer trackerId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling addChildToTracker(Async)");
        }
        
        // verify the required parameter 'trackerItemRevision' is set
        if (trackerItemRevision == null) {
            throw new ApiException("Missing the required parameter 'trackerItemRevision' when calling addChildToTracker(Async)");
        }
        

        okhttp3.Call localVarCall = addChildToTrackerCall(trackerId, trackerItemRevision, _callback);
        return localVarCall;

    }

    /**
     * Add a child item to a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItemRevision  (required)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemChildReference addChildToTracker(Integer trackerId, TrackerItemRevision trackerItemRevision) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = addChildToTrackerWithHttpInfo(trackerId, trackerItemRevision);
        return localVarResp.getData();
    }

    /**
     * Add a child item to a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItemRevision  (required)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemChildReference> addChildToTrackerWithHttpInfo(Integer trackerId, TrackerItemRevision trackerItemRevision) throws ApiException {
        okhttp3.Call localVarCall = addChildToTrackerValidateBeforeCall(trackerId, trackerItemRevision, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a child item to a tracker item (asynchronously)
     * 
     * @param trackerId  (required)
     * @param trackerItemRevision  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToTrackerAsync(Integer trackerId, TrackerItemRevision trackerItemRevision, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChildToTrackerValidateBeforeCall(trackerId, trackerItemRevision, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addChildToTrackerItem
     * @param itemId  (required)
     * @param trackerItemRevision  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToTrackerItemCall(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemRevision;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChildToTrackerItemValidateBeforeCall(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling addChildToTrackerItem(Async)");
        }
        
        // verify the required parameter 'trackerItemRevision' is set
        if (trackerItemRevision == null) {
            throw new ApiException("Missing the required parameter 'trackerItemRevision' when calling addChildToTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = addChildToTrackerItemCall(itemId, trackerItemRevision, _callback);
        return localVarCall;

    }

    /**
     * Add a child item to a tracker item
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (required)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemChildReference addChildToTrackerItem(Integer itemId, TrackerItemRevision trackerItemRevision) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = addChildToTrackerItemWithHttpInfo(itemId, trackerItemRevision);
        return localVarResp.getData();
    }

    /**
     * Add a child item to a tracker item
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (required)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemChildReference> addChildToTrackerItemWithHttpInfo(Integer itemId, TrackerItemRevision trackerItemRevision) throws ApiException {
        okhttp3.Call localVarCall = addChildToTrackerItemValidateBeforeCall(itemId, trackerItemRevision, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a child item to a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child item reference with index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChildToTrackerItemAsync(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChildToTrackerItemValidateBeforeCall(itemId, trackerItemRevision, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateTrackerItemFields
     * @param updateTrackerItemFieldWithItemId  (required)
     * @param atomic If it&#39;s turned on the whole update will run in a single transaction. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulk update response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Bulk update fields of a tracker item Documentation</a>
     */
    public okhttp3.Call bulkUpdateTrackerItemFieldsCall(List<UpdateTrackerItemFieldWithItemId> updateTrackerItemFieldWithItemId, Boolean atomic, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemFieldWithItemId;

        // create path and map variables
        String localVarPath = "/v3/items/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (atomic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("atomic", atomic));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateTrackerItemFieldsValidateBeforeCall(List<UpdateTrackerItemFieldWithItemId> updateTrackerItemFieldWithItemId, Boolean atomic, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'updateTrackerItemFieldWithItemId' is set
        if (updateTrackerItemFieldWithItemId == null) {
            throw new ApiException("Missing the required parameter 'updateTrackerItemFieldWithItemId' when calling bulkUpdateTrackerItemFields(Async)");
        }
        

        okhttp3.Call localVarCall = bulkUpdateTrackerItemFieldsCall(updateTrackerItemFieldWithItemId, atomic, _callback);
        return localVarCall;

    }

    /**
     * Bulk update fields of a tracker item
     * 
     * @param updateTrackerItemFieldWithItemId  (required)
     * @param atomic If it&#39;s turned on the whole update will run in a single transaction. (optional, default to false)
     * @return BulkOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulk update response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Bulk update fields of a tracker item Documentation</a>
     */
    public BulkOperationResponse bulkUpdateTrackerItemFields(List<UpdateTrackerItemFieldWithItemId> updateTrackerItemFieldWithItemId, Boolean atomic) throws ApiException {
        ApiResponse<BulkOperationResponse> localVarResp = bulkUpdateTrackerItemFieldsWithHttpInfo(updateTrackerItemFieldWithItemId, atomic);
        return localVarResp.getData();
    }

    /**
     * Bulk update fields of a tracker item
     * 
     * @param updateTrackerItemFieldWithItemId  (required)
     * @param atomic If it&#39;s turned on the whole update will run in a single transaction. (optional, default to false)
     * @return ApiResponse&lt;BulkOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulk update response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Bulk update fields of a tracker item Documentation</a>
     */
    public ApiResponse<BulkOperationResponse> bulkUpdateTrackerItemFieldsWithHttpInfo(List<UpdateTrackerItemFieldWithItemId> updateTrackerItemFieldWithItemId, Boolean atomic) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateTrackerItemFieldsValidateBeforeCall(updateTrackerItemFieldWithItemId, atomic, null);
        Type localVarReturnType = new TypeToken<BulkOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk update fields of a tracker item (asynchronously)
     * 
     * @param updateTrackerItemFieldWithItemId  (required)
     * @param atomic If it&#39;s turned on the whole update will run in a single transaction. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bulk update response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Bulk update fields of a tracker item Documentation</a>
     */
    public okhttp3.Call bulkUpdateTrackerItemFieldsAsync(List<UpdateTrackerItemFieldWithItemId> updateTrackerItemFieldWithItemId, Boolean atomic, final ApiCallback<BulkOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateTrackerItemFieldsValidateBeforeCall(updateTrackerItemFieldWithItemId, atomic, _callback);
        Type localVarReturnType = new TypeToken<BulkOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkTrackerItemLock
     * @param itemId Tracker item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the lock, or an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTrackerItemLockCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/lock"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTrackerItemLockValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling checkTrackerItemLock(Async)");
        }
        

        okhttp3.Call localVarCall = checkTrackerItemLockCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Check whether a tracker item is locked, and if it is, retrieve the details of the lock
     * 
     * @param itemId Tracker item id (required)
     * @return LockInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the lock, or an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public LockInfo checkTrackerItemLock(Integer itemId) throws ApiException {
        ApiResponse<LockInfo> localVarResp = checkTrackerItemLockWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Check whether a tracker item is locked, and if it is, retrieve the details of the lock
     * 
     * @param itemId Tracker item id (required)
     * @return ApiResponse&lt;LockInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the lock, or an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LockInfo> checkTrackerItemLockWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = checkTrackerItemLockValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<LockInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check whether a tracker item is locked, and if it is, retrieve the details of the lock (asynchronously)
     * 
     * @param itemId Tracker item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the lock, or an empty response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTrackerItemLockAsync(Integer itemId, final ApiCallback<LockInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTrackerItemLockValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<LockInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackerItem
     * @param trackerId  (required)
     * @param trackerItem  (required)
     * @param parentItemId  (optional)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Create a tracker item Documentation</a>
     */
    public okhttp3.Call createTrackerItemCall(Integer trackerId, TrackerItem trackerItem, Integer parentItemId, Integer referenceItemId, String position, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItem;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/items"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentItemId", parentItemId));
        }

        if (referenceItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceItemId", referenceItemId));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackerItemValidateBeforeCall(Integer trackerId, TrackerItem trackerItem, Integer parentItemId, Integer referenceItemId, String position, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling createTrackerItem(Async)");
        }
        
        // verify the required parameter 'trackerItem' is set
        if (trackerItem == null) {
            throw new ApiException("Missing the required parameter 'trackerItem' when calling createTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = createTrackerItemCall(trackerId, trackerItem, parentItemId, referenceItemId, position, _callback);
        return localVarCall;

    }

    /**
     * Create a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItem  (required)
     * @param parentItemId  (optional)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Create a tracker item Documentation</a>
     */
    public TrackerItem createTrackerItem(Integer trackerId, TrackerItem trackerItem, Integer parentItemId, Integer referenceItemId, String position) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = createTrackerItemWithHttpInfo(trackerId, trackerItem, parentItemId, referenceItemId, position);
        return localVarResp.getData();
    }

    /**
     * Create a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItem  (required)
     * @param parentItemId  (optional)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Create a tracker item Documentation</a>
     */
    public ApiResponse<TrackerItem> createTrackerItemWithHttpInfo(Integer trackerId, TrackerItem trackerItem, Integer parentItemId, Integer referenceItemId, String position) throws ApiException {
        okhttp3.Call localVarCall = createTrackerItemValidateBeforeCall(trackerId, trackerItem, parentItemId, referenceItemId, position, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tracker item (asynchronously)
     * 
     * @param trackerId  (required)
     * @param trackerItem  (required)
     * @param parentItemId  (optional)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Create a tracker item Documentation</a>
     */
    public okhttp3.Call createTrackerItemAsync(Integer trackerId, TrackerItem trackerItem, Integer parentItemId, Integer referenceItemId, String position, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackerItemValidateBeforeCall(trackerId, trackerItem, parentItemId, referenceItemId, position, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerItem
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Move tracker item to trash
     * 
     * @param itemId  (required)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItem deleteTrackerItem(Integer itemId) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = deleteTrackerItemWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Move tracker item to trash
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItem> deleteTrackerItemWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move tracker item to trash (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemAsync(Integer itemId, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerChildren
     * @param trackerId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTrackerChildrenCall(Integer trackerId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/children"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerChildrenValidateBeforeCall(Integer trackerId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling findTrackerChildren(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerChildrenCall(trackerId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get child items of a tracker item
     * 
     * @param trackerId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemReferenceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemReferenceSearchResult findTrackerChildren(Integer trackerId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemReferenceSearchResult> localVarResp = findTrackerChildrenWithHttpInfo(trackerId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get child items of a tracker item
     * 
     * @param trackerId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemReferenceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemReferenceSearchResult> findTrackerChildrenWithHttpInfo(Integer trackerId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findTrackerChildrenValidateBeforeCall(trackerId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get child items of a tracker item (asynchronously)
     * 
     * @param trackerId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTrackerChildrenAsync(Integer trackerId, Integer page, Integer pageSize, final ApiCallback<TrackerItemReferenceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerChildrenValidateBeforeCall(trackerId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItemChildren
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTrackerItemChildrenCall(Integer itemId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemChildrenValidateBeforeCall(Integer itemId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling findTrackerItemChildren(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerItemChildrenCall(itemId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get child items of a tracker item
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemReferenceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemReferenceSearchResult findTrackerItemChildren(Integer itemId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemReferenceSearchResult> localVarResp = findTrackerItemChildrenWithHttpInfo(itemId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get child items of a tracker item
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemReferenceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemReferenceSearchResult> findTrackerItemChildrenWithHttpInfo(Integer itemId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemChildrenValidateBeforeCall(itemId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get child items of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List child items of a tracker item ordered by ordinal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTrackerItemChildrenAsync(Integer itemId, Integer page, Integer pageSize, final ApiCallback<TrackerItemReferenceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemChildrenValidateBeforeCall(itemId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItems
     * @param queryString  (required)
     * @param baselineId Baseline on which the queery is applied. (optional)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsCall(String queryString, Integer baselineId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemsValidateBeforeCall(String queryString, Integer baselineId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queryString' is set
        if (queryString == null) {
            throw new ApiException("Missing the required parameter 'queryString' when calling findTrackerItems(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerItemsCall(queryString, baselineId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items by cbQL query string
     * 
     * @param queryString  (required)
     * @param baselineId Baseline on which the queery is applied. (optional)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public TrackerItemSearchResult findTrackerItems(String queryString, Integer baselineId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemSearchResult> localVarResp = findTrackerItemsWithHttpInfo(queryString, baselineId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get tracker items by cbQL query string
     * 
     * @param queryString  (required)
     * @param baselineId Baseline on which the queery is applied. (optional)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public ApiResponse<TrackerItemSearchResult> findTrackerItemsWithHttpInfo(String queryString, Integer baselineId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemsValidateBeforeCall(queryString, baselineId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items by cbQL query string (asynchronously)
     * 
     * @param queryString  (required)
     * @param baselineId Baseline on which the queery is applied. (optional)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsAsync(String queryString, Integer baselineId, Integer page, Integer pageSize, final ApiCallback<TrackerItemSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemsValidateBeforeCall(queryString, baselineId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItemsByCbQL
     * @param trackerItemSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsByCbQLCall(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemSearchRequest;

        // create path and map variables
        String localVarPath = "/v3/items/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemsByCbQLValidateBeforeCall(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerItemSearchRequest' is set
        if (trackerItemSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'trackerItemSearchRequest' when calling findTrackerItemsByCbQL(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerItemsByCbQLCall(trackerItemSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (required)
     * @return TrackerItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public TrackerItemSearchResult findTrackerItemsByCbQL(TrackerItemSearchRequest trackerItemSearchRequest) throws ApiException {
        ApiResponse<TrackerItemSearchResult> localVarResp = findTrackerItemsByCbQLWithHttpInfo(trackerItemSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (required)
     * @return ApiResponse&lt;TrackerItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public ApiResponse<TrackerItemSearchResult> findTrackerItemsByCbQLWithHttpInfo(TrackerItemSearchRequest trackerItemSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemsByCbQLValidateBeforeCall(trackerItemSearchRequest, null);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items by cbQL query string (asynchronously)
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tracker items by cbQL </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsByCbQLAsync(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback<TrackerItemSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemsByCbQLValidateBeforeCall(trackerItemSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBaselineTrackerItemRelations
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBaselineTrackerItemRelationsCall(Integer itemId, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/relations"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBaselineTrackerItemRelationsValidateBeforeCall(Integer itemId, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getBaselineTrackerItemRelations(Async)");
        }
        

        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsCall(itemId, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @return TrackerItemRelationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemRelationsResult getBaselineTrackerItemRelations(Integer itemId, Integer baselineId) throws ApiException {
        ApiResponse<TrackerItemRelationsResult> localVarResp = getBaselineTrackerItemRelationsWithHttpInfo(itemId, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;TrackerItemRelationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemRelationsResult> getBaselineTrackerItemRelationsWithHttpInfo(Integer itemId, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsValidateBeforeCall(itemId, baselineId, null);
        Type localVarReturnType = new TypeToken<TrackerItemRelationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items for a baseline version (asynchronously)
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBaselineTrackerItemRelationsAsync(Integer itemId, Integer baselineId, final ApiCallback<TrackerItemRelationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsValidateBeforeCall(itemId, baselineId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemRelationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBaselineTrackerItemsRelations
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBaselineTrackerItemsRelationsCall(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemsRequest;

        // create path and map variables
        String localVarPath = "/v3/items/relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBaselineTrackerItemsRelationsValidateBeforeCall(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerItemsRequest' is set
        if (trackerItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'trackerItemsRequest' when calling getBaselineTrackerItemsRelations(Async)");
        }
        

        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsCall(trackerItemsRequest, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @return List&lt;TrackerItemRelationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackerItemRelationsResult> getBaselineTrackerItemsRelations(TrackerItemsRequest trackerItemsRequest, Integer baselineId) throws ApiException {
        ApiResponse<List<TrackerItemRelationsResult>> localVarResp = getBaselineTrackerItemsRelationsWithHttpInfo(trackerItemsRequest, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItemRelationsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackerItemRelationsResult>> getBaselineTrackerItemsRelationsWithHttpInfo(TrackerItemsRequest trackerItemsRequest, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsValidateBeforeCall(trackerItemsRequest, baselineId, null);
        Type localVarReturnType = new TypeToken<List<TrackerItemRelationsResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items for a baseline version (asynchronously)
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param trackerItemsRequest  (required)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker item list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBaselineTrackerItemsRelationsAsync(TrackerItemsRequest trackerItemsRequest, Integer baselineId, final ApiCallback<List<TrackerItemRelationsResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsValidateBeforeCall(trackerItemsRequest, baselineId, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItemRelationsResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChoiceOptions
     * @param itemId  (required)
     * @param fieldId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Options </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No option found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChoiceOptionsCall(Integer itemId, Integer fieldId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/fields/{fieldId}/options"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChoiceOptionsValidateBeforeCall(Integer itemId, Integer fieldId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getChoiceOptions(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getChoiceOptions(Async)");
        }
        

        okhttp3.Call localVarCall = getChoiceOptionsCall(itemId, fieldId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get the options of a choice field of tracker
     * 
     * @param itemId  (required)
     * @param fieldId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ReferenceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Options </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No option found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ReferenceSearchResult getChoiceOptions(Integer itemId, Integer fieldId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ReferenceSearchResult> localVarResp = getChoiceOptionsWithHttpInfo(itemId, fieldId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the options of a choice field of tracker
     * 
     * @param itemId  (required)
     * @param fieldId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;ReferenceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Options </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No option found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReferenceSearchResult> getChoiceOptionsWithHttpInfo(Integer itemId, Integer fieldId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getChoiceOptionsValidateBeforeCall(itemId, fieldId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ReferenceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the options of a choice field of tracker (asynchronously)
     * 
     * @param itemId  (required)
     * @param fieldId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Options </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No option found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChoiceOptionsAsync(Integer itemId, Integer fieldId, Integer page, Integer pageSize, final ApiCallback<ReferenceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChoiceOptionsValidateBeforeCall(itemId, fieldId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ReferenceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemAccessibility
     * @param itemId Tracker item id (required)
     * @param targetStatusId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accessibility returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAccessibilityCall(Integer itemId, Integer targetStatusId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/fields/accessibility"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetStatusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetStatusId", targetStatusId));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemAccessibilityValidateBeforeCall(Integer itemId, Integer targetStatusId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemAccessibility(Async)");
        }
        

        okhttp3.Call localVarCall = getItemAccessibilityCall(itemId, targetStatusId, _callback);
        return localVarCall;

    }

    /**
     * Get a tracker item fields accessibility
     * 
     * @param itemId Tracker item id (required)
     * @param targetStatusId  (optional)
     * @return TrackerItemFieldAccessibilityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accessibility returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemFieldAccessibilityList getItemAccessibility(Integer itemId, Integer targetStatusId) throws ApiException {
        ApiResponse<TrackerItemFieldAccessibilityList> localVarResp = getItemAccessibilityWithHttpInfo(itemId, targetStatusId);
        return localVarResp.getData();
    }

    /**
     * Get a tracker item fields accessibility
     * 
     * @param itemId Tracker item id (required)
     * @param targetStatusId  (optional)
     * @return ApiResponse&lt;TrackerItemFieldAccessibilityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accessibility returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemFieldAccessibilityList> getItemAccessibilityWithHttpInfo(Integer itemId, Integer targetStatusId) throws ApiException {
        okhttp3.Call localVarCall = getItemAccessibilityValidateBeforeCall(itemId, targetStatusId, null);
        Type localVarReturnType = new TypeToken<TrackerItemFieldAccessibilityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a tracker item fields accessibility (asynchronously)
     * 
     * @param itemId Tracker item id (required)
     * @param targetStatusId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accessibility returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAccessibilityAsync(Integer itemId, Integer targetStatusId, final ApiCallback<TrackerItemFieldAccessibilityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemAccessibilityValidateBeforeCall(itemId, targetStatusId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemFieldAccessibilityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItem
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemCall(Integer itemId, Integer version, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemValidateBeforeCall(Integer itemId, Integer version, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemCall(itemId, version, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItem getTrackerItem(Integer itemId, Integer version, Integer baselineId) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = getTrackerItemWithHttpInfo(itemId, version, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItem> getTrackerItemWithHttpInfo(Integer itemId, Integer version, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemValidateBeforeCall(itemId, version, baselineId, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basic tracker item (asynchronously)
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAsync(Integer itemId, Integer version, Integer baselineId, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemValidateBeforeCall(itemId, version, baselineId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemFields
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Get fields of a tracker item Documentation</a>
     */
    public okhttp3.Call getTrackerItemFieldsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/fields"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemFieldsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemFields(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemFieldsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get fields of a tracker item
     * 
     * @param itemId  (required)
     * @return TrackerItemField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Get fields of a tracker item Documentation</a>
     */
    public TrackerItemField getTrackerItemFields(Integer itemId) throws ApiException {
        ApiResponse<TrackerItemField> localVarResp = getTrackerItemFieldsWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get fields of a tracker item
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItemField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Get fields of a tracker item Documentation</a>
     */
    public ApiResponse<TrackerItemField> getTrackerItemFieldsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemFieldsValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<TrackerItemField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get fields of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Get fields of a tracker item Documentation</a>
     */
    public okhttp3.Call getTrackerItemFieldsAsync(Integer itemId, final ApiCallback<TrackerItemField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemFieldsValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemHistory
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemHistoryCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/history"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemHistoryValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemHistoryCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker item history
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return TrackerItemHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemHistory getTrackerItemHistory(Integer itemId) throws ApiException {
        ApiResponse<TrackerItemHistory> localVarResp = getTrackerItemHistoryWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get tracker item history
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItemHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemHistory> getTrackerItemHistoryWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemHistoryValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<TrackerItemHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker item history (asynchronously)
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemHistoryAsync(Integer itemId, final ApiCallback<TrackerItemHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemHistoryValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemReviews
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for the particular item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemReviewsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/reviews"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemReviewsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemReviews(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemReviewsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get all Tracker Item Reviews for a particular Tracker Item
     * 
     * @param itemId  (required)
     * @return List&lt;TrackerItemReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for the particular item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackerItemReview> getTrackerItemReviews(Integer itemId) throws ApiException {
        ApiResponse<List<TrackerItemReview>> localVarResp = getTrackerItemReviewsWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get all Tracker Item Reviews for a particular Tracker Item
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;List&lt;TrackerItemReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for the particular item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackerItemReview>> getTrackerItemReviewsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemReviewsValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<List<TrackerItemReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Tracker Item Reviews for a particular Tracker Item (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracker item reviews for the particular item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Tracker item reviews are disabled, or access to them is denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemReviewsAsync(Integer itemId, final ApiCallback<List<TrackerItemReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemReviewsValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItemReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemTransitions
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available transitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing user permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemTransitionsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/transitions"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemTransitionsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemTransitions(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemTransitionsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get available transitions for a tracker item
     * API can be used for getting available transitions for a tracker item
     * @param itemId  (required)
     * @return List&lt;WorkflowTransition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available transitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing user permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkflowTransition> getTrackerItemTransitions(Integer itemId) throws ApiException {
        ApiResponse<List<WorkflowTransition>> localVarResp = getTrackerItemTransitionsWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get available transitions for a tracker item
     * API can be used for getting available transitions for a tracker item
     * @param itemId  (required)
     * @return ApiResponse&lt;List&lt;WorkflowTransition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available transitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing user permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkflowTransition>> getTrackerItemTransitionsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemTransitionsValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<List<WorkflowTransition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available transitions for a tracker item (asynchronously)
     * API can be used for getting available transitions for a tracker item
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available transitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing user permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemTransitionsAsync(Integer itemId, final ApiCallback<List<WorkflowTransition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemTransitionsValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<List<WorkflowTransition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockTrackerItem
     * @param itemId Tracker item id (required)
     * @param lockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lock acquired successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, request validation error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not acquire lock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockTrackerItemCall(Integer itemId, LockRequest lockRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = lockRequest;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/lock"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockTrackerItemValidateBeforeCall(Integer itemId, LockRequest lockRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling lockTrackerItem(Async)");
        }
        
        // verify the required parameter 'lockRequest' is set
        if (lockRequest == null) {
            throw new ApiException("Missing the required parameter 'lockRequest' when calling lockTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = lockTrackerItemCall(itemId, lockRequest, _callback);
        return localVarCall;

    }

    /**
     * Put a soft lock on a tracker item
     * 
     * @param itemId Tracker item id (required)
     * @param lockRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lock acquired successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, request validation error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not acquire lock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void lockTrackerItem(Integer itemId, LockRequest lockRequest) throws ApiException {
        lockTrackerItemWithHttpInfo(itemId, lockRequest);
    }

    /**
     * Put a soft lock on a tracker item
     * 
     * @param itemId Tracker item id (required)
     * @param lockRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lock acquired successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, request validation error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not acquire lock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> lockTrackerItemWithHttpInfo(Integer itemId, LockRequest lockRequest) throws ApiException {
        okhttp3.Call localVarCall = lockTrackerItemValidateBeforeCall(itemId, lockRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put a soft lock on a tracker item (asynchronously)
     * 
     * @param itemId Tracker item id (required)
     * @param lockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lock acquired successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, request validation error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not acquire lock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockTrackerItemAsync(Integer itemId, LockRequest lockRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockTrackerItemValidateBeforeCall(itemId, lockRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChildrenOfTracker
     * @param trackerId  (required)
     * @param trackerItemChildReference  (required)
     * @param mode  (optional, default to INSERT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChildrenOfTrackerCall(Integer trackerId, TrackerItemChildReference trackerItemChildReference, String mode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemChildReference;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/children"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChildrenOfTrackerValidateBeforeCall(Integer trackerId, TrackerItemChildReference trackerItemChildReference, String mode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling patchChildrenOfTracker(Async)");
        }
        
        // verify the required parameter 'trackerItemChildReference' is set
        if (trackerItemChildReference == null) {
            throw new ApiException("Missing the required parameter 'trackerItemChildReference' when calling patchChildrenOfTracker(Async)");
        }
        

        okhttp3.Call localVarCall = patchChildrenOfTrackerCall(trackerId, trackerItemChildReference, mode, _callback);
        return localVarCall;

    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItemChildReference  (required)
     * @param mode  (optional, default to INSERT)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemChildReference patchChildrenOfTracker(Integer trackerId, TrackerItemChildReference trackerItemChildReference, String mode) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = patchChildrenOfTrackerWithHttpInfo(trackerId, trackerItemChildReference, mode);
        return localVarResp.getData();
    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param trackerId  (required)
     * @param trackerItemChildReference  (required)
     * @param mode  (optional, default to INSERT)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemChildReference> patchChildrenOfTrackerWithHttpInfo(Integer trackerId, TrackerItemChildReference trackerItemChildReference, String mode) throws ApiException {
        okhttp3.Call localVarCall = patchChildrenOfTrackerValidateBeforeCall(trackerId, trackerItemChildReference, mode, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch the child item list of a tracker item (asynchronously)
     * 
     * @param trackerId  (required)
     * @param trackerItemChildReference  (required)
     * @param mode  (optional, default to INSERT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChildrenOfTrackerAsync(Integer trackerId, TrackerItemChildReference trackerItemChildReference, String mode, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChildrenOfTrackerValidateBeforeCall(trackerId, trackerItemChildReference, mode, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChildrenOfTrackerItem
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChildrenOfTrackerItemCall(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemChildReference;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChildrenOfTrackerItemValidateBeforeCall(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling patchChildrenOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling patchChildrenOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'trackerItemChildReference' is set
        if (trackerItemChildReference == null) {
            throw new ApiException("Missing the required parameter 'trackerItemChildReference' when calling patchChildrenOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = patchChildrenOfTrackerItemCall(itemId, mode, trackerItemChildReference, _callback);
        return localVarCall;

    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (required)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemChildReference patchChildrenOfTrackerItem(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = patchChildrenOfTrackerItemWithHttpInfo(itemId, mode, trackerItemChildReference);
        return localVarResp.getData();
    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (required)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemChildReference> patchChildrenOfTrackerItemWithHttpInfo(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference) throws ApiException {
        okhttp3.Call localVarCall = patchChildrenOfTrackerItemValidateBeforeCall(itemId, mode, trackerItemChildReference, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch the child item list of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New child item reference on the requested index </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChildrenOfTrackerItemAsync(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChildrenOfTrackerItemValidateBeforeCall(itemId, mode, trackerItemChildReference, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceChildrenOfTracker
     * @param trackerId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChildrenOfTrackerCall(Integer trackerId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemChildrenRequest;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/children"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resultPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultPageSize", resultPageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceChildrenOfTrackerValidateBeforeCall(Integer trackerId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling replaceChildrenOfTracker(Async)");
        }
        
        // verify the required parameter 'updateTrackerItemChildrenRequest' is set
        if (updateTrackerItemChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTrackerItemChildrenRequest' when calling replaceChildrenOfTracker(Async)");
        }
        

        okhttp3.Call localVarCall = replaceChildrenOfTrackerCall(trackerId, updateTrackerItemChildrenRequest, resultPageSize, _callback);
        return localVarCall;

    }

    /**
     * Reorder the child item list of a tracker
     * 
     * @param trackerId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemReferenceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemReferenceSearchResult replaceChildrenOfTracker(Integer trackerId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize) throws ApiException {
        ApiResponse<TrackerItemReferenceSearchResult> localVarResp = replaceChildrenOfTrackerWithHttpInfo(trackerId, updateTrackerItemChildrenRequest, resultPageSize);
        return localVarResp.getData();
    }

    /**
     * Reorder the child item list of a tracker
     * 
     * @param trackerId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemReferenceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemReferenceSearchResult> replaceChildrenOfTrackerWithHttpInfo(Integer trackerId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize) throws ApiException {
        okhttp3.Call localVarCall = replaceChildrenOfTrackerValidateBeforeCall(trackerId, updateTrackerItemChildrenRequest, resultPageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reorder the child item list of a tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChildrenOfTrackerAsync(Integer trackerId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback<TrackerItemReferenceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceChildrenOfTrackerValidateBeforeCall(trackerId, updateTrackerItemChildrenRequest, resultPageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceChildrenOfTrackerItem
     * @param itemId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChildrenOfTrackerItemCall(Integer itemId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemChildrenRequest;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resultPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultPageSize", resultPageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceChildrenOfTrackerItemValidateBeforeCall(Integer itemId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling replaceChildrenOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'updateTrackerItemChildrenRequest' is set
        if (updateTrackerItemChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTrackerItemChildrenRequest' when calling replaceChildrenOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemCall(itemId, updateTrackerItemChildrenRequest, resultPageSize, _callback);
        return localVarCall;

    }

    /**
     * Replace the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemReferenceSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItemReferenceSearchResult replaceChildrenOfTrackerItem(Integer itemId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize) throws ApiException {
        ApiResponse<TrackerItemReferenceSearchResult> localVarResp = replaceChildrenOfTrackerItemWithHttpInfo(itemId, updateTrackerItemChildrenRequest, resultPageSize);
        return localVarResp.getData();
    }

    /**
     * Replace the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemReferenceSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItemReferenceSearchResult> replaceChildrenOfTrackerItemWithHttpInfo(Integer itemId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize) throws ApiException {
        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemValidateBeforeCall(itemId, updateTrackerItemChildrenRequest, resultPageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace the child item list of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param updateTrackerItemChildrenRequest  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> First page of the new child list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item is not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceChildrenOfTrackerItemAsync(Integer itemId, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, Integer resultPageSize, final ApiCallback<TrackerItemReferenceSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemValidateBeforeCall(itemId, updateTrackerItemChildrenRequest, resultPageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemReferenceSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockTrackerItem
     * @param itemId Tracker item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unlock successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not unlock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockTrackerItemCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/lock"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockTrackerItemValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unlockTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = unlockTrackerItemCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Unlock a tracker item
     * 
     * @param itemId Tracker item id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unlock successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not unlock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void unlockTrackerItem(Integer itemId) throws ApiException {
        unlockTrackerItemWithHttpInfo(itemId);
    }

    /**
     * Unlock a tracker item
     * 
     * @param itemId Tracker item id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unlock successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not unlock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlockTrackerItemWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = unlockTrackerItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlock a tracker item (asynchronously)
     * 
     * @param itemId Tracker item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unlock successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Could not unlock </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wiki page not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockTrackerItemAsync(Integer itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockTrackerItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFieldTrackerItem
     * @param itemId  (required)
     * @param updateTrackerItemField  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update fields of a tracker item Documentation</a>
     */
    public okhttp3.Call updateCustomFieldTrackerItemCall(Integer itemId, UpdateTrackerItemField updateTrackerItemField, Boolean quietMode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemField;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/fields"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quietMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quietMode", quietMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldTrackerItemValidateBeforeCall(Integer itemId, UpdateTrackerItemField updateTrackerItemField, Boolean quietMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateCustomFieldTrackerItem(Async)");
        }
        
        // verify the required parameter 'updateTrackerItemField' is set
        if (updateTrackerItemField == null) {
            throw new ApiException("Missing the required parameter 'updateTrackerItemField' when calling updateCustomFieldTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomFieldTrackerItemCall(itemId, updateTrackerItemField, quietMode, _callback);
        return localVarCall;

    }

    /**
     * Update fields of a tracker item
     * 
     * @param itemId  (required)
     * @param updateTrackerItemField  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update fields of a tracker item Documentation</a>
     */
    public TrackerItem updateCustomFieldTrackerItem(Integer itemId, UpdateTrackerItemField updateTrackerItemField, Boolean quietMode) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateCustomFieldTrackerItemWithHttpInfo(itemId, updateTrackerItemField, quietMode);
        return localVarResp.getData();
    }

    /**
     * Update fields of a tracker item
     * 
     * @param itemId  (required)
     * @param updateTrackerItemField  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update fields of a tracker item Documentation</a>
     */
    public ApiResponse<TrackerItem> updateCustomFieldTrackerItemWithHttpInfo(Integer itemId, UpdateTrackerItemField updateTrackerItemField, Boolean quietMode) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldTrackerItemValidateBeforeCall(itemId, updateTrackerItemField, quietMode, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update fields of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param updateTrackerItemField  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update fields of a tracker item Documentation</a>
     */
    public okhttp3.Call updateCustomFieldTrackerItemAsync(Integer itemId, UpdateTrackerItemField updateTrackerItemField, Boolean quietMode, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldTrackerItemValidateBeforeCall(itemId, updateTrackerItemField, quietMode, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTableFieldTrackerItem
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableFieldTrackerItemCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemTableField;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/fields/tables/{tableFieldId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "tableFieldId" + "\\}", localVarApiClient.escapeString(tableFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTableFieldTrackerItemValidateBeforeCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateTableFieldTrackerItem(Async)");
        }
        
        // verify the required parameter 'tableFieldId' is set
        if (tableFieldId == null) {
            throw new ApiException("Missing the required parameter 'tableFieldId' when calling updateTableFieldTrackerItem(Async)");
        }
        
        // verify the required parameter 'updateTrackerItemTableField' is set
        if (updateTrackerItemTableField == null) {
            throw new ApiException("Missing the required parameter 'updateTrackerItemTableField' when calling updateTableFieldTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateTableFieldTrackerItemCall(itemId, tableFieldId, updateTrackerItemTableField, _callback);
        return localVarCall;

    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (required)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TrackerItem updateTableFieldTrackerItem(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateTableFieldTrackerItemWithHttpInfo(itemId, tableFieldId, updateTrackerItemTableField);
        return localVarResp.getData();
    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (required)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerItem> updateTableFieldTrackerItemWithHttpInfo(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        okhttp3.Call localVarCall = updateTableFieldTrackerItemValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update table field of tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTableFieldTrackerItemAsync(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTableFieldTrackerItemValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackerItem
     * @param itemId  (required)
     * @param trackerItem  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update tracker item Documentation</a>
     */
    public okhttp3.Call updateTrackerItemCall(Integer itemId, TrackerItem trackerItem, Integer referenceItemId, String position, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItem;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceItemId", referenceItemId));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackerItemValidateBeforeCall(Integer itemId, TrackerItem trackerItem, Integer referenceItemId, String position, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateTrackerItem(Async)");
        }
        
        // verify the required parameter 'trackerItem' is set
        if (trackerItem == null) {
            throw new ApiException("Missing the required parameter 'trackerItem' when calling updateTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateTrackerItemCall(itemId, trackerItem, referenceItemId, position, _callback);
        return localVarCall;

    }

    /**
     * Update tracker item
     * 
     * @param itemId  (required)
     * @param trackerItem  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update tracker item Documentation</a>
     */
    public TrackerItem updateTrackerItem(Integer itemId, TrackerItem trackerItem, Integer referenceItemId, String position) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateTrackerItemWithHttpInfo(itemId, trackerItem, referenceItemId, position);
        return localVarResp.getData();
    }

    /**
     * Update tracker item
     * 
     * @param itemId  (required)
     * @param trackerItem  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update tracker item Documentation</a>
     */
    public ApiResponse<TrackerItem> updateTrackerItemWithHttpInfo(Integer itemId, TrackerItem trackerItem, Integer referenceItemId, String position) throws ApiException {
        okhttp3.Call localVarCall = updateTrackerItemValidateBeforeCall(itemId, trackerItem, referenceItemId, position, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param trackerItem  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Basic tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request cannot be processed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Field not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     * Tracker item operations
     * @see <a href="https://codebeamer.com/cb/wiki/11375769">Update tracker item Documentation</a>
     */
    public okhttp3.Call updateTrackerItemAsync(Integer itemId, TrackerItem trackerItem, Integer referenceItemId, String position, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackerItemValidateBeforeCall(itemId, trackerItem, referenceItemId, position, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
