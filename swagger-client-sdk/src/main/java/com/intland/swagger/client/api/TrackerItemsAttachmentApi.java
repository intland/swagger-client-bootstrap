/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.Attachment;
import com.intland.swagger.client.model.AttachmentSearchResult;
import com.intland.swagger.client.model.TrackerItemAttachmentRequest;

public class TrackerItemsAttachmentApi {
    private ApiClient localVarApiClient;

    public TrackerItemsAttachmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemsAttachmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteTrackerItemAttachment
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemAttachmentCall(Integer itemId, Integer attachmentId, Boolean deleteAttachmentGroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments/{attachmentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteAttachmentGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAttachmentGroup", deleteAttachmentGroup));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemAttachmentValidateBeforeCall(Integer itemId, Integer attachmentId, Boolean deleteAttachmentGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItemAttachment(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling deleteTrackerItemAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemAttachmentCall(itemId, attachmentId, deleteAttachmentGroup, _callback);
        return localVarCall;

    }

    /**
     * Delete attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Attachment deleteTrackerItemAttachment(Integer itemId, Integer attachmentId, Boolean deleteAttachmentGroup) throws ApiException {
        ApiResponse<Attachment> localVarResp = deleteTrackerItemAttachmentWithHttpInfo(itemId, attachmentId, deleteAttachmentGroup);
        return localVarResp.getData();
    }

    /**
     * Delete attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> deleteTrackerItemAttachmentWithHttpInfo(Integer itemId, Integer attachmentId, Boolean deleteAttachmentGroup) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemAttachmentValidateBeforeCall(itemId, attachmentId, deleteAttachmentGroup, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete attachment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemAttachmentAsync(Integer itemId, Integer attachmentId, Boolean deleteAttachmentGroup, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemAttachmentValidateBeforeCall(itemId, attachmentId, deleteAttachmentGroup, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerItemAttachments
     * @param itemId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemAttachmentsCall(Integer itemId, Boolean deleteAttachmentGroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteAttachmentGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAttachmentGroup", deleteAttachmentGroup));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemAttachmentsValidateBeforeCall(Integer itemId, Boolean deleteAttachmentGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItemAttachments(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemAttachmentsCall(itemId, deleteAttachmentGroup, _callback);
        return localVarCall;

    }

    /**
     * Delete attachments of tracker item
     * 
     * @param itemId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrackerItemAttachments(Integer itemId, Boolean deleteAttachmentGroup) throws ApiException {
        deleteTrackerItemAttachmentsWithHttpInfo(itemId, deleteAttachmentGroup);
    }

    /**
     * Delete attachments of tracker item
     * 
     * @param itemId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrackerItemAttachmentsWithHttpInfo(Integer itemId, Boolean deleteAttachmentGroup) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemAttachmentsValidateBeforeCall(itemId, deleteAttachmentGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete attachments of tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemAttachmentsAsync(Integer itemId, Boolean deleteAttachmentGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemAttachmentsValidateBeforeCall(itemId, deleteAttachmentGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemAttachment
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentCall(Integer itemId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments/{attachmentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemAttachmentValidateBeforeCall(Integer itemId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemAttachment(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getTrackerItemAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemAttachmentCall(itemId, attachmentId, _callback);
        return localVarCall;

    }

    /**
     * Get attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Attachment getTrackerItemAttachment(Integer itemId, Integer attachmentId) throws ApiException {
        ApiResponse<Attachment> localVarResp = getTrackerItemAttachmentWithHttpInfo(itemId, attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> getTrackerItemAttachmentWithHttpInfo(Integer itemId, Integer attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemAttachmentValidateBeforeCall(itemId, attachmentId, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentAsync(Integer itemId, Integer attachmentId, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemAttachmentValidateBeforeCall(itemId, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemAttachmentContent
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentContentCall(Integer itemId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments/{attachmentId}/content"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemAttachmentContentValidateBeforeCall(Integer itemId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemAttachmentContent(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getTrackerItemAttachmentContent(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemAttachmentContentCall(itemId, attachmentId, _callback);
        return localVarCall;

    }

    /**
     * Get content of an attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public File getTrackerItemAttachmentContent(Integer itemId, Integer attachmentId) throws ApiException {
        ApiResponse<File> localVarResp = getTrackerItemAttachmentContentWithHttpInfo(itemId, attachmentId);
        return localVarResp.getData();
    }

    /**
     * Get content of an attachment of tracker item by id
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getTrackerItemAttachmentContentWithHttpInfo(Integer itemId, Integer attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemAttachmentContentValidateBeforeCall(itemId, attachmentId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get content of an attachment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / Attachment not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentContentAsync(Integer itemId, Integer attachmentId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemAttachmentContentValidateBeforeCall(itemId, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemAttachmentContents
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of a tracker item: contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentContentsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments/content"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemAttachmentContentsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemAttachmentContents(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemAttachmentContentsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get attachments of a tracker item
     * 
     * @param itemId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of a tracker item: contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public File getTrackerItemAttachmentContents(Integer itemId) throws ApiException {
        ApiResponse<File> localVarResp = getTrackerItemAttachmentContentsWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get attachments of a tracker item
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of a tracker item: contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getTrackerItemAttachmentContentsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemAttachmentContentsValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachments of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of a tracker item: contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentContentsAsync(Integer itemId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemAttachmentContentsValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemAttachments
     * @param itemId Id of the tracker item (required)
     * @param fileName Filter by part of the filename of the attachments (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentsCall(Integer itemId, String fileName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileName", fileName));
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemAttachmentsValidateBeforeCall(Integer itemId, String fileName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemAttachments(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemAttachmentsCall(itemId, fileName, _callback);
        return localVarCall;

    }

    /**
     * Get attachments of tracker item
     * 
     * @param itemId Id of the tracker item (required)
     * @param fileName Filter by part of the filename of the attachments (optional)
     * @return AttachmentSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentSearchResult getTrackerItemAttachments(Integer itemId, String fileName) throws ApiException {
        ApiResponse<AttachmentSearchResult> localVarResp = getTrackerItemAttachmentsWithHttpInfo(itemId, fileName);
        return localVarResp.getData();
    }

    /**
     * Get attachments of tracker item
     * 
     * @param itemId Id of the tracker item (required)
     * @param fileName Filter by part of the filename of the attachments (optional)
     * @return ApiResponse&lt;AttachmentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentSearchResult> getTrackerItemAttachmentsWithHttpInfo(Integer itemId, String fileName) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemAttachmentsValidateBeforeCall(itemId, fileName, null);
        Type localVarReturnType = new TypeToken<AttachmentSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachments of tracker item (asynchronously)
     * 
     * @param itemId Id of the tracker item (required)
     * @param fileName Filter by part of the filename of the attachments (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemAttachmentsAsync(Integer itemId, String fileName, final ApiCallback<AttachmentSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemAttachmentsValidateBeforeCall(itemId, fileName, _callback);
        Type localVarReturnType = new TypeToken<AttachmentSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemsAttachmentContents
     * @param trackerItemAttachmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker items: each tracker item goes to a subdirectory named as item-id and this directory contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker items not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemsAttachmentContentsCall(TrackerItemAttachmentRequest trackerItemAttachmentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemAttachmentRequest;

        // create path and map variables
        String localVarPath = "/v3/items/attachments/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemsAttachmentContentsValidateBeforeCall(TrackerItemAttachmentRequest trackerItemAttachmentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerItemAttachmentRequest' is set
        if (trackerItemAttachmentRequest == null) {
            throw new ApiException("Missing the required parameter 'trackerItemAttachmentRequest' when calling getTrackerItemsAttachmentContents(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemsAttachmentContentsCall(trackerItemAttachmentRequest, _callback);
        return localVarCall;

    }

    /**
     * Get attachments of tracker items matching the extension or mime type filters
     * 
     * @param trackerItemAttachmentRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker items: each tracker item goes to a subdirectory named as item-id and this directory contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker items not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public File getTrackerItemsAttachmentContents(TrackerItemAttachmentRequest trackerItemAttachmentRequest) throws ApiException {
        ApiResponse<File> localVarResp = getTrackerItemsAttachmentContentsWithHttpInfo(trackerItemAttachmentRequest);
        return localVarResp.getData();
    }

    /**
     * Get attachments of tracker items matching the extension or mime type filters
     * 
     * @param trackerItemAttachmentRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker items: each tracker item goes to a subdirectory named as item-id and this directory contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker items not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getTrackerItemsAttachmentContentsWithHttpInfo(TrackerItemAttachmentRequest trackerItemAttachmentRequest) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemsAttachmentContentsValidateBeforeCall(trackerItemAttachmentRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachments of tracker items matching the extension or mime type filters (asynchronously)
     * 
     * @param trackerItemAttachmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachments of tracker items: each tracker item goes to a subdirectory named as item-id and this directory contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker items not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemsAttachmentContentsAsync(TrackerItemAttachmentRequest trackerItemAttachmentRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemsAttachmentContentsValidateBeforeCall(trackerItemAttachmentRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttachmentOfTrackerItem
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param content  (optional)
     * @param description Description (optional)
     * @param descriptionFormat Format of description (optional, default to DescriptionFormatEnum.PLAINTEXT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item or attachment not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentOfTrackerItemCall(Integer itemId, Integer attachmentId, File content, String description, String descriptionFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments/{attachmentId}/content"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (descriptionFormat != null) {
            localVarFormParams.put("descriptionFormat", descriptionFormat);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttachmentOfTrackerItemValidateBeforeCall(Integer itemId, Integer attachmentId, File content, String description, String descriptionFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateAttachmentOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling updateAttachmentOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateAttachmentOfTrackerItemCall(itemId, attachmentId, content, description, descriptionFormat, _callback);
        return localVarCall;

    }

    /**
     * Update content of attachment of tracker item
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param content  (optional)
     * @param description Description (optional)
     * @param descriptionFormat Format of description (optional, default to DescriptionFormatEnum.PLAINTEXT)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item or attachment not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Attachment updateAttachmentOfTrackerItem(Integer itemId, Integer attachmentId, File content, String description, String descriptionFormat) throws ApiException {
        ApiResponse<Attachment> localVarResp = updateAttachmentOfTrackerItemWithHttpInfo(itemId, attachmentId, content, description, descriptionFormat);
        return localVarResp.getData();
    }

    /**
     * Update content of attachment of tracker item
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param content  (optional)
     * @param description Description (optional)
     * @param descriptionFormat Format of description (optional, default to DescriptionFormatEnum.PLAINTEXT)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item or attachment not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> updateAttachmentOfTrackerItemWithHttpInfo(Integer itemId, Integer attachmentId, File content, String description, String descriptionFormat) throws ApiException {
        okhttp3.Call localVarCall = updateAttachmentOfTrackerItemValidateBeforeCall(itemId, attachmentId, content, description, descriptionFormat, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update content of attachment of tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param attachmentId  (required)
     * @param content  (optional)
     * @param description Description (optional)
     * @param descriptionFormat Format of description (optional, default to DescriptionFormatEnum.PLAINTEXT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item or attachment not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttachmentOfTrackerItemAsync(Integer itemId, Integer attachmentId, File content, String description, String descriptionFormat, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttachmentOfTrackerItemValidateBeforeCall(itemId, attachmentId, content, description, descriptionFormat, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadTrackerItemAttachment
     * @param itemId  (required)
     * @param attachments Attachments of a comment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadTrackerItemAttachmentCall(Integer itemId, File attachments, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/attachments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadTrackerItemAttachmentValidateBeforeCall(Integer itemId, File attachments, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling uploadTrackerItemAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = uploadTrackerItemAttachmentCall(itemId, attachments, _callback);
        return localVarCall;

    }

    /**
     * Upload an attachment to a tracker item
     * 
     * @param itemId  (required)
     * @param attachments Attachments of a comment (optional)
     * @return List&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<Attachment> uploadTrackerItemAttachment(Integer itemId, File attachments) throws ApiException {
        ApiResponse<List<Attachment>> localVarResp = uploadTrackerItemAttachmentWithHttpInfo(itemId, attachments);
        return localVarResp.getData();
    }

    /**
     * Upload an attachment to a tracker item
     * 
     * @param itemId  (required)
     * @param attachments Attachments of a comment (optional)
     * @return ApiResponse&lt;List&lt;Attachment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attachment>> uploadTrackerItemAttachmentWithHttpInfo(Integer itemId, File attachments) throws ApiException {
        okhttp3.Call localVarCall = uploadTrackerItemAttachmentValidateBeforeCall(itemId, attachments, null);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an attachment to a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param attachments Attachments of a comment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadTrackerItemAttachmentAsync(Integer itemId, File attachments, final ApiCallback<List<Attachment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadTrackerItemAttachmentValidateBeforeCall(itemId, attachments, _callback);
        Type localVarReturnType = new TypeToken<List<Attachment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
