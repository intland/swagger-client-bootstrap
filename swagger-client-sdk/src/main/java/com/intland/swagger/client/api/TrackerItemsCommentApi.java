/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.Comment;

public class TrackerItemsCommentApi {
    private ApiClient localVarApiClient;

    public TrackerItemsCommentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemsCommentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for commentOnTrackerItem
     * @param itemId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentOnTrackerItemCall(Integer itemId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentOnTrackerItemValidateBeforeCall(Integer itemId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling commentOnTrackerItem(Async)");
        }
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling commentOnTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = commentOnTrackerItemCall(itemId, comment, attachments, commentFormat, _callback);
        return localVarCall;

    }

    /**
     * Comment on a tracker item
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Comment commentOnTrackerItem(Integer itemId, String comment, File attachments, String commentFormat) throws ApiException {
        ApiResponse<Comment> localVarResp = commentOnTrackerItemWithHttpInfo(itemId, comment, attachments, commentFormat);
        return localVarResp.getData();
    }

    /**
     * Comment on a tracker item
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> commentOnTrackerItemWithHttpInfo(Integer itemId, String comment, File attachments, String commentFormat) throws ApiException {
        okhttp3.Call localVarCall = commentOnTrackerItemValidateBeforeCall(itemId, comment, attachments, commentFormat, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Comment on a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentOnTrackerItemAsync(Integer itemId, String comment, File attachments, String commentFormat, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentOnTrackerItemValidateBeforeCall(itemId, comment, attachments, commentFormat, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerItemComment
     * @param itemId  (required)
     * @param commentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemCommentCall(Integer itemId, Integer commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemCommentValidateBeforeCall(Integer itemId, Integer commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItemComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteTrackerItemComment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemCommentCall(itemId, commentId, _callback);
        return localVarCall;

    }

    /**
     * Delete comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Comment deleteTrackerItemComment(Integer itemId, Integer commentId) throws ApiException {
        ApiResponse<Comment> localVarResp = deleteTrackerItemCommentWithHttpInfo(itemId, commentId);
        return localVarResp.getData();
    }

    /**
     * Delete comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> deleteTrackerItemCommentWithHttpInfo(Integer itemId, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemCommentValidateBeforeCall(itemId, commentId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete comment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemCommentAsync(Integer itemId, Integer commentId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemCommentValidateBeforeCall(itemId, commentId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerItemComments
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemCommentsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemCommentsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItemComments(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemCommentsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Delete comments of tracker item by item id
     * 
     * @param itemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrackerItemComments(Integer itemId) throws ApiException {
        deleteTrackerItemCommentsWithHttpInfo(itemId);
    }

    /**
     * Delete comments of tracker item by item id
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrackerItemCommentsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemCommentsValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete comments of tracker item by item id (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackerItemCommentsAsync(Integer itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemCommentsValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCommentOnTrackerItem
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edited comment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCommentOnTrackerItemCall(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCommentOnTrackerItemValidateBeforeCall(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling editCommentOnTrackerItem(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling editCommentOnTrackerItem(Async)");
        }
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling editCommentOnTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = editCommentOnTrackerItemCall(itemId, commentId, comment, attachments, commentFormat, _callback);
        return localVarCall;

    }

    /**
     * Edit comment on a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edited comment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Comment editCommentOnTrackerItem(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat) throws ApiException {
        ApiResponse<Comment> localVarResp = editCommentOnTrackerItemWithHttpInfo(itemId, commentId, comment, attachments, commentFormat);
        return localVarResp.getData();
    }

    /**
     * Edit comment on a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edited comment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> editCommentOnTrackerItemWithHttpInfo(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat) throws ApiException {
        okhttp3.Call localVarCall = editCommentOnTrackerItemValidateBeforeCall(itemId, commentId, comment, attachments, commentFormat, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit comment on a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edited comment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCommentOnTrackerItemAsync(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCommentOnTrackerItemValidateBeforeCall(itemId, commentId, comment, attachments, commentFormat, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemComment
     * @param itemId  (required)
     * @param commentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemCommentCall(Integer itemId, Integer commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemCommentValidateBeforeCall(Integer itemId, Integer commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getTrackerItemComment(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemCommentCall(itemId, commentId, _callback);
        return localVarCall;

    }

    /**
     * Get comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Comment getTrackerItemComment(Integer itemId, Integer commentId) throws ApiException {
        ApiResponse<Comment> localVarResp = getTrackerItemCommentWithHttpInfo(itemId, commentId);
        return localVarResp.getData();
    }

    /**
     * Get comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> getTrackerItemCommentWithHttpInfo(Integer itemId, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemCommentValidateBeforeCall(itemId, commentId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemCommentAsync(Integer itemId, Integer commentId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemCommentValidateBeforeCall(itemId, commentId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemComments
     * @param itemId Id of a tracker item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemCommentsCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemCommentsValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemComments(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemCommentsCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get comments of tracker item
     * 
     * @param itemId Id of a tracker item (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> getTrackerItemComments(Integer itemId) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = getTrackerItemCommentsWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get comments of tracker item
     * 
     * @param itemId Id of a tracker item (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> getTrackerItemCommentsWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemCommentsValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comments of tracker item (asynchronously)
     * 
     * @param itemId Id of a tracker item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comments of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker item not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerItemCommentsAsync(Integer itemId, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemCommentsValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replyOnCommentOfTrackerItem
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replyOnCommentOfTrackerItemCall(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/items/{itemId}/comments/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replyOnCommentOfTrackerItemValidateBeforeCall(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling replyOnCommentOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling replyOnCommentOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling replyOnCommentOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = replyOnCommentOfTrackerItemCall(itemId, commentId, comment, attachments, commentFormat, _callback);
        return localVarCall;

    }

    /**
     * Reply on a comment of a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Comment replyOnCommentOfTrackerItem(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat) throws ApiException {
        ApiResponse<Comment> localVarResp = replyOnCommentOfTrackerItemWithHttpInfo(itemId, commentId, comment, attachments, commentFormat);
        return localVarResp.getData();
    }

    /**
     * Reply on a comment of a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> replyOnCommentOfTrackerItemWithHttpInfo(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat) throws ApiException {
        okhttp3.Call localVarCall = replyOnCommentOfTrackerItemValidateBeforeCall(itemId, commentId, comment, attachments, commentFormat, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reply on a comment of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (required)
     * @param attachments Attachments of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to CommentFormatEnum.PLAINTEXT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment of tracker item by id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker not found </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Tracker item is locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replyOnCommentOfTrackerItemAsync(Integer itemId, Integer commentId, String comment, File attachments, String commentFormat, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = replyOnCommentOfTrackerItemValidateBeforeCall(itemId, commentId, comment, attachments, commentFormat, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
