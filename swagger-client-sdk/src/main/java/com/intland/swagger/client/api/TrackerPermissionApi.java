/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.model.PermissionIdsRequest;
import com.intland.swagger.client.model.RoleWithPermissions;
import com.intland.swagger.client.model.TrackerPermission;
import com.intland.swagger.client.model.TrackerPermissionReference;

public class TrackerPermissionApi {
    private ApiClient localVarApiClient;

    public TrackerPermissionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerPermissionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getTrackerPermission
     * @param trackerPermissionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionCall(Integer trackerPermissionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/trackers/permissions/{trackerPermissionId}"
            .replaceAll("\\{" + "trackerPermissionId" + "\\}", localVarApiClient.escapeString(trackerPermissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerPermissionValidateBeforeCall(Integer trackerPermissionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerPermissionId' is set
        if (trackerPermissionId == null) {
            throw new ApiException("Missing the required parameter 'trackerPermissionId' when calling getTrackerPermission(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerPermissionCall(trackerPermissionId, _callback);
        return localVarCall;

    }

    /**
     * Get the immutable definition of a tracker permission
     * 
     * @param trackerPermissionId  (required)
     * @return TrackerPermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public TrackerPermission getTrackerPermission(Integer trackerPermissionId) throws ApiException {
        ApiResponse<TrackerPermission> localVarResp = getTrackerPermissionWithHttpInfo(trackerPermissionId);
        return localVarResp.getData();
    }

    /**
     * Get the immutable definition of a tracker permission
     * 
     * @param trackerPermissionId  (required)
     * @return ApiResponse&lt;TrackerPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackerPermission> getTrackerPermissionWithHttpInfo(Integer trackerPermissionId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerPermissionValidateBeforeCall(trackerPermissionId, null);
        Type localVarReturnType = new TypeToken<TrackerPermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the immutable definition of a tracker permission (asynchronously)
     * 
     * @param trackerPermissionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permission. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionAsync(Integer trackerPermissionId, final ApiCallback<TrackerPermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerPermissionValidateBeforeCall(trackerPermissionId, _callback);
        Type localVarReturnType = new TypeToken<TrackerPermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerPermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker permission is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/trackers/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTrackerPermissionsCall(_callback);
        return localVarCall;

    }

    /**
     * Get available tracker permissions
     * 
     * @return List&lt;TrackerPermissionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker permission is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackerPermissionReference> getTrackerPermissions() throws ApiException {
        ApiResponse<List<TrackerPermissionReference>> localVarResp = getTrackerPermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get available tracker permissions
     * 
     * @return ApiResponse&lt;List&lt;TrackerPermissionReference&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker permission is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackerPermissionReference>> getTrackerPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTrackerPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TrackerPermissionReference>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available tracker permissions (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker permission is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionsAsync(final ApiCallback<List<TrackerPermissionReference>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TrackerPermissionReference>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerPermissionsWithRoles
     * @param trackerId  (required)
     * @param userId  (optional)
     * @param roleId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions by role. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No access permission for this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionsWithRolesCall(Integer trackerId, Integer userId, Integer roleId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/permissions"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleId", roleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerPermissionsWithRolesValidateBeforeCall(Integer trackerId, Integer userId, Integer roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getTrackerPermissionsWithRoles(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerPermissionsWithRolesCall(trackerId, userId, roleId, _callback);
        return localVarCall;

    }

    /**
     * List tracker permissions per role
     * API can be used to list tracker permissions per roles, filtering is possible by user, user and on of the user&#39;s role, or just by role
     * @param trackerId  (required)
     * @param userId  (optional)
     * @param roleId  (optional)
     * @return List&lt;RoleWithPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions by role. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No access permission for this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleWithPermissions> getTrackerPermissionsWithRoles(Integer trackerId, Integer userId, Integer roleId) throws ApiException {
        ApiResponse<List<RoleWithPermissions>> localVarResp = getTrackerPermissionsWithRolesWithHttpInfo(trackerId, userId, roleId);
        return localVarResp.getData();
    }

    /**
     * List tracker permissions per role
     * API can be used to list tracker permissions per roles, filtering is possible by user, user and on of the user&#39;s role, or just by role
     * @param trackerId  (required)
     * @param userId  (optional)
     * @param roleId  (optional)
     * @return ApiResponse&lt;List&lt;RoleWithPermissions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions by role. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No access permission for this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleWithPermissions>> getTrackerPermissionsWithRolesWithHttpInfo(Integer trackerId, Integer userId, Integer roleId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerPermissionsWithRolesValidateBeforeCall(trackerId, userId, roleId, null);
        Type localVarReturnType = new TypeToken<List<RoleWithPermissions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tracker permissions per role (asynchronously)
     * API can be used to list tracker permissions per roles, filtering is possible by user, user and on of the user&#39;s role, or just by role
     * @param trackerId  (required)
     * @param userId  (optional)
     * @param roleId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions by role. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No access permission for this resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackerPermissionsWithRolesAsync(Integer trackerId, Integer userId, Integer roleId, final ApiCallback<List<RoleWithPermissions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerPermissionsWithRolesValidateBeforeCall(trackerId, userId, roleId, _callback);
        Type localVarReturnType = new TypeToken<List<RoleWithPermissions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePermissions
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker/role is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePermissionsCall(Integer trackerId, Integer roleId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/roles/{roleId}/permissions"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "roleId" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePermissionsValidateBeforeCall(Integer trackerId, Integer roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling removePermissions(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removePermissions(Async)");
        }
        

        okhttp3.Call localVarCall = removePermissionsCall(trackerId, roleId, _callback);
        return localVarCall;

    }

    /**
     * Removes all tracker permissions from a specific role
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker/role is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void removePermissions(Integer trackerId, Integer roleId) throws ApiException {
        removePermissionsWithHttpInfo(trackerId, roleId);
    }

    /**
     * Removes all tracker permissions from a specific role
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker/role is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removePermissionsWithHttpInfo(Integer trackerId, Integer roleId) throws ApiException {
        okhttp3.Call localVarCall = removePermissionsValidateBeforeCall(trackerId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes all tracker permissions from a specific role (asynchronously)
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker/role is not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePermissionsAsync(Integer trackerId, Integer roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePermissionsValidateBeforeCall(trackerId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePermission
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param permissionIdsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions are set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / permission / roles not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePermissionCall(Integer trackerId, Integer roleId, PermissionIdsRequest permissionIdsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = permissionIdsRequest;

        // create path and map variables
        String localVarPath = "/v3/trackers/{trackerId}/roles/{roleId}/permissions"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "roleId" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePermissionValidateBeforeCall(Integer trackerId, Integer roleId, PermissionIdsRequest permissionIdsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling updatePermission(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updatePermission(Async)");
        }
        
        // verify the required parameter 'permissionIdsRequest' is set
        if (permissionIdsRequest == null) {
            throw new ApiException("Missing the required parameter 'permissionIdsRequest' when calling updatePermission(Async)");
        }
        

        okhttp3.Call localVarCall = updatePermissionCall(trackerId, roleId, permissionIdsRequest, _callback);
        return localVarCall;

    }

    /**
     * Set the tracker permissions for a specific role
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param permissionIdsRequest  (required)
     * @return List&lt;RoleWithPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions are set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / permission / roles not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleWithPermissions> updatePermission(Integer trackerId, Integer roleId, PermissionIdsRequest permissionIdsRequest) throws ApiException {
        ApiResponse<List<RoleWithPermissions>> localVarResp = updatePermissionWithHttpInfo(trackerId, roleId, permissionIdsRequest);
        return localVarResp.getData();
    }

    /**
     * Set the tracker permissions for a specific role
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param permissionIdsRequest  (required)
     * @return ApiResponse&lt;List&lt;RoleWithPermissions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions are set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / permission / roles not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleWithPermissions>> updatePermissionWithHttpInfo(Integer trackerId, Integer roleId, PermissionIdsRequest permissionIdsRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePermissionValidateBeforeCall(trackerId, roleId, permissionIdsRequest, null);
        Type localVarReturnType = new TypeToken<List<RoleWithPermissions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the tracker permissions for a specific role (asynchronously)
     * 
     * @param trackerId  (required)
     * @param roleId  (required)
     * @param permissionIdsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tracker permissions are set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication is required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tracker / permission / roles not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePermissionAsync(Integer trackerId, Integer roleId, PermissionIdsRequest permissionIdsRequest, final ApiCallback<List<RoleWithPermissions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePermissionValidateBeforeCall(trackerId, roleId, permissionIdsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<RoleWithPermissions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
