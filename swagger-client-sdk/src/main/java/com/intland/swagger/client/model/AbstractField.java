/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Abstract field
 */
@ApiModel(description = "Abstract field")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class AbstractField {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private String formula;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_HIDE_IF_DEPENDENCY_FORMULA = "hideIfDependencyFormula";
  @SerializedName(SERIALIZED_NAME_HIDE_IF_DEPENDENCY_FORMULA)
  private String hideIfDependencyFormula;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LEGACY_REST_NAME = "legacyRestName";
  @SerializedName(SERIALIZED_NAME_LEGACY_REST_NAME)
  private String legacyRestName;

  public static final String SERIALIZED_NAME_MANDATORY_IF_DEPENDENCY_FORMULA = "mandatoryIfDependencyFormula";
  @SerializedName(SERIALIZED_NAME_MANDATORY_IF_DEPENDENCY_FORMULA)
  private String mandatoryIfDependencyFormula;

  public static final String SERIALIZED_NAME_MANDATORY_IN_STATUSES = "mandatoryInStatuses";
  @SerializedName(SERIALIZED_NAME_MANDATORY_IN_STATUSES)
  private List<ChoiceOptionReference> mandatoryInStatuses = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHARED_FIELDS = "sharedFields";
  @SerializedName(SERIALIZED_NAME_SHARED_FIELDS)
  private List<SharedFieldReference> sharedFields = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACKER_ITEM_FIELD = "trackerItemField";
  @SerializedName(SERIALIZED_NAME_TRACKER_ITEM_FIELD)
  private String trackerItemField;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public static final String SERIALIZED_NAME_VALUE_MODEL = "valueModel";
  @SerializedName(SERIALIZED_NAME_VALUE_MODEL)
  private String valueModel;

  public AbstractField() { 
    this.type = this.getClass().getSimpleName();
  }

  public AbstractField description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of a field
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of a field")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AbstractField formula(String formula) {
    
    this.formula = formula;
    return this;
  }

   /**
   * Formula value of a field
   * @return formula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Formula value of a field")

  public String getFormula() {
    return formula;
  }


  public void setFormula(String formula) {
    this.formula = formula;
  }


  public AbstractField hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * Visibility status of a field
   * @return hidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Visibility status of a field")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public AbstractField hideIfDependencyFormula(String hideIfDependencyFormula) {
    
    this.hideIfDependencyFormula = hideIfDependencyFormula;
    return this;
  }

   /**
   * Hide If dependency formula value of a field
   * @return hideIfDependencyFormula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hide If dependency formula value of a field")

  public String getHideIfDependencyFormula() {
    return hideIfDependencyFormula;
  }


  public void setHideIfDependencyFormula(String hideIfDependencyFormula) {
    this.hideIfDependencyFormula = hideIfDependencyFormula;
  }


  public AbstractField id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of a field
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of a field")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public AbstractField legacyRestName(String legacyRestName) {
    
    this.legacyRestName = legacyRestName;
    return this;
  }

   /**
   * Identifier matching the legacy REST API naming
   * @return legacyRestName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier matching the legacy REST API naming")

  public String getLegacyRestName() {
    return legacyRestName;
  }


  public void setLegacyRestName(String legacyRestName) {
    this.legacyRestName = legacyRestName;
  }


  public AbstractField mandatoryIfDependencyFormula(String mandatoryIfDependencyFormula) {
    
    this.mandatoryIfDependencyFormula = mandatoryIfDependencyFormula;
    return this;
  }

   /**
   * Mandatory If dependency formula value of a field
   * @return mandatoryIfDependencyFormula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory If dependency formula value of a field")

  public String getMandatoryIfDependencyFormula() {
    return mandatoryIfDependencyFormula;
  }


  public void setMandatoryIfDependencyFormula(String mandatoryIfDependencyFormula) {
    this.mandatoryIfDependencyFormula = mandatoryIfDependencyFormula;
  }


  public AbstractField mandatoryInStatuses(List<ChoiceOptionReference> mandatoryInStatuses) {
    
    this.mandatoryInStatuses = mandatoryInStatuses;
    return this;
  }

  public AbstractField addMandatoryInStatusesItem(ChoiceOptionReference mandatoryInStatusesItem) {
    if (this.mandatoryInStatuses == null) {
      this.mandatoryInStatuses = new ArrayList<>();
    }
    this.mandatoryInStatuses.add(mandatoryInStatusesItem);
    return this;
  }

   /**
   * List of statuses where the field is mandatory.
   * @return mandatoryInStatuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of statuses where the field is mandatory.")

  public List<ChoiceOptionReference> getMandatoryInStatuses() {
    return mandatoryInStatuses;
  }


  public void setMandatoryInStatuses(List<ChoiceOptionReference> mandatoryInStatuses) {
    this.mandatoryInStatuses = mandatoryInStatuses;
  }


  public AbstractField name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of a field
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of a field")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AbstractField sharedFields(List<SharedFieldReference> sharedFields) {
    
    this.sharedFields = sharedFields;
    return this;
  }

  public AbstractField addSharedFieldsItem(SharedFieldReference sharedFieldsItem) {
    if (this.sharedFields == null) {
      this.sharedFields = new ArrayList<>();
    }
    this.sharedFields.add(sharedFieldsItem);
    return this;
  }

   /**
   * List of shared fields assigned to this field
   * @return sharedFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of shared fields assigned to this field")

  public List<SharedFieldReference> getSharedFields() {
    return sharedFields;
  }


  public void setSharedFields(List<SharedFieldReference> sharedFields) {
    this.sharedFields = sharedFields;
  }


  public AbstractField title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title of a field
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of a field")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public AbstractField trackerItemField(String trackerItemField) {
    
    this.trackerItemField = trackerItemField;
    return this;
  }

   /**
   * Tracker item&#39;s field name for this field
   * @return trackerItemField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracker item's field name for this field")

  public String getTrackerItemField() {
    return trackerItemField;
  }


  public void setTrackerItemField(String trackerItemField) {
    this.trackerItemField = trackerItemField;
  }


  public AbstractField type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of a field
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of a field")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public AbstractField valueModel(String valueModel) {
    
    this.valueModel = valueModel;
    return this;
  }

   /**
   * Name of the updater/getter value model
   * @return valueModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the updater/getter value model")

  public String getValueModel() {
    return valueModel;
  }


  public void setValueModel(String valueModel) {
    this.valueModel = valueModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractField abstractField = (AbstractField) o;
    return Objects.equals(this.description, abstractField.description) &&
        Objects.equals(this.formula, abstractField.formula) &&
        Objects.equals(this.hidden, abstractField.hidden) &&
        Objects.equals(this.hideIfDependencyFormula, abstractField.hideIfDependencyFormula) &&
        Objects.equals(this.id, abstractField.id) &&
        Objects.equals(this.legacyRestName, abstractField.legacyRestName) &&
        Objects.equals(this.mandatoryIfDependencyFormula, abstractField.mandatoryIfDependencyFormula) &&
        Objects.equals(this.mandatoryInStatuses, abstractField.mandatoryInStatuses) &&
        Objects.equals(this.name, abstractField.name) &&
        Objects.equals(this.sharedFields, abstractField.sharedFields) &&
        Objects.equals(this.title, abstractField.title) &&
        Objects.equals(this.trackerItemField, abstractField.trackerItemField) &&
        Objects.equals(this.type, abstractField.type) &&
        Objects.equals(this.valueModel, abstractField.valueModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, formula, hidden, hideIfDependencyFormula, id, legacyRestName, mandatoryIfDependencyFormula, mandatoryInStatuses, name, sharedFields, title, trackerItemField, type, valueModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractField {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    hideIfDependencyFormula: ").append(toIndentedString(hideIfDependencyFormula)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legacyRestName: ").append(toIndentedString(legacyRestName)).append("\n");
    sb.append("    mandatoryIfDependencyFormula: ").append(toIndentedString(mandatoryIfDependencyFormula)).append("\n");
    sb.append("    mandatoryInStatuses: ").append(toIndentedString(mandatoryInStatuses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sharedFields: ").append(toIndentedString(sharedFields)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trackerItemField: ").append(toIndentedString(trackerItemField)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueModel: ").append(toIndentedString(valueModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("formula");
    openapiFields.add("hidden");
    openapiFields.add("hideIfDependencyFormula");
    openapiFields.add("id");
    openapiFields.add("legacyRestName");
    openapiFields.add("mandatoryIfDependencyFormula");
    openapiFields.add("mandatoryInStatuses");
    openapiFields.add("name");
    openapiFields.add("sharedFields");
    openapiFields.add("title");
    openapiFields.add("trackerItemField");
    openapiFields.add("type");
    openapiFields.add("valueModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AbstractField
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AbstractField.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbstractField is not found in the empty JSON string", AbstractField.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("type").getAsString();
      switch (discriminatorValue) {
        case "ArtifactReferenceField":
          ArtifactReferenceField.validateJsonObject(jsonObj);
          break;
        case "BoolField":
          BoolField.validateJsonObject(jsonObj);
          break;
        case "ColorField":
          ColorField.validateJsonObject(jsonObj);
          break;
        case "CountryField":
          CountryField.validateJsonObject(jsonObj);
          break;
        case "DateField":
          DateField.validateJsonObject(jsonObj);
          break;
        case "DecimalField":
          DecimalField.validateJsonObject(jsonObj);
          break;
        case "DurationField":
          DurationField.validateJsonObject(jsonObj);
          break;
        case "IntegerField":
          IntegerField.validateJsonObject(jsonObj);
          break;
        case "LanguageField":
          LanguageField.validateJsonObject(jsonObj);
          break;
        case "MemberField":
          MemberField.validateJsonObject(jsonObj);
          break;
        case "OptionChoiceField":
          OptionChoiceField.validateJsonObject(jsonObj);
          break;
        case "ProjectChoiceField":
          ProjectChoiceField.validateJsonObject(jsonObj);
          break;
        case "ReferenceField":
          ReferenceField.validateJsonObject(jsonObj);
          break;
        case "RepositoryChoiceField":
          RepositoryChoiceField.validateJsonObject(jsonObj);
          break;
        case "ReviewMemberReferenceField":
          ReviewMemberReferenceField.validateJsonObject(jsonObj);
          break;
        case "TableField":
          TableField.validateJsonObject(jsonObj);
          break;
        case "TextField":
          TextField.validateJsonObject(jsonObj);
          break;
        case "TrackerChoiceField":
          TrackerChoiceField.validateJsonObject(jsonObj);
          break;
        case "TrackerItemChoiceField":
          TrackerItemChoiceField.validateJsonObject(jsonObj);
          break;
        case "UrlField":
          UrlField.validateJsonObject(jsonObj);
          break;
        case "UserChoiceField":
          UserChoiceField.validateJsonObject(jsonObj);
          break;
        case "WikiTextField":
          WikiTextField.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of AbstractField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AbstractField
  * @throws IOException if the JSON string is invalid with respect to AbstractField
  */
  public static AbstractField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbstractField.class);
  }

 /**
  * Convert an instance of AbstractField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

