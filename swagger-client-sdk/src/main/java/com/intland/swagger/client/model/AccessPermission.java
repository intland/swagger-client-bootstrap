/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Access permission of specific role
 */
@ApiModel(description = "Access permission of specific role")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class AccessPermission {
  /**
   * Access level
   */
  @JsonAdapter(AccessLevelEnum.Adapter.class)
  public enum AccessLevelEnum {
    NONE("NONE"),
    
    READ("READ"),
    
    WRITE("WRITE");

    private String value;

    AccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessLevelEnum fromValue(String value) {
      for (AccessLevelEnum b : AccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_LEVEL = "accessLevel";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVEL)
  private AccessLevelEnum accessLevel;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private FieldReference field;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectReference project;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleReference role;

  public AccessPermission() { 
  }

  public AccessPermission accessLevel(AccessLevelEnum accessLevel) {
    
    this.accessLevel = accessLevel;
    return this;
  }

   /**
   * Access level
   * @return accessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Access level")

  public AccessLevelEnum getAccessLevel() {
    return accessLevel;
  }


  public void setAccessLevel(AccessLevelEnum accessLevel) {
    this.accessLevel = accessLevel;
  }


  public AccessPermission field(FieldReference field) {
    
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldReference getField() {
    return field;
  }


  public void setField(FieldReference field) {
    this.field = field;
  }


  public AccessPermission project(ProjectReference project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectReference getProject() {
    return project;
  }


  public void setProject(ProjectReference project) {
    this.project = project;
  }


  public AccessPermission role(RoleReference role) {
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RoleReference getRole() {
    return role;
  }


  public void setRole(RoleReference role) {
    this.role = role;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPermission accessPermission = (AccessPermission) o;
    return Objects.equals(this.accessLevel, accessPermission.accessLevel) &&
        Objects.equals(this.field, accessPermission.field) &&
        Objects.equals(this.project, accessPermission.project) &&
        Objects.equals(this.role, accessPermission.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLevel, field, project, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPermission {\n");
    sb.append("    accessLevel: ").append(toIndentedString(accessLevel)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessLevel");
    openapiFields.add("field");
    openapiFields.add("project");
    openapiFields.add("role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccessPermission
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AccessPermission.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessPermission is not found in the empty JSON string", AccessPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AccessPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessPermission` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accessLevel") != null && !jsonObj.get("accessLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessLevel").toString()));
      }
      // validate the optional field `field`
      if (jsonObj.getAsJsonObject("field") != null) {
        FieldReference.validateJsonObject(jsonObj.getAsJsonObject("field"));
      }
      // validate the optional field `project`
      if (jsonObj.getAsJsonObject("project") != null) {
        ProjectReference.validateJsonObject(jsonObj.getAsJsonObject("project"));
      }
      // validate the optional field `role`
      if (jsonObj.getAsJsonObject("role") != null) {
        RoleReference.validateJsonObject(jsonObj.getAsJsonObject("role"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessPermission>() {
           @Override
           public void write(JsonWriter out, AccessPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessPermission read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessPermission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessPermission
  * @throws IOException if the JSON string is invalid with respect to AccessPermission
  */
  public static AccessPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessPermission.class);
  }

 /**
  * Convert an instance of AccessPermission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

