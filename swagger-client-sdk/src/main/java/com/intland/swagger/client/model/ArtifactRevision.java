/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Model for a specific version of an artifact
 */
@ApiModel(description = "Model for a specific version of an artifact")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class ArtifactRevision {
  public static final String SERIALIZED_NAME_CHANGE_SUMMARY = "changeSummary";
  @SerializedName(SERIALIZED_NAME_CHANGE_SUMMARY)
  private String changeSummary;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private UserReference modifiedBy;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ArtifactRevision() { 
  }

  public ArtifactRevision changeSummary(String changeSummary) {
    
    this.changeSummary = changeSummary;
    return this;
  }

   /**
   * Summary of the change
   * @return changeSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Summary of the change")

  public String getChangeSummary() {
    return changeSummary;
  }


  public void setChangeSummary(String changeSummary) {
    this.changeSummary = changeSummary;
  }


  public ArtifactRevision id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the entity
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the entity")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ArtifactRevision modifiedAt(OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date when the entity was modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public ArtifactRevision modifiedBy(UserReference modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(UserReference modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ArtifactRevision version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of the artifact
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the artifact")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactRevision artifactRevision = (ArtifactRevision) o;
    return Objects.equals(this.changeSummary, artifactRevision.changeSummary) &&
        Objects.equals(this.id, artifactRevision.id) &&
        Objects.equals(this.modifiedAt, artifactRevision.modifiedAt) &&
        Objects.equals(this.modifiedBy, artifactRevision.modifiedBy) &&
        Objects.equals(this.version, artifactRevision.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeSummary, id, modifiedAt, modifiedBy, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactRevision {\n");
    sb.append("    changeSummary: ").append(toIndentedString(changeSummary)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeSummary");
    openapiFields.add("id");
    openapiFields.add("modifiedAt");
    openapiFields.add("modifiedBy");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArtifactRevision
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ArtifactRevision.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactRevision is not found in the empty JSON string", ArtifactRevision.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ArtifactRevision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactRevision` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("changeSummary") != null && !jsonObj.get("changeSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeSummary").toString()));
      }
      // validate the optional field `modifiedBy`
      if (jsonObj.getAsJsonObject("modifiedBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("modifiedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactRevision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactRevision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactRevision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactRevision.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactRevision>() {
           @Override
           public void write(JsonWriter out, ArtifactRevision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactRevision read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArtifactRevision given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArtifactRevision
  * @throws IOException if the JSON string is invalid with respect to ArtifactRevision
  */
  public static ArtifactRevision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactRevision.class);
  }

 /**
  * Convert an instance of ArtifactRevision to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

