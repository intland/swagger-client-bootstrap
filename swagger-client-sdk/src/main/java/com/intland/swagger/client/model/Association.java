/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Basic properties of a codebeamer association
 */
@ApiModel(description = "Basic properties of a codebeamer association")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class Association {
  public static final String SERIALIZED_NAME_BASELINE_ID = "baselineId";
  @SerializedName(SERIALIZED_NAME_BASELINE_ID)
  private Integer baselineId;

  public static final String SERIALIZED_NAME_BI_DIRECTIONAL_PROPAGATION = "biDirectionalPropagation";
  @SerializedName(SERIALIZED_NAME_BI_DIRECTIONAL_PROPAGATION)
  private Boolean biDirectionalPropagation;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserReference createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Description format of the entity
   */
  @JsonAdapter(DescriptionFormatEnum.Adapter.class)
  public enum DescriptionFormatEnum {
    PLAINTEXT("PlainText"),
    
    HTML("Html"),
    
    WIKI("Wiki");

    private String value;

    DescriptionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionFormatEnum fromValue(String value) {
      for (DescriptionFormatEnum b : DescriptionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DescriptionFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION_FORMAT = "descriptionFormat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FORMAT)
  private DescriptionFormatEnum descriptionFormat;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private AbstractReference from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPAGATING_DEPENDENCIES = "propagatingDependencies";
  @SerializedName(SERIALIZED_NAME_PROPAGATING_DEPENDENCIES)
  private Boolean propagatingDependencies;

  public static final String SERIALIZED_NAME_PROPAGATING_SUSPECTS = "propagatingSuspects";
  @SerializedName(SERIALIZED_NAME_PROPAGATING_SUSPECTS)
  private Boolean propagatingSuspects;

  public static final String SERIALIZED_NAME_REVERSE_PROPAGATION = "reversePropagation";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROPAGATION)
  private Boolean reversePropagation;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private AbstractReference to;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AssociationTypeReference type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Association() { 
  }

  public Association baselineId(Integer baselineId) {
    
    this.baselineId = baselineId;
    return this;
  }

   /**
   * Baseline ID
   * @return baselineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Baseline ID")

  public Integer getBaselineId() {
    return baselineId;
  }


  public void setBaselineId(Integer baselineId) {
    this.baselineId = baselineId;
  }


  public Association biDirectionalPropagation(Boolean biDirectionalPropagation) {
    
    this.biDirectionalPropagation = biDirectionalPropagation;
    return this;
  }

   /**
   * Bi-directional reference
   * @return biDirectionalPropagation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Bi-directional reference")

  public Boolean getBiDirectionalPropagation() {
    return biDirectionalPropagation;
  }


  public void setBiDirectionalPropagation(Boolean biDirectionalPropagation) {
    this.biDirectionalPropagation = biDirectionalPropagation;
  }


  public Association createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date when the entity was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Association createdBy(UserReference createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserReference createdBy) {
    this.createdBy = createdBy;
  }


  public Association description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Association descriptionFormat(DescriptionFormatEnum descriptionFormat) {
    
    this.descriptionFormat = descriptionFormat;
    return this;
  }

   /**
   * Description format of the entity
   * @return descriptionFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description format of the entity")

  public DescriptionFormatEnum getDescriptionFormat() {
    return descriptionFormat;
  }


  public void setDescriptionFormat(DescriptionFormatEnum descriptionFormat) {
    this.descriptionFormat = descriptionFormat;
  }


  public Association from(AbstractReference from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AbstractReference getFrom() {
    return from;
  }


  public void setFrom(AbstractReference from) {
    this.from = from;
  }


  public Association id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the entity
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the entity")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Association name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Association propagatingDependencies(Boolean propagatingDependencies) {
    
    this.propagatingDependencies = propagatingDependencies;
    return this;
  }

   /**
   * Propagating dependencies
   * @return propagatingDependencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Propagating dependencies")

  public Boolean getPropagatingDependencies() {
    return propagatingDependencies;
  }


  public void setPropagatingDependencies(Boolean propagatingDependencies) {
    this.propagatingDependencies = propagatingDependencies;
  }


  public Association propagatingSuspects(Boolean propagatingSuspects) {
    
    this.propagatingSuspects = propagatingSuspects;
    return this;
  }

   /**
   * Propagating suspects
   * @return propagatingSuspects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Propagating suspects")

  public Boolean getPropagatingSuspects() {
    return propagatingSuspects;
  }


  public void setPropagatingSuspects(Boolean propagatingSuspects) {
    this.propagatingSuspects = propagatingSuspects;
  }


  public Association reversePropagation(Boolean reversePropagation) {
    
    this.reversePropagation = reversePropagation;
    return this;
  }

   /**
   * Reverse propagation
   * @return reversePropagation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Reverse propagation")

  public Boolean getReversePropagation() {
    return reversePropagation;
  }


  public void setReversePropagation(Boolean reversePropagation) {
    this.reversePropagation = reversePropagation;
  }


  public Association to(AbstractReference to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractReference getTo() {
    return to;
  }


  public void setTo(AbstractReference to) {
    this.to = to;
  }


  public Association type(AssociationTypeReference type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AssociationTypeReference getType() {
    return type;
  }


  public void setType(AssociationTypeReference type) {
    this.type = type;
  }


  public Association url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Association to url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Association to url")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Association association = (Association) o;
    return Objects.equals(this.baselineId, association.baselineId) &&
        Objects.equals(this.biDirectionalPropagation, association.biDirectionalPropagation) &&
        Objects.equals(this.createdAt, association.createdAt) &&
        Objects.equals(this.createdBy, association.createdBy) &&
        Objects.equals(this.description, association.description) &&
        Objects.equals(this.descriptionFormat, association.descriptionFormat) &&
        Objects.equals(this.from, association.from) &&
        Objects.equals(this.id, association.id) &&
        Objects.equals(this.name, association.name) &&
        Objects.equals(this.propagatingDependencies, association.propagatingDependencies) &&
        Objects.equals(this.propagatingSuspects, association.propagatingSuspects) &&
        Objects.equals(this.reversePropagation, association.reversePropagation) &&
        Objects.equals(this.to, association.to) &&
        Objects.equals(this.type, association.type) &&
        Objects.equals(this.url, association.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselineId, biDirectionalPropagation, createdAt, createdBy, description, descriptionFormat, from, id, name, propagatingDependencies, propagatingSuspects, reversePropagation, to, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Association {\n");
    sb.append("    baselineId: ").append(toIndentedString(baselineId)).append("\n");
    sb.append("    biDirectionalPropagation: ").append(toIndentedString(biDirectionalPropagation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionFormat: ").append(toIndentedString(descriptionFormat)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propagatingDependencies: ").append(toIndentedString(propagatingDependencies)).append("\n");
    sb.append("    propagatingSuspects: ").append(toIndentedString(propagatingSuspects)).append("\n");
    sb.append("    reversePropagation: ").append(toIndentedString(reversePropagation)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baselineId");
    openapiFields.add("biDirectionalPropagation");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("description");
    openapiFields.add("descriptionFormat");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("propagatingDependencies");
    openapiFields.add("propagatingSuspects");
    openapiFields.add("reversePropagation");
    openapiFields.add("to");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Association
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Association.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Association is not found in the empty JSON string", Association.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Association.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Association` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Association.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `createdBy`
      if (jsonObj.getAsJsonObject("createdBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("createdBy"));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("descriptionFormat") != null && !jsonObj.get("descriptionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionFormat").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.getAsJsonObject("from") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("from"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.getAsJsonObject("to") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("to"));
      }
      // validate the optional field `type`
      if (jsonObj.getAsJsonObject("type") != null) {
        AssociationTypeReference.validateJsonObject(jsonObj.getAsJsonObject("type"));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Association.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Association' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Association> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Association.class));

       return (TypeAdapter<T>) new TypeAdapter<Association>() {
           @Override
           public void write(JsonWriter out, Association value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Association read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Association given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Association
  * @throws IOException if the JSON string is invalid with respect to Association
  */
  public static Association fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Association.class);
  }

 /**
  * Convert an instance of Association to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

