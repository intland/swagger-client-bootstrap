/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Request for migrating attachments
 */
@ApiModel(description = "Request for migrating attachments")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class AttachmentMigrationRequest {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserReference createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Description format of the entity
   */
  @JsonAdapter(DescriptionFormatEnum.Adapter.class)
  public enum DescriptionFormatEnum {
    PLAINTEXT("PlainText"),
    
    HTML("Html"),
    
    WIKI("Wiki");

    private String value;

    DescriptionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionFormatEnum fromValue(String value) {
      for (DescriptionFormatEnum b : DescriptionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DescriptionFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION_FORMAT = "descriptionFormat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FORMAT)
  private DescriptionFormatEnum descriptionFormat;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<RemoteMigrationFile> files = null;

  /**
   * Type of action made on the source files.
   */
  @JsonAdapter(MigrationActionEnum.Adapter.class)
  public enum MigrationActionEnum {
    MOVE("MOVE"),
    
    COPY("COPY");

    private String value;

    MigrationActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationActionEnum fromValue(String value) {
      for (MigrationActionEnum b : MigrationActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_ACTION = "migrationAction";
  @SerializedName(SERIALIZED_NAME_MIGRATION_ACTION)
  private MigrationActionEnum migrationAction;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private UserReference modifiedBy;

  public static final String SERIALIZED_NAME_TARGET_ITEM = "targetItem";
  @SerializedName(SERIALIZED_NAME_TARGET_ITEM)
  private TrackerItemReference targetItem;

  public AttachmentMigrationRequest() { 
  }

  public AttachmentMigrationRequest createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date when the entity was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AttachmentMigrationRequest createdBy(UserReference createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserReference createdBy) {
    this.createdBy = createdBy;
  }


  public AttachmentMigrationRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AttachmentMigrationRequest descriptionFormat(DescriptionFormatEnum descriptionFormat) {
    
    this.descriptionFormat = descriptionFormat;
    return this;
  }

   /**
   * Description format of the entity
   * @return descriptionFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description format of the entity")

  public DescriptionFormatEnum getDescriptionFormat() {
    return descriptionFormat;
  }


  public void setDescriptionFormat(DescriptionFormatEnum descriptionFormat) {
    this.descriptionFormat = descriptionFormat;
  }


  public AttachmentMigrationRequest files(List<RemoteMigrationFile> files) {
    
    this.files = files;
    return this;
  }

  public AttachmentMigrationRequest addFilesItem(RemoteMigrationFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * List of files to migrate
   * @return files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files to migrate")

  public List<RemoteMigrationFile> getFiles() {
    return files;
  }


  public void setFiles(List<RemoteMigrationFile> files) {
    this.files = files;
  }


  public AttachmentMigrationRequest migrationAction(MigrationActionEnum migrationAction) {
    
    this.migrationAction = migrationAction;
    return this;
  }

   /**
   * Type of action made on the source files.
   * @return migrationAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of action made on the source files.")

  public MigrationActionEnum getMigrationAction() {
    return migrationAction;
  }


  public void setMigrationAction(MigrationActionEnum migrationAction) {
    this.migrationAction = migrationAction;
  }


  public AttachmentMigrationRequest modifiedAt(OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date when the entity was modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public AttachmentMigrationRequest modifiedBy(UserReference modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(UserReference modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public AttachmentMigrationRequest targetItem(TrackerItemReference targetItem) {
    
    this.targetItem = targetItem;
    return this;
  }

   /**
   * Get targetItem
   * @return targetItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItemReference getTargetItem() {
    return targetItem;
  }


  public void setTargetItem(TrackerItemReference targetItem) {
    this.targetItem = targetItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentMigrationRequest attachmentMigrationRequest = (AttachmentMigrationRequest) o;
    return Objects.equals(this.createdAt, attachmentMigrationRequest.createdAt) &&
        Objects.equals(this.createdBy, attachmentMigrationRequest.createdBy) &&
        Objects.equals(this.description, attachmentMigrationRequest.description) &&
        Objects.equals(this.descriptionFormat, attachmentMigrationRequest.descriptionFormat) &&
        Objects.equals(this.files, attachmentMigrationRequest.files) &&
        Objects.equals(this.migrationAction, attachmentMigrationRequest.migrationAction) &&
        Objects.equals(this.modifiedAt, attachmentMigrationRequest.modifiedAt) &&
        Objects.equals(this.modifiedBy, attachmentMigrationRequest.modifiedBy) &&
        Objects.equals(this.targetItem, attachmentMigrationRequest.targetItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, createdBy, description, descriptionFormat, files, migrationAction, modifiedAt, modifiedBy, targetItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentMigrationRequest {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionFormat: ").append(toIndentedString(descriptionFormat)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    migrationAction: ").append(toIndentedString(migrationAction)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    targetItem: ").append(toIndentedString(targetItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("description");
    openapiFields.add("descriptionFormat");
    openapiFields.add("files");
    openapiFields.add("migrationAction");
    openapiFields.add("modifiedAt");
    openapiFields.add("modifiedBy");
    openapiFields.add("targetItem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttachmentMigrationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AttachmentMigrationRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachmentMigrationRequest is not found in the empty JSON string", AttachmentMigrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AttachmentMigrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachmentMigrationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `createdBy`
      if (jsonObj.getAsJsonObject("createdBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("createdBy"));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("descriptionFormat") != null && !jsonObj.get("descriptionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionFormat").toString()));
      }
      JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
      if (jsonArrayfiles != null) {
        // ensure the json data is an array
        if (!jsonObj.get("files").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
        }

        // validate the optional field `files` (array)
        for (int i = 0; i < jsonArrayfiles.size(); i++) {
          RemoteMigrationFile.validateJsonObject(jsonArrayfiles.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("migrationAction") != null && !jsonObj.get("migrationAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationAction").toString()));
      }
      // validate the optional field `modifiedBy`
      if (jsonObj.getAsJsonObject("modifiedBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("modifiedBy"));
      }
      // validate the optional field `targetItem`
      if (jsonObj.getAsJsonObject("targetItem") != null) {
        TrackerItemReference.validateJsonObject(jsonObj.getAsJsonObject("targetItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachmentMigrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachmentMigrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachmentMigrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachmentMigrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachmentMigrationRequest>() {
           @Override
           public void write(JsonWriter out, AttachmentMigrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachmentMigrationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttachmentMigrationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttachmentMigrationRequest
  * @throws IOException if the JSON string is invalid with respect to AttachmentMigrationRequest
  */
  public static AttachmentMigrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachmentMigrationRequest.class);
  }

 /**
  * Convert an instance of AttachmentMigrationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

