/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Specifies which Test Cases are checked for duplicate Steps
 */
@ApiModel(description = "Specifies which Test Cases are checked for duplicate Steps")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class AutoApplyTestStepReuses {
  public static final String SERIALIZED_NAME_SCAN_TEST_CASE_LIBRARIES = "scanTestCaseLibraries";
  @SerializedName(SERIALIZED_NAME_SCAN_TEST_CASE_LIBRARIES)
  private Boolean scanTestCaseLibraries;

  public static final String SERIALIZED_NAME_TEST_CASES = "testCases";
  @SerializedName(SERIALIZED_NAME_TEST_CASES)
  private List<TrackerItemReference> testCases = null;

  public AutoApplyTestStepReuses() { 
  }

  public AutoApplyTestStepReuses scanTestCaseLibraries(Boolean scanTestCaseLibraries) {
    
    this.scanTestCaseLibraries = scanTestCaseLibraries;
    return this;
  }

   /**
   * If it scans/finds the duplicate Steps in Test Case libraries of the user? Note: that only Reusable Steps will be reused from these libraries!
   * @return scanTestCaseLibraries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If it scans/finds the duplicate Steps in Test Case libraries of the user? Note: that only Reusable Steps will be reused from these libraries!")

  public Boolean getScanTestCaseLibraries() {
    return scanTestCaseLibraries;
  }


  public void setScanTestCaseLibraries(Boolean scanTestCaseLibraries) {
    this.scanTestCaseLibraries = scanTestCaseLibraries;
  }


  public AutoApplyTestStepReuses testCases(List<TrackerItemReference> testCases) {
    
    this.testCases = testCases;
    return this;
  }

  public AutoApplyTestStepReuses addTestCasesItem(TrackerItemReference testCasesItem) {
    if (this.testCases == null) {
      this.testCases = new ArrayList<>();
    }
    this.testCases.add(testCasesItem);
    return this;
  }

   /**
   * The Test Cases to find the duplicated steps inside: if these Test Cases has duplicated Steps these will be converted to Step-Reuses.
   * @return testCases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Test Cases to find the duplicated steps inside: if these Test Cases has duplicated Steps these will be converted to Step-Reuses.")

  public List<TrackerItemReference> getTestCases() {
    return testCases;
  }


  public void setTestCases(List<TrackerItemReference> testCases) {
    this.testCases = testCases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoApplyTestStepReuses autoApplyTestStepReuses = (AutoApplyTestStepReuses) o;
    return Objects.equals(this.scanTestCaseLibraries, autoApplyTestStepReuses.scanTestCaseLibraries) &&
        Objects.equals(this.testCases, autoApplyTestStepReuses.testCases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scanTestCaseLibraries, testCases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoApplyTestStepReuses {\n");
    sb.append("    scanTestCaseLibraries: ").append(toIndentedString(scanTestCaseLibraries)).append("\n");
    sb.append("    testCases: ").append(toIndentedString(testCases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scanTestCaseLibraries");
    openapiFields.add("testCases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutoApplyTestStepReuses
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AutoApplyTestStepReuses.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoApplyTestStepReuses is not found in the empty JSON string", AutoApplyTestStepReuses.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutoApplyTestStepReuses.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoApplyTestStepReuses` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraytestCases = jsonObj.getAsJsonArray("testCases");
      if (jsonArraytestCases != null) {
        // ensure the json data is an array
        if (!jsonObj.get("testCases").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `testCases` to be an array in the JSON string but got `%s`", jsonObj.get("testCases").toString()));
        }

        // validate the optional field `testCases` (array)
        for (int i = 0; i < jsonArraytestCases.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraytestCases.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoApplyTestStepReuses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoApplyTestStepReuses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoApplyTestStepReuses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoApplyTestStepReuses.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoApplyTestStepReuses>() {
           @Override
           public void write(JsonWriter out, AutoApplyTestStepReuses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoApplyTestStepReuses read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutoApplyTestStepReuses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutoApplyTestStepReuses
  * @throws IOException if the JSON string is invalid with respect to AutoApplyTestStepReuses
  */
  public static AutoApplyTestStepReuses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoApplyTestStepReuses.class);
  }

 /**
  * Convert an instance of AutoApplyTestStepReuses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

