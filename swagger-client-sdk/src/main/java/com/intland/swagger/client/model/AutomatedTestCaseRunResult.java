/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Request model to create a test run from test case
 */
@ApiModel(description = "Request model to create a test run from test case")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class AutomatedTestCaseRunResult {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Result of the test case
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    PASSED("PASSED"),
    
    FAILED("FAILED"),
    
    BLOCKED("BLOCKED"),
    
    NOT_APPLICABLE("NOT_APPLICABLE");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_RUN_TIME = "runTime";
  @SerializedName(SERIALIZED_NAME_RUN_TIME)
  private Integer runTime;

  public AutomatedTestCaseRunResult() { 
  }

  public AutomatedTestCaseRunResult description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the Test Case
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the Test Case")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AutomatedTestCaseRunResult groupName(String groupName) {
    
    this.groupName = groupName;
    return this;
  }

   /**
   * Group name of the Test Case
   * @return groupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group name of the Test Case")

  public String getGroupName() {
    return groupName;
  }


  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public AutomatedTestCaseRunResult name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the Test Case
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Test Case")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AutomatedTestCaseRunResult result(ResultEnum result) {
    
    this.result = result;
    return this;
  }

   /**
   * Result of the test case
   * @return result
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Result of the test case")

  public ResultEnum getResult() {
    return result;
  }


  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public AutomatedTestCaseRunResult runTime(Integer runTime) {
    
    this.runTime = runTime;
    return this;
  }

   /**
   * Optional runtime in seconds
   * @return runTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional runtime in seconds")

  public Integer getRunTime() {
    return runTime;
  }


  public void setRunTime(Integer runTime) {
    this.runTime = runTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomatedTestCaseRunResult automatedTestCaseRunResult = (AutomatedTestCaseRunResult) o;
    return Objects.equals(this.description, automatedTestCaseRunResult.description) &&
        Objects.equals(this.groupName, automatedTestCaseRunResult.groupName) &&
        Objects.equals(this.name, automatedTestCaseRunResult.name) &&
        Objects.equals(this.result, automatedTestCaseRunResult.result) &&
        Objects.equals(this.runTime, automatedTestCaseRunResult.runTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, groupName, name, result, runTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomatedTestCaseRunResult {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    runTime: ").append(toIndentedString(runTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("groupName");
    openapiFields.add("name");
    openapiFields.add("result");
    openapiFields.add("runTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("result");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutomatedTestCaseRunResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AutomatedTestCaseRunResult.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomatedTestCaseRunResult is not found in the empty JSON string", AutomatedTestCaseRunResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutomatedTestCaseRunResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomatedTestCaseRunResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutomatedTestCaseRunResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("groupName") != null && !jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomatedTestCaseRunResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomatedTestCaseRunResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomatedTestCaseRunResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomatedTestCaseRunResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomatedTestCaseRunResult>() {
           @Override
           public void write(JsonWriter out, AutomatedTestCaseRunResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomatedTestCaseRunResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutomatedTestCaseRunResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutomatedTestCaseRunResult
  * @throws IOException if the JSON string is invalid with respect to AutomatedTestCaseRunResult
  */
  public static AutomatedTestCaseRunResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomatedTestCaseRunResult.class);
  }

 /**
  * Convert an instance of AutomatedTestCaseRunResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

