/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Request model to create a test run from test case runs
 */
@ApiModel(description = "Request model to create a test run from test case runs")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-13T13:51:27.016473+01:00[Europe/Budapest]")
public class AutomatedTestRunRequest {
  public static final String SERIALIZED_NAME_CREATE_NON_EXISTENT_TEST_CASES = "createNonExistentTestCases";
  @SerializedName(SERIALIZED_NAME_CREATE_NON_EXISTENT_TEST_CASES)
  private Boolean createNonExistentTestCases;

  public static final String SERIALIZED_NAME_TEST_CASE_TRACKER_ID = "testCaseTrackerId";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_TRACKER_ID)
  private Integer testCaseTrackerId;

  public static final String SERIALIZED_NAME_TEST_RESULTS = "testResults";
  @SerializedName(SERIALIZED_NAME_TEST_RESULTS)
  private List<AutomatedTestCaseRunResult> testResults = new ArrayList<AutomatedTestCaseRunResult>();

  public static final String SERIALIZED_NAME_TEST_RUN_MODEL = "testRunModel";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_MODEL)
  private TrackerItem testRunModel;


  public AutomatedTestRunRequest createNonExistentTestCases(Boolean createNonExistentTestCases) {
    
    this.createNonExistentTestCases = createNonExistentTestCases;
    return this;
  }

   /**
   * Flag to create new test cases from testResults if necessary
   * @return createNonExistentTestCases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag to create new test cases from testResults if necessary")

  public Boolean getCreateNonExistentTestCases() {
    return createNonExistentTestCases;
  }


  public void setCreateNonExistentTestCases(Boolean createNonExistentTestCases) {
    this.createNonExistentTestCases = createNonExistentTestCases;
  }


  public AutomatedTestRunRequest testCaseTrackerId(Integer testCaseTrackerId) {
    
    this.testCaseTrackerId = testCaseTrackerId;
    return this;
  }

   /**
   * ID of the Test Case tracker
   * @return testCaseTrackerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID of the Test Case tracker")

  public Integer getTestCaseTrackerId() {
    return testCaseTrackerId;
  }


  public void setTestCaseTrackerId(Integer testCaseTrackerId) {
    this.testCaseTrackerId = testCaseTrackerId;
  }


  public AutomatedTestRunRequest testResults(List<AutomatedTestCaseRunResult> testResults) {
    
    this.testResults = testResults;
    return this;
  }

  public AutomatedTestRunRequest addTestResultsItem(AutomatedTestCaseRunResult testResultsItem) {
    this.testResults.add(testResultsItem);
    return this;
  }

   /**
   * Test case results to include into the test run
   * @return testResults
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Test case results to include into the test run")

  public List<AutomatedTestCaseRunResult> getTestResults() {
    return testResults;
  }


  public void setTestResults(List<AutomatedTestCaseRunResult> testResults) {
    this.testResults = testResults;
  }


  public AutomatedTestRunRequest testRunModel(TrackerItem testRunModel) {
    
    this.testRunModel = testRunModel;
    return this;
  }

   /**
   * Get testRunModel
   * @return testRunModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItem getTestRunModel() {
    return testRunModel;
  }


  public void setTestRunModel(TrackerItem testRunModel) {
    this.testRunModel = testRunModel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomatedTestRunRequest automatedTestRunRequest = (AutomatedTestRunRequest) o;
    return Objects.equals(this.createNonExistentTestCases, automatedTestRunRequest.createNonExistentTestCases) &&
        Objects.equals(this.testCaseTrackerId, automatedTestRunRequest.testCaseTrackerId) &&
        Objects.equals(this.testResults, automatedTestRunRequest.testResults) &&
        Objects.equals(this.testRunModel, automatedTestRunRequest.testRunModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createNonExistentTestCases, testCaseTrackerId, testResults, testRunModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomatedTestRunRequest {\n");
    sb.append("    createNonExistentTestCases: ").append(toIndentedString(createNonExistentTestCases)).append("\n");
    sb.append("    testCaseTrackerId: ").append(toIndentedString(testCaseTrackerId)).append("\n");
    sb.append("    testResults: ").append(toIndentedString(testResults)).append("\n");
    sb.append("    testRunModel: ").append(toIndentedString(testRunModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

