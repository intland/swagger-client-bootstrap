/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Information about a background job
 */
@ApiModel(description = "Information about a background job")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class BackgroundJob {
  /**
   * Status of a background job
   */
  @JsonAdapter(BackgroundJobStatusEnum.Adapter.class)
  public enum BackgroundJobStatusEnum {
    DRAFT("DRAFT"),
    
    NEW("NEW"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    FINISHED("FINISHED");

    private String value;

    BackgroundJobStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackgroundJobStatusEnum fromValue(String value) {
      for (BackgroundJobStatusEnum b : BackgroundJobStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackgroundJobStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackgroundJobStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackgroundJobStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackgroundJobStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKGROUND_JOB_STATUS = "backgroundJobStatus";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_JOB_STATUS)
  private BackgroundJobStatusEnum backgroundJobStatus;

  /**
   * Type of a background job
   */
  @JsonAdapter(BackgroundJobTypeEnum.Adapter.class)
  public enum BackgroundJobTypeEnum {
    RUN_IN_EXCEL("RUN_IN_EXCEL"),
    
    MASS_TEST_SET_RUN_CREATION("MASS_TEST_SET_RUN_CREATION"),
    
    DEPENDENCY_FINDER("DEPENDENCY_FINDER"),
    
    ITEM_EXCEL_IMPORT("ITEM_EXCEL_IMPORT"),
    
    DEPLOYMENT_EXPORT("DEPLOYMENT_EXPORT"),
    
    WORKING_SET_UPDATE("WORKING_SET_UPDATE");

    private String value;

    BackgroundJobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackgroundJobTypeEnum fromValue(String value) {
      for (BackgroundJobTypeEnum b : BackgroundJobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackgroundJobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackgroundJobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackgroundJobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackgroundJobTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKGROUND_JOB_TYPE = "backgroundJobType";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_JOB_TYPE)
  private BackgroundJobTypeEnum backgroundJobType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_STATUS_INFO = "statusInfo";
  @SerializedName(SERIALIZED_NAME_STATUS_INFO)
  private AbstractBackgroundJobStatusInfo statusInfo;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<BackgroundJobStep> steps = null;

  public static final String SERIALIZED_NAME_SUBMITTED_BY = "submittedBy";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BY)
  private UserReference submittedBy;

  public BackgroundJob() { 
  }

  public BackgroundJob backgroundJobStatus(BackgroundJobStatusEnum backgroundJobStatus) {
    
    this.backgroundJobStatus = backgroundJobStatus;
    return this;
  }

   /**
   * Status of a background job
   * @return backgroundJobStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of a background job")

  public BackgroundJobStatusEnum getBackgroundJobStatus() {
    return backgroundJobStatus;
  }


  public void setBackgroundJobStatus(BackgroundJobStatusEnum backgroundJobStatus) {
    this.backgroundJobStatus = backgroundJobStatus;
  }


  public BackgroundJob backgroundJobType(BackgroundJobTypeEnum backgroundJobType) {
    
    this.backgroundJobType = backgroundJobType;
    return this;
  }

   /**
   * Type of a background job
   * @return backgroundJobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of a background job")

  public BackgroundJobTypeEnum getBackgroundJobType() {
    return backgroundJobType;
  }


  public void setBackgroundJobType(BackgroundJobTypeEnum backgroundJobType) {
    this.backgroundJobType = backgroundJobType;
  }


  public BackgroundJob createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation time of job
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creation time of job")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BackgroundJob description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of job
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of job")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public BackgroundJob finishedAt(OffsetDateTime finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Completion time of job
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Completion time of job")

  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }


  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public BackgroundJob id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of job
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of job")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public BackgroundJob statusInfo(AbstractBackgroundJobStatusInfo statusInfo) {
    
    this.statusInfo = statusInfo;
    return this;
  }

   /**
   * Get statusInfo
   * @return statusInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractBackgroundJobStatusInfo getStatusInfo() {
    return statusInfo;
  }


  public void setStatusInfo(AbstractBackgroundJobStatusInfo statusInfo) {
    this.statusInfo = statusInfo;
  }


  public BackgroundJob steps(List<BackgroundJobStep> steps) {
    
    this.steps = steps;
    return this;
  }

  public BackgroundJob addStepsItem(BackgroundJobStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Sub-steps of a job
   * @return steps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub-steps of a job")

  public List<BackgroundJobStep> getSteps() {
    return steps;
  }


  public void setSteps(List<BackgroundJobStep> steps) {
    this.steps = steps;
  }


  public BackgroundJob submittedBy(UserReference submittedBy) {
    
    this.submittedBy = submittedBy;
    return this;
  }

   /**
   * Get submittedBy
   * @return submittedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getSubmittedBy() {
    return submittedBy;
  }


  public void setSubmittedBy(UserReference submittedBy) {
    this.submittedBy = submittedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundJob backgroundJob = (BackgroundJob) o;
    return Objects.equals(this.backgroundJobStatus, backgroundJob.backgroundJobStatus) &&
        Objects.equals(this.backgroundJobType, backgroundJob.backgroundJobType) &&
        Objects.equals(this.createdAt, backgroundJob.createdAt) &&
        Objects.equals(this.description, backgroundJob.description) &&
        Objects.equals(this.finishedAt, backgroundJob.finishedAt) &&
        Objects.equals(this.id, backgroundJob.id) &&
        Objects.equals(this.statusInfo, backgroundJob.statusInfo) &&
        Objects.equals(this.steps, backgroundJob.steps) &&
        Objects.equals(this.submittedBy, backgroundJob.submittedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundJobStatus, backgroundJobType, createdAt, description, finishedAt, id, statusInfo, steps, submittedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundJob {\n");
    sb.append("    backgroundJobStatus: ").append(toIndentedString(backgroundJobStatus)).append("\n");
    sb.append("    backgroundJobType: ").append(toIndentedString(backgroundJobType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    statusInfo: ").append(toIndentedString(statusInfo)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundJobStatus");
    openapiFields.add("backgroundJobType");
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("finishedAt");
    openapiFields.add("id");
    openapiFields.add("statusInfo");
    openapiFields.add("steps");
    openapiFields.add("submittedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BackgroundJob
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BackgroundJob.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackgroundJob is not found in the empty JSON string", BackgroundJob.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BackgroundJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackgroundJob` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("backgroundJobStatus") != null && !jsonObj.get("backgroundJobStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundJobStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundJobStatus").toString()));
      }
      if (jsonObj.get("backgroundJobType") != null && !jsonObj.get("backgroundJobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundJobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundJobType").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `statusInfo`
      if (jsonObj.getAsJsonObject("statusInfo") != null) {
        AbstractBackgroundJobStatusInfo.validateJsonObject(jsonObj.getAsJsonObject("statusInfo"));
      }
      JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
      if (jsonArraysteps != null) {
        // ensure the json data is an array
        if (!jsonObj.get("steps").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
        }

        // validate the optional field `steps` (array)
        for (int i = 0; i < jsonArraysteps.size(); i++) {
          BackgroundJobStep.validateJsonObject(jsonArraysteps.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `submittedBy`
      if (jsonObj.getAsJsonObject("submittedBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("submittedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackgroundJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackgroundJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackgroundJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackgroundJob.class));

       return (TypeAdapter<T>) new TypeAdapter<BackgroundJob>() {
           @Override
           public void write(JsonWriter out, BackgroundJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackgroundJob read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BackgroundJob given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BackgroundJob
  * @throws IOException if the JSON string is invalid with respect to BackgroundJob
  */
  public static BackgroundJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackgroundJob.class);
  }

 /**
  * Convert an instance of BackgroundJob to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

