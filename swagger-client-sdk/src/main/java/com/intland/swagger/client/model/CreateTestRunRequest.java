/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Request model to create a test run from multiple test cases or 1 test set
 */
@ApiModel(description = "Request model to create a test run from multiple test cases or 1 test set")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class CreateTestRunRequest {
  public static final String SERIALIZED_NAME_TEST_CASE_IDS = "testCaseIds";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_IDS)
  private List<TrackerItemReference> testCaseIds = null;

  public static final String SERIALIZED_NAME_TEST_CASE_REFS = "testCaseRefs";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_REFS)
  private List<TrackerItemReference> testCaseRefs = null;

  public static final String SERIALIZED_NAME_TEST_RUN_MODEL = "testRunModel";
  @SerializedName(SERIALIZED_NAME_TEST_RUN_MODEL)
  private TrackerItem testRunModel;

  public static final String SERIALIZED_NAME_TEST_SET_IDS = "testSetIds";
  @SerializedName(SERIALIZED_NAME_TEST_SET_IDS)
  private List<TrackerItemReference> testSetIds = null;

  public static final String SERIALIZED_NAME_TEST_SET_REFS = "testSetRefs";
  @SerializedName(SERIALIZED_NAME_TEST_SET_REFS)
  private List<TrackerItemReference> testSetRefs = null;

  public CreateTestRunRequest() { 
  }

  public CreateTestRunRequest testCaseIds(List<TrackerItemReference> testCaseIds) {
    
    this.testCaseIds = testCaseIds;
    return this;
  }

  public CreateTestRunRequest addTestCaseIdsItem(TrackerItemReference testCaseIdsItem) {
    if (this.testCaseIds == null) {
      this.testCaseIds = new ArrayList<>();
    }
    this.testCaseIds.add(testCaseIdsItem);
    return this;
  }

   /**
   * Get testCaseIds
   * @return testCaseIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TrackerItemReference> getTestCaseIds() {
    return testCaseIds;
  }


  public void setTestCaseIds(List<TrackerItemReference> testCaseIds) {
    this.testCaseIds = testCaseIds;
  }


  public CreateTestRunRequest testCaseRefs(List<TrackerItemReference> testCaseRefs) {
    
    this.testCaseRefs = testCaseRefs;
    return this;
  }

  public CreateTestRunRequest addTestCaseRefsItem(TrackerItemReference testCaseRefsItem) {
    if (this.testCaseRefs == null) {
      this.testCaseRefs = new ArrayList<>();
    }
    this.testCaseRefs.add(testCaseRefsItem);
    return this;
  }

   /**
   * Test case ids to include into the test run
   * @return testCaseRefs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Test case ids to include into the test run")

  public List<TrackerItemReference> getTestCaseRefs() {
    return testCaseRefs;
  }


  public void setTestCaseRefs(List<TrackerItemReference> testCaseRefs) {
    this.testCaseRefs = testCaseRefs;
  }


  public CreateTestRunRequest testRunModel(TrackerItem testRunModel) {
    
    this.testRunModel = testRunModel;
    return this;
  }

   /**
   * Get testRunModel
   * @return testRunModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItem getTestRunModel() {
    return testRunModel;
  }


  public void setTestRunModel(TrackerItem testRunModel) {
    this.testRunModel = testRunModel;
  }


  public CreateTestRunRequest testSetIds(List<TrackerItemReference> testSetIds) {
    
    this.testSetIds = testSetIds;
    return this;
  }

  public CreateTestRunRequest addTestSetIdsItem(TrackerItemReference testSetIdsItem) {
    if (this.testSetIds == null) {
      this.testSetIds = new ArrayList<>();
    }
    this.testSetIds.add(testSetIdsItem);
    return this;
  }

   /**
   * Get testSetIds
   * @return testSetIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TrackerItemReference> getTestSetIds() {
    return testSetIds;
  }


  public void setTestSetIds(List<TrackerItemReference> testSetIds) {
    this.testSetIds = testSetIds;
  }


  public CreateTestRunRequest testSetRefs(List<TrackerItemReference> testSetRefs) {
    
    this.testSetRefs = testSetRefs;
    return this;
  }

  public CreateTestRunRequest addTestSetRefsItem(TrackerItemReference testSetRefsItem) {
    if (this.testSetRefs == null) {
      this.testSetRefs = new ArrayList<>();
    }
    this.testSetRefs.add(testSetRefsItem);
    return this;
  }

   /**
   * Test set ids to include into the test run. Only the first test set will be considered.
   * @return testSetRefs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Test set ids to include into the test run. Only the first test set will be considered.")

  public List<TrackerItemReference> getTestSetRefs() {
    return testSetRefs;
  }


  public void setTestSetRefs(List<TrackerItemReference> testSetRefs) {
    this.testSetRefs = testSetRefs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTestRunRequest createTestRunRequest = (CreateTestRunRequest) o;
    return Objects.equals(this.testCaseIds, createTestRunRequest.testCaseIds) &&
        Objects.equals(this.testCaseRefs, createTestRunRequest.testCaseRefs) &&
        Objects.equals(this.testRunModel, createTestRunRequest.testRunModel) &&
        Objects.equals(this.testSetIds, createTestRunRequest.testSetIds) &&
        Objects.equals(this.testSetRefs, createTestRunRequest.testSetRefs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testCaseIds, testCaseRefs, testRunModel, testSetIds, testSetRefs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTestRunRequest {\n");
    sb.append("    testCaseIds: ").append(toIndentedString(testCaseIds)).append("\n");
    sb.append("    testCaseRefs: ").append(toIndentedString(testCaseRefs)).append("\n");
    sb.append("    testRunModel: ").append(toIndentedString(testRunModel)).append("\n");
    sb.append("    testSetIds: ").append(toIndentedString(testSetIds)).append("\n");
    sb.append("    testSetRefs: ").append(toIndentedString(testSetRefs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testCaseIds");
    openapiFields.add("testCaseRefs");
    openapiFields.add("testRunModel");
    openapiFields.add("testSetIds");
    openapiFields.add("testSetRefs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateTestRunRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreateTestRunRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTestRunRequest is not found in the empty JSON string", CreateTestRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateTestRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTestRunRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraytestCaseIds = jsonObj.getAsJsonArray("testCaseIds");
      if (jsonArraytestCaseIds != null) {
        // ensure the json data is an array
        if (!jsonObj.get("testCaseIds").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `testCaseIds` to be an array in the JSON string but got `%s`", jsonObj.get("testCaseIds").toString()));
        }

        // validate the optional field `testCaseIds` (array)
        for (int i = 0; i < jsonArraytestCaseIds.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraytestCaseIds.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraytestCaseRefs = jsonObj.getAsJsonArray("testCaseRefs");
      if (jsonArraytestCaseRefs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("testCaseRefs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `testCaseRefs` to be an array in the JSON string but got `%s`", jsonObj.get("testCaseRefs").toString()));
        }

        // validate the optional field `testCaseRefs` (array)
        for (int i = 0; i < jsonArraytestCaseRefs.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraytestCaseRefs.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `testRunModel`
      if (jsonObj.getAsJsonObject("testRunModel") != null) {
        TrackerItem.validateJsonObject(jsonObj.getAsJsonObject("testRunModel"));
      }
      JsonArray jsonArraytestSetIds = jsonObj.getAsJsonArray("testSetIds");
      if (jsonArraytestSetIds != null) {
        // ensure the json data is an array
        if (!jsonObj.get("testSetIds").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `testSetIds` to be an array in the JSON string but got `%s`", jsonObj.get("testSetIds").toString()));
        }

        // validate the optional field `testSetIds` (array)
        for (int i = 0; i < jsonArraytestSetIds.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraytestSetIds.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraytestSetRefs = jsonObj.getAsJsonArray("testSetRefs");
      if (jsonArraytestSetRefs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("testSetRefs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `testSetRefs` to be an array in the JSON string but got `%s`", jsonObj.get("testSetRefs").toString()));
        }

        // validate the optional field `testSetRefs` (array)
        for (int i = 0; i < jsonArraytestSetRefs.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraytestSetRefs.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTestRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTestRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTestRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTestRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTestRunRequest>() {
           @Override
           public void write(JsonWriter out, CreateTestRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTestRunRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateTestRunRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateTestRunRequest
  * @throws IOException if the JSON string is invalid with respect to CreateTestRunRequest
  */
  public static CreateTestRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTestRunRequest.class);
  }

 /**
  * Convert an instance of CreateTestRunRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

