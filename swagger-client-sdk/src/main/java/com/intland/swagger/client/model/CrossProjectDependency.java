/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Dependency information between two projects.
 */
@ApiModel(description = "Dependency information between two projects.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-13T14:02:21.403654+01:00[Europe/Budapest]")
public class CrossProjectDependency {
  public static final String SERIALIZED_NAME_REFERRED_FROM = "referredFrom";
  @SerializedName(SERIALIZED_NAME_REFERRED_FROM)
  private List<DependencyAttribute> referredFrom = null;

  public static final String SERIALIZED_NAME_SOURCE_PROJECT = "sourceProject";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROJECT)
  private ProjectReference sourceProject;

  public static final String SERIALIZED_NAME_TARGET_PROJECT = "targetProject";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT)
  private ProjectReference targetProject;


  public CrossProjectDependency referredFrom(List<DependencyAttribute> referredFrom) {
    
    this.referredFrom = referredFrom;
    return this;
  }

  public CrossProjectDependency addReferredFromItem(DependencyAttribute referredFromItem) {
    if (this.referredFrom == null) {
      this.referredFrom = new ArrayList<DependencyAttribute>();
    }
    this.referredFrom.add(referredFromItem);
    return this;
  }

   /**
   * Information on where references were found in source project.
   * @return referredFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information on where references were found in source project.")

  public List<DependencyAttribute> getReferredFrom() {
    return referredFrom;
  }


  public void setReferredFrom(List<DependencyAttribute> referredFrom) {
    this.referredFrom = referredFrom;
  }


  public CrossProjectDependency sourceProject(ProjectReference sourceProject) {
    
    this.sourceProject = sourceProject;
    return this;
  }

   /**
   * Get sourceProject
   * @return sourceProject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectReference getSourceProject() {
    return sourceProject;
  }


  public void setSourceProject(ProjectReference sourceProject) {
    this.sourceProject = sourceProject;
  }


  public CrossProjectDependency targetProject(ProjectReference targetProject) {
    
    this.targetProject = targetProject;
    return this;
  }

   /**
   * Get targetProject
   * @return targetProject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectReference getTargetProject() {
    return targetProject;
  }


  public void setTargetProject(ProjectReference targetProject) {
    this.targetProject = targetProject;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossProjectDependency crossProjectDependency = (CrossProjectDependency) o;
    return Objects.equals(this.referredFrom, crossProjectDependency.referredFrom) &&
        Objects.equals(this.sourceProject, crossProjectDependency.sourceProject) &&
        Objects.equals(this.targetProject, crossProjectDependency.targetProject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referredFrom, sourceProject, targetProject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossProjectDependency {\n");
    sb.append("    referredFrom: ").append(toIndentedString(referredFrom)).append("\n");
    sb.append("    sourceProject: ").append(toIndentedString(sourceProject)).append("\n");
    sb.append("    targetProject: ").append(toIndentedString(targetProject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

