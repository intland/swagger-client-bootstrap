/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Information on how and where references were found in source project.
 */
@ApiModel(description = "Information on how and where references were found in source project.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-13T14:02:21.403654+01:00[Europe/Budapest]")
public class DependencyAttribute {
  /**
   * Direction in which dependency finder discovered the reference.
   */
  @JsonAdapter(LookupDirectionEnum.Adapter.class)
  public enum LookupDirectionEnum {
    FORWARD("Forward"),
    
    BIDIRECTIONAL("Bidirectional");

    private String value;

    LookupDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LookupDirectionEnum fromValue(String value) {
      for (LookupDirectionEnum b : LookupDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LookupDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LookupDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LookupDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LookupDirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOOKUP_DIRECTION = "lookupDirection";
  @SerializedName(SERIALIZED_NAME_LOOKUP_DIRECTION)
  private LookupDirectionEnum lookupDirection;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private List<DependencyEntityReference> path = null;


  public DependencyAttribute lookupDirection(LookupDirectionEnum lookupDirection) {
    
    this.lookupDirection = lookupDirection;
    return this;
  }

   /**
   * Direction in which dependency finder discovered the reference.
   * @return lookupDirection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Direction in which dependency finder discovered the reference.")

  public LookupDirectionEnum getLookupDirection() {
    return lookupDirection;
  }


  public void setLookupDirection(LookupDirectionEnum lookupDirection) {
    this.lookupDirection = lookupDirection;
  }


  public DependencyAttribute path(List<DependencyEntityReference> path) {
    
    this.path = path;
    return this;
  }

  public DependencyAttribute addPathItem(DependencyEntityReference pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<DependencyEntityReference>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * Trace in source project model where the reference was found.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trace in source project model where the reference was found.")

  public List<DependencyEntityReference> getPath() {
    return path;
  }


  public void setPath(List<DependencyEntityReference> path) {
    this.path = path;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependencyAttribute dependencyAttribute = (DependencyAttribute) o;
    return Objects.equals(this.lookupDirection, dependencyAttribute.lookupDirection) &&
        Objects.equals(this.path, dependencyAttribute.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lookupDirection, path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependencyAttribute {\n");
    sb.append("    lookupDirection: ").append(toIndentedString(lookupDirection)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

