/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Project export settings for deployment
 */
@ApiModel(description = "Project export settings for deployment")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-13T14:02:21.403654+01:00[Europe/Budapest]")
public class DeploymentProjectExportSettings {
  public static final String SERIALIZED_NAME_INCLUDE_QUERIES = "includeQueries";
  @SerializedName(SERIALIZED_NAME_INCLUDE_QUERIES)
  private Boolean includeQueries;

  public static final String SERIALIZED_NAME_INCLUDE_TRACKER_ITEMS = "includeTrackerItems";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TRACKER_ITEMS)
  private Boolean includeTrackerItems;

  public static final String SERIALIZED_NAME_INCLUDE_TRACKERS = "includeTrackers";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TRACKERS)
  private Boolean includeTrackers;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_TRACKERS = "trackers";
  @SerializedName(SERIALIZED_NAME_TRACKERS)
  private List<DeploymentTrackerExportSettings> trackers = null;


  public DeploymentProjectExportSettings includeQueries(Boolean includeQueries) {
    
    this.includeQueries = includeQueries;
    return this;
  }

   /**
   * Flag if queries are included.
   * @return includeQueries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag if queries are included.")

  public Boolean getIncludeQueries() {
    return includeQueries;
  }


  public void setIncludeQueries(Boolean includeQueries) {
    this.includeQueries = includeQueries;
  }


  public DeploymentProjectExportSettings includeTrackerItems(Boolean includeTrackerItems) {
    
    this.includeTrackerItems = includeTrackerItems;
    return this;
  }

   /**
   * Flag if tracker items are included.
   * @return includeTrackerItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag if tracker items are included.")

  public Boolean getIncludeTrackerItems() {
    return includeTrackerItems;
  }


  public void setIncludeTrackerItems(Boolean includeTrackerItems) {
    this.includeTrackerItems = includeTrackerItems;
  }


  public DeploymentProjectExportSettings includeTrackers(Boolean includeTrackers) {
    
    this.includeTrackers = includeTrackers;
    return this;
  }

   /**
   * Flag if trackers are included.
   * @return includeTrackers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag if trackers are included.")

  public Boolean getIncludeTrackers() {
    return includeTrackers;
  }


  public void setIncludeTrackers(Boolean includeTrackers) {
    this.includeTrackers = includeTrackers;
  }


  public DeploymentProjectExportSettings projectId(Integer projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Project id
   * @return projectId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Project id")

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public DeploymentProjectExportSettings trackers(List<DeploymentTrackerExportSettings> trackers) {
    
    this.trackers = trackers;
    return this;
  }

  public DeploymentProjectExportSettings addTrackersItem(DeploymentTrackerExportSettings trackersItem) {
    if (this.trackers == null) {
      this.trackers = new ArrayList<DeploymentTrackerExportSettings>();
    }
    this.trackers.add(trackersItem);
    return this;
  }

   /**
   * Tracker export settings
   * @return trackers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracker export settings")

  public List<DeploymentTrackerExportSettings> getTrackers() {
    return trackers;
  }


  public void setTrackers(List<DeploymentTrackerExportSettings> trackers) {
    this.trackers = trackers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentProjectExportSettings deploymentProjectExportSettings = (DeploymentProjectExportSettings) o;
    return Objects.equals(this.includeQueries, deploymentProjectExportSettings.includeQueries) &&
        Objects.equals(this.includeTrackerItems, deploymentProjectExportSettings.includeTrackerItems) &&
        Objects.equals(this.includeTrackers, deploymentProjectExportSettings.includeTrackers) &&
        Objects.equals(this.projectId, deploymentProjectExportSettings.projectId) &&
        Objects.equals(this.trackers, deploymentProjectExportSettings.trackers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeQueries, includeTrackerItems, includeTrackers, projectId, trackers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentProjectExportSettings {\n");
    sb.append("    includeQueries: ").append(toIndentedString(includeQueries)).append("\n");
    sb.append("    includeTrackerItems: ").append(toIndentedString(includeTrackerItems)).append("\n");
    sb.append("    includeTrackers: ").append(toIndentedString(includeTrackers)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    trackers: ").append(toIndentedString(trackers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

