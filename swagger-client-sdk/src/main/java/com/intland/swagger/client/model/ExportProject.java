/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModelProperty;

/**
 * ExportProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class ExportProject {
  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SELECTED_TRACKER_IDS = "selectedTrackerIds";
  @SerializedName(SERIALIZED_NAME_SELECTED_TRACKER_IDS)
  private List<Integer> selectedTrackerIds = null;

  public static final String SERIALIZED_NAME_SKIP_ASSOCIATIONS = "skipAssociations";
  @SerializedName(SERIALIZED_NAME_SKIP_ASSOCIATIONS)
  private Boolean skipAssociations = false;

  public static final String SERIALIZED_NAME_SKIP_REPORTS = "skipReports";
  @SerializedName(SERIALIZED_NAME_SKIP_REPORTS)
  private Boolean skipReports = false;

  public static final String SERIALIZED_NAME_SKIP_TRACKER_ITEMS = "skipTrackerItems";
  @SerializedName(SERIALIZED_NAME_SKIP_TRACKER_ITEMS)
  private Boolean skipTrackerItems = false;

  public static final String SERIALIZED_NAME_SKIP_WIKI_PAGES = "skipWikiPages";
  @SerializedName(SERIALIZED_NAME_SKIP_WIKI_PAGES)
  private Boolean skipWikiPages = true;

  public ExportProject() { 
  }

  public ExportProject password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * A password that is used during the project encryption.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "007", value = "A password that is used during the project encryption.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public ExportProject selectedTrackerIds(List<Integer> selectedTrackerIds) {
    
    this.selectedTrackerIds = selectedTrackerIds;
    return this;
  }

  public ExportProject addSelectedTrackerIdsItem(Integer selectedTrackerIdsItem) {
    if (this.selectedTrackerIds == null) {
      this.selectedTrackerIds = new ArrayList<>();
    }
    this.selectedTrackerIds.add(selectedTrackerIdsItem);
    return this;
  }

   /**
   * If this list is not empty then only the Trackers listed here are exported.
   * @return selectedTrackerIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this list is not empty then only the Trackers listed here are exported.")

  public List<Integer> getSelectedTrackerIds() {
    return selectedTrackerIds;
  }


  public void setSelectedTrackerIds(List<Integer> selectedTrackerIds) {
    this.selectedTrackerIds = selectedTrackerIds;
  }


  public ExportProject skipAssociations(Boolean skipAssociations) {
    
    this.skipAssociations = skipAssociations;
    return this;
  }

   /**
   * If true, then the Associations are not exported
   * @return skipAssociations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, then the Associations are not exported")

  public Boolean getSkipAssociations() {
    return skipAssociations;
  }


  public void setSkipAssociations(Boolean skipAssociations) {
    this.skipAssociations = skipAssociations;
  }


  public ExportProject skipReports(Boolean skipReports) {
    
    this.skipReports = skipReports;
    return this;
  }

   /**
   * If true, then the Reports are not exported
   * @return skipReports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, then the Reports are not exported")

  public Boolean getSkipReports() {
    return skipReports;
  }


  public void setSkipReports(Boolean skipReports) {
    this.skipReports = skipReports;
  }


  public ExportProject skipTrackerItems(Boolean skipTrackerItems) {
    
    this.skipTrackerItems = skipTrackerItems;
    return this;
  }

   /**
   * If true, then the Tracker Items are not exported
   * @return skipTrackerItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, then the Tracker Items are not exported")

  public Boolean getSkipTrackerItems() {
    return skipTrackerItems;
  }


  public void setSkipTrackerItems(Boolean skipTrackerItems) {
    this.skipTrackerItems = skipTrackerItems;
  }


  public ExportProject skipWikiPages(Boolean skipWikiPages) {
    
    this.skipWikiPages = skipWikiPages;
    return this;
  }

   /**
   * If true, then the Wiki PAges are not exported
   * @return skipWikiPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, then the Wiki PAges are not exported")

  public Boolean getSkipWikiPages() {
    return skipWikiPages;
  }


  public void setSkipWikiPages(Boolean skipWikiPages) {
    this.skipWikiPages = skipWikiPages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportProject exportProject = (ExportProject) o;
    return Objects.equals(this.password, exportProject.password) &&
        Objects.equals(this.selectedTrackerIds, exportProject.selectedTrackerIds) &&
        Objects.equals(this.skipAssociations, exportProject.skipAssociations) &&
        Objects.equals(this.skipReports, exportProject.skipReports) &&
        Objects.equals(this.skipTrackerItems, exportProject.skipTrackerItems) &&
        Objects.equals(this.skipWikiPages, exportProject.skipWikiPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, selectedTrackerIds, skipAssociations, skipReports, skipTrackerItems, skipWikiPages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportProject {\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    selectedTrackerIds: ").append(toIndentedString(selectedTrackerIds)).append("\n");
    sb.append("    skipAssociations: ").append(toIndentedString(skipAssociations)).append("\n");
    sb.append("    skipReports: ").append(toIndentedString(skipReports)).append("\n");
    sb.append("    skipTrackerItems: ").append(toIndentedString(skipTrackerItems)).append("\n");
    sb.append("    skipWikiPages: ").append(toIndentedString(skipWikiPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("password");
    openapiFields.add("selectedTrackerIds");
    openapiFields.add("skipAssociations");
    openapiFields.add("skipReports");
    openapiFields.add("skipTrackerItems");
    openapiFields.add("skipWikiPages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportProject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ExportProject.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportProject is not found in the empty JSON string", ExportProject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExportProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportProject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("password") != null && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("selectedTrackerIds") != null && !jsonObj.get("selectedTrackerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedTrackerIds` to be an array in the JSON string but got `%s`", jsonObj.get("selectedTrackerIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportProject.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportProject>() {
           @Override
           public void write(JsonWriter out, ExportProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportProject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportProject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportProject
  * @throws IOException if the JSON string is invalid with respect to ExportProject
  */
  public static ExportProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportProject.class);
  }

 /**
  * Convert an instance of ExportProject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

