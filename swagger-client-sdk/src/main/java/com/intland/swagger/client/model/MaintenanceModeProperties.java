/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Extra properties for maintenance mode
 */
@ApiModel(description = "Extra properties for maintenance mode")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class MaintenanceModeProperties {
  public static final String SERIALIZED_NAME_LOGIN_ERROR_TEXT = "loginErrorText";
  @SerializedName(SERIALIZED_NAME_LOGIN_ERROR_TEXT)
  private String loginErrorText;

  public static final String SERIALIZED_NAME_LOGIN_TEXT = "loginText";
  @SerializedName(SERIALIZED_NAME_LOGIN_TEXT)
  private String loginText;

  public static final String SERIALIZED_NAME_NOTIFICATION_TEXT = "notificationText";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TEXT)
  private String notificationText;

  public static final String SERIALIZED_NAME_SLOGAN = "slogan";
  @SerializedName(SERIALIZED_NAME_SLOGAN)
  private String slogan;

  public static final String SERIALIZED_NAME_WELCOME_TEXT = "welcomeText";
  @SerializedName(SERIALIZED_NAME_WELCOME_TEXT)
  private String welcomeText;

  public MaintenanceModeProperties() { 
  }

  public MaintenanceModeProperties loginErrorText(String loginErrorText) {
    
    this.loginErrorText = loginErrorText;
    return this;
  }

   /**
   * Error text shown during login
   * @return loginErrorText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Error text shown during login")

  public String getLoginErrorText() {
    return loginErrorText;
  }


  public void setLoginErrorText(String loginErrorText) {
    this.loginErrorText = loginErrorText;
  }


  public MaintenanceModeProperties loginText(String loginText) {
    
    this.loginText = loginText;
    return this;
  }

   /**
   * Text shown on login screen
   * @return loginText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Text shown on login screen")

  public String getLoginText() {
    return loginText;
  }


  public void setLoginText(String loginText) {
    this.loginText = loginText;
  }


  public MaintenanceModeProperties notificationText(String notificationText) {
    
    this.notificationText = notificationText;
    return this;
  }

   /**
   * Notification text
   * @return notificationText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Notification text")

  public String getNotificationText() {
    return notificationText;
  }


  public void setNotificationText(String notificationText) {
    this.notificationText = notificationText;
  }


  public MaintenanceModeProperties slogan(String slogan) {
    
    this.slogan = slogan;
    return this;
  }

   /**
   * Slogan text
   * @return slogan
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Slogan text")

  public String getSlogan() {
    return slogan;
  }


  public void setSlogan(String slogan) {
    this.slogan = slogan;
  }


  public MaintenanceModeProperties welcomeText(String welcomeText) {
    
    this.welcomeText = welcomeText;
    return this;
  }

   /**
   * Welcome text
   * @return welcomeText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Welcome text")

  public String getWelcomeText() {
    return welcomeText;
  }


  public void setWelcomeText(String welcomeText) {
    this.welcomeText = welcomeText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceModeProperties maintenanceModeProperties = (MaintenanceModeProperties) o;
    return Objects.equals(this.loginErrorText, maintenanceModeProperties.loginErrorText) &&
        Objects.equals(this.loginText, maintenanceModeProperties.loginText) &&
        Objects.equals(this.notificationText, maintenanceModeProperties.notificationText) &&
        Objects.equals(this.slogan, maintenanceModeProperties.slogan) &&
        Objects.equals(this.welcomeText, maintenanceModeProperties.welcomeText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginErrorText, loginText, notificationText, slogan, welcomeText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceModeProperties {\n");
    sb.append("    loginErrorText: ").append(toIndentedString(loginErrorText)).append("\n");
    sb.append("    loginText: ").append(toIndentedString(loginText)).append("\n");
    sb.append("    notificationText: ").append(toIndentedString(notificationText)).append("\n");
    sb.append("    slogan: ").append(toIndentedString(slogan)).append("\n");
    sb.append("    welcomeText: ").append(toIndentedString(welcomeText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loginErrorText");
    openapiFields.add("loginText");
    openapiFields.add("notificationText");
    openapiFields.add("slogan");
    openapiFields.add("welcomeText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("loginErrorText");
    openapiRequiredFields.add("loginText");
    openapiRequiredFields.add("notificationText");
    openapiRequiredFields.add("slogan");
    openapiRequiredFields.add("welcomeText");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MaintenanceModeProperties
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MaintenanceModeProperties.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaintenanceModeProperties is not found in the empty JSON string", MaintenanceModeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MaintenanceModeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaintenanceModeProperties` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaintenanceModeProperties.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("loginErrorText") != null && !jsonObj.get("loginErrorText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginErrorText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginErrorText").toString()));
      }
      if (jsonObj.get("loginText") != null && !jsonObj.get("loginText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginText").toString()));
      }
      if (jsonObj.get("notificationText") != null && !jsonObj.get("notificationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationText").toString()));
      }
      if (jsonObj.get("slogan") != null && !jsonObj.get("slogan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slogan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slogan").toString()));
      }
      if (jsonObj.get("welcomeText") != null && !jsonObj.get("welcomeText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcomeText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcomeText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaintenanceModeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaintenanceModeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaintenanceModeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaintenanceModeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MaintenanceModeProperties>() {
           @Override
           public void write(JsonWriter out, MaintenanceModeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaintenanceModeProperties read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaintenanceModeProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaintenanceModeProperties
  * @throws IOException if the JSON string is invalid with respect to MaintenanceModeProperties
  */
  public static MaintenanceModeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaintenanceModeProperties.class);
  }

 /**
  * Convert an instance of MaintenanceModeProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

