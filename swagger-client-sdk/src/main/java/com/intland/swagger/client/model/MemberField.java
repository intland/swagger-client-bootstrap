/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Member field
 */
@ApiModel(description = "Member field")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class MemberField extends AbstractField {
  /**
   * Supported member type of a member field
   */
  @JsonAdapter(MemberTypesEnum.Adapter.class)
  public enum MemberTypesEnum {
    USER("USER"),
    
    ROLE("ROLE"),
    
    GROUP("GROUP");

    private String value;

    MemberTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemberTypesEnum fromValue(String value) {
      for (MemberTypesEnum b : MemberTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemberTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemberTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEMBER_TYPES = "memberTypes";
  @SerializedName(SERIALIZED_NAME_MEMBER_TYPES)
  private List<MemberTypesEnum> memberTypes = null;

  public static final String SERIALIZED_NAME_MULTIPLE_VALUES = "multipleValues";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_VALUES)
  private Boolean multipleValues;

  public MemberField() { 
    this.type = this.getClass().getSimpleName();
  }

  public MemberField memberTypes(List<MemberTypesEnum> memberTypes) {
    
    this.memberTypes = memberTypes;
    return this;
  }

  public MemberField addMemberTypesItem(MemberTypesEnum memberTypesItem) {
    if (this.memberTypes == null) {
      this.memberTypes = new ArrayList<>();
    }
    this.memberTypes.add(memberTypesItem);
    return this;
  }

   /**
   * Supported member type of a member field
   * @return memberTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Supported member type of a member field")

  public List<MemberTypesEnum> getMemberTypes() {
    return memberTypes;
  }


  public void setMemberTypes(List<MemberTypesEnum> memberTypes) {
    this.memberTypes = memberTypes;
  }


  public MemberField multipleValues(Boolean multipleValues) {
    
    this.multipleValues = multipleValues;
    return this;
  }

   /**
   * Multiple values state of a field
   * @return multipleValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multiple values state of a field")

  public Boolean getMultipleValues() {
    return multipleValues;
  }


  public void setMultipleValues(Boolean multipleValues) {
    this.multipleValues = multipleValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberField memberField = (MemberField) o;
    return Objects.equals(this.memberTypes, memberField.memberTypes) &&
        Objects.equals(this.multipleValues, memberField.multipleValues) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberTypes, multipleValues, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberField {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    memberTypes: ").append(toIndentedString(memberTypes)).append("\n");
    sb.append("    multipleValues: ").append(toIndentedString(multipleValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("formula");
    openapiFields.add("hidden");
    openapiFields.add("hideIfDependencyFormula");
    openapiFields.add("id");
    openapiFields.add("legacyRestName");
    openapiFields.add("mandatoryIfDependencyFormula");
    openapiFields.add("mandatoryInStatuses");
    openapiFields.add("name");
    openapiFields.add("sharedFields");
    openapiFields.add("title");
    openapiFields.add("trackerItemField");
    openapiFields.add("type");
    openapiFields.add("valueModel");
    openapiFields.add("memberTypes");
    openapiFields.add("multipleValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MemberField
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MemberField.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberField is not found in the empty JSON string", MemberField.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MemberField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberField` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberField.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberField>() {
           @Override
           public void write(JsonWriter out, MemberField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberField read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MemberField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MemberField
  * @throws IOException if the JSON string is invalid with respect to MemberField
  */
  public static MemberField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberField.class);
  }

 /**
  * Convert an instance of MemberField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

