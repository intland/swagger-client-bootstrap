/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.File;
import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModelProperty;

/**
 * PostComment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-13T12:30:20.007+01:00[Europe/Budapest]")
public class PostComment {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  /**
   * Format of a comment
   */
  @JsonAdapter(CommentFormatEnum.Adapter.class)
  public enum CommentFormatEnum {
    PLAINTEXT("PlainText"),
    
    HTML("Html"),
    
    WIKI("Wiki");

    private String value;

    CommentFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommentFormatEnum fromValue(String value) {
      for (CommentFormatEnum b : CommentFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommentFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommentFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommentFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommentFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMMENT_FORMAT = "commentFormat";
  @SerializedName(SERIALIZED_NAME_COMMENT_FORMAT)
  private CommentFormatEnum commentFormat = CommentFormatEnum.PLAINTEXT;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private File attachments;


  public PostComment comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Text of a comment
   * @return comment
  **/
  @ApiModelProperty(required = true, value = "Text of a comment")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public PostComment commentFormat(CommentFormatEnum commentFormat) {
    
    this.commentFormat = commentFormat;
    return this;
  }

   /**
   * Format of a comment
   * @return commentFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Format of a comment")

  public CommentFormatEnum getCommentFormat() {
    return commentFormat;
  }


  public void setCommentFormat(CommentFormatEnum commentFormat) {
    this.commentFormat = commentFormat;
  }


  public PostComment attachments(File attachments) {
    
    this.attachments = attachments;
    return this;
  }

   /**
   * Attachments of a comment
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attachments of a comment")

  public File getAttachments() {
    return attachments;
  }


  public void setAttachments(File attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostComment postComment = (PostComment) o;
    return Objects.equals(this.comment, postComment.comment) &&
        Objects.equals(this.commentFormat, postComment.commentFormat) &&
        Objects.equals(this.attachments, postComment.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, commentFormat, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostComment {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    commentFormat: ").append(toIndentedString(commentFormat)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

