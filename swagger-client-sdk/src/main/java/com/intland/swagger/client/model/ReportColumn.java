/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Column definition for a report
 */
@ApiModel(description = "Column definition for a report")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class ReportColumn {
  public static final String SERIALIZED_NAME_COLUMN_INDEX = "columnIndex";
  @SerializedName(SERIALIZED_NAME_COLUMN_INDEX)
  private Integer columnIndex;

  public static final String SERIALIZED_NAME_COLUMN_REF = "columnRef";
  @SerializedName(SERIALIZED_NAME_COLUMN_REF)
  private String columnRef;

  public static final String SERIALIZED_NAME_COLUMN_WIDTH_PERCENTAGE = "columnWidthPercentage";
  @SerializedName(SERIALIZED_NAME_COLUMN_WIDTH_PERCENTAGE)
  private Double columnWidthPercentage;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private FieldReference field;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ReportColumn() { 
  }

  public ReportColumn columnIndex(Integer columnIndex) {
    
    this.columnIndex = columnIndex;
    return this;
  }

   /**
   * Column position index in the report.
   * @return columnIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Column position index in the report.")

  public Integer getColumnIndex() {
    return columnIndex;
  }


  public void setColumnIndex(Integer columnIndex) {
    this.columnIndex = columnIndex;
  }


  public ReportColumn columnRef(String columnRef) {
    
    this.columnRef = columnRef;
    return this;
  }

   /**
   * Column reference
   * @return columnRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12-1", value = "Column reference")

  public String getColumnRef() {
    return columnRef;
  }


  public void setColumnRef(String columnRef) {
    this.columnRef = columnRef;
  }


  public ReportColumn columnWidthPercentage(Double columnWidthPercentage) {
    
    this.columnWidthPercentage = columnWidthPercentage;
    return this;
  }

   /**
   * Column width in percentage
   * @return columnWidthPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "16.533667", value = "Column width in percentage")

  public Double getColumnWidthPercentage() {
    return columnWidthPercentage;
  }


  public void setColumnWidthPercentage(Double columnWidthPercentage) {
    this.columnWidthPercentage = columnWidthPercentage;
  }


  public ReportColumn field(FieldReference field) {
    
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldReference getField() {
    return field;
  }


  public void setField(FieldReference field) {
    this.field = field;
  }


  public ReportColumn name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Column name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Status", value = "Column name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ReportColumn type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Column type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "choice", value = "Column type")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportColumn reportColumn = (ReportColumn) o;
    return Objects.equals(this.columnIndex, reportColumn.columnIndex) &&
        Objects.equals(this.columnRef, reportColumn.columnRef) &&
        Objects.equals(this.columnWidthPercentage, reportColumn.columnWidthPercentage) &&
        Objects.equals(this.field, reportColumn.field) &&
        Objects.equals(this.name, reportColumn.name) &&
        Objects.equals(this.type, reportColumn.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnIndex, columnRef, columnWidthPercentage, field, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportColumn {\n");
    sb.append("    columnIndex: ").append(toIndentedString(columnIndex)).append("\n");
    sb.append("    columnRef: ").append(toIndentedString(columnRef)).append("\n");
    sb.append("    columnWidthPercentage: ").append(toIndentedString(columnWidthPercentage)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnIndex");
    openapiFields.add("columnRef");
    openapiFields.add("columnWidthPercentage");
    openapiFields.add("field");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportColumn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportColumn.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportColumn is not found in the empty JSON string", ReportColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportColumn` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("columnRef") != null && !jsonObj.get("columnRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnRef").toString()));
      }
      // validate the optional field `field`
      if (jsonObj.getAsJsonObject("field") != null) {
        FieldReference.validateJsonObject(jsonObj.getAsJsonObject("field"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportColumn>() {
           @Override
           public void write(JsonWriter out, ReportColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportColumn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportColumn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportColumn
  * @throws IOException if the JSON string is invalid with respect to ReportColumn
  */
  public static ReportColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportColumn.class);
  }

 /**
  * Convert an instance of ReportColumn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

