/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Reference level settings for Intelligent Table View.
 */
@ApiModel(description = "Reference level settings for Intelligent Table View.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class ReportReferenceLevelSettings {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ReportColumnSettings> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNSTREAM_REFERENCE = "downstreamReference";
  @SerializedName(SERIALIZED_NAME_DOWNSTREAM_REFERENCE)
  private Boolean downstreamReference;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_REFERENCE_TRACKER_TYPES = "referenceTrackerTypes";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TRACKER_TYPES)
  private List<TrackerTypeReference> referenceTrackerTypes = null;

  public static final String SERIALIZED_NAME_REFERENCE_TRACKERS = "referenceTrackers";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TRACKERS)
  private List<TrackerReference> referenceTrackers = null;

  public static final String SERIALIZED_NAME_UPSTREAM_REFERENCE = "upstreamReference";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_REFERENCE)
  private Boolean upstreamReference;

  public ReportReferenceLevelSettings() { 
  }

  public ReportReferenceLevelSettings columns(List<ReportColumnSettings> columns) {
    
    this.columns = columns;
    return this;
  }

  public ReportReferenceLevelSettings addColumnsItem(ReportColumnSettings columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Columns to show on this reference level.
   * @return columns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Columns to show on this reference level.")

  public List<ReportColumnSettings> getColumns() {
    return columns;
  }


  public void setColumns(List<ReportColumnSettings> columns) {
    this.columns = columns;
  }


  public ReportReferenceLevelSettings downstreamReference(Boolean downstreamReference) {
    
    this.downstreamReference = downstreamReference;
    return this;
  }

   /**
   * Include downstream references indicator.
   * @return downstreamReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Include downstream references indicator.")

  public Boolean getDownstreamReference() {
    return downstreamReference;
  }


  public void setDownstreamReference(Boolean downstreamReference) {
    this.downstreamReference = downstreamReference;
  }


  public ReportReferenceLevelSettings level(Integer level) {
    
    this.level = level;
    return this;
  }

   /**
   * Level of the reference layer
   * minimum: 1
   * @return level
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Level of the reference layer")

  public Integer getLevel() {
    return level;
  }


  public void setLevel(Integer level) {
    this.level = level;
  }


  public ReportReferenceLevelSettings referenceTrackerTypes(List<TrackerTypeReference> referenceTrackerTypes) {
    
    this.referenceTrackerTypes = referenceTrackerTypes;
    return this;
  }

  public ReportReferenceLevelSettings addReferenceTrackerTypesItem(TrackerTypeReference referenceTrackerTypesItem) {
    if (this.referenceTrackerTypes == null) {
      this.referenceTrackerTypes = new ArrayList<>();
    }
    this.referenceTrackerTypes.add(referenceTrackerTypesItem);
    return this;
  }

   /**
   * Tracker types to include on this level.
   * @return referenceTrackerTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracker types to include on this level.")

  public List<TrackerTypeReference> getReferenceTrackerTypes() {
    return referenceTrackerTypes;
  }


  public void setReferenceTrackerTypes(List<TrackerTypeReference> referenceTrackerTypes) {
    this.referenceTrackerTypes = referenceTrackerTypes;
  }


  public ReportReferenceLevelSettings referenceTrackers(List<TrackerReference> referenceTrackers) {
    
    this.referenceTrackers = referenceTrackers;
    return this;
  }

  public ReportReferenceLevelSettings addReferenceTrackersItem(TrackerReference referenceTrackersItem) {
    if (this.referenceTrackers == null) {
      this.referenceTrackers = new ArrayList<>();
    }
    this.referenceTrackers.add(referenceTrackersItem);
    return this;
  }

   /**
   * Trackers to include on this level.
   * @return referenceTrackers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trackers to include on this level.")

  public List<TrackerReference> getReferenceTrackers() {
    return referenceTrackers;
  }


  public void setReferenceTrackers(List<TrackerReference> referenceTrackers) {
    this.referenceTrackers = referenceTrackers;
  }


  public ReportReferenceLevelSettings upstreamReference(Boolean upstreamReference) {
    
    this.upstreamReference = upstreamReference;
    return this;
  }

   /**
   * Include upstream references indicator.
   * @return upstreamReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Include upstream references indicator.")

  public Boolean getUpstreamReference() {
    return upstreamReference;
  }


  public void setUpstreamReference(Boolean upstreamReference) {
    this.upstreamReference = upstreamReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportReferenceLevelSettings reportReferenceLevelSettings = (ReportReferenceLevelSettings) o;
    return Objects.equals(this.columns, reportReferenceLevelSettings.columns) &&
        Objects.equals(this.downstreamReference, reportReferenceLevelSettings.downstreamReference) &&
        Objects.equals(this.level, reportReferenceLevelSettings.level) &&
        Objects.equals(this.referenceTrackerTypes, reportReferenceLevelSettings.referenceTrackerTypes) &&
        Objects.equals(this.referenceTrackers, reportReferenceLevelSettings.referenceTrackers) &&
        Objects.equals(this.upstreamReference, reportReferenceLevelSettings.upstreamReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, downstreamReference, level, referenceTrackerTypes, referenceTrackers, upstreamReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportReferenceLevelSettings {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    downstreamReference: ").append(toIndentedString(downstreamReference)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    referenceTrackerTypes: ").append(toIndentedString(referenceTrackerTypes)).append("\n");
    sb.append("    referenceTrackers: ").append(toIndentedString(referenceTrackers)).append("\n");
    sb.append("    upstreamReference: ").append(toIndentedString(upstreamReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("downstreamReference");
    openapiFields.add("level");
    openapiFields.add("referenceTrackerTypes");
    openapiFields.add("referenceTrackers");
    openapiFields.add("upstreamReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("downstreamReference");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("upstreamReference");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportReferenceLevelSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportReferenceLevelSettings.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportReferenceLevelSettings is not found in the empty JSON string", ReportReferenceLevelSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportReferenceLevelSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportReferenceLevelSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportReferenceLevelSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
      if (jsonArraycolumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
        }

        // validate the optional field `columns` (array)
        for (int i = 0; i < jsonArraycolumns.size(); i++) {
          ReportColumnSettings.validateJsonObject(jsonArraycolumns.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayreferenceTrackerTypes = jsonObj.getAsJsonArray("referenceTrackerTypes");
      if (jsonArrayreferenceTrackerTypes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("referenceTrackerTypes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `referenceTrackerTypes` to be an array in the JSON string but got `%s`", jsonObj.get("referenceTrackerTypes").toString()));
        }

        // validate the optional field `referenceTrackerTypes` (array)
        for (int i = 0; i < jsonArrayreferenceTrackerTypes.size(); i++) {
          TrackerTypeReference.validateJsonObject(jsonArrayreferenceTrackerTypes.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayreferenceTrackers = jsonObj.getAsJsonArray("referenceTrackers");
      if (jsonArrayreferenceTrackers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("referenceTrackers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `referenceTrackers` to be an array in the JSON string but got `%s`", jsonObj.get("referenceTrackers").toString()));
        }

        // validate the optional field `referenceTrackers` (array)
        for (int i = 0; i < jsonArrayreferenceTrackers.size(); i++) {
          TrackerReference.validateJsonObject(jsonArrayreferenceTrackers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportReferenceLevelSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportReferenceLevelSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportReferenceLevelSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportReferenceLevelSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportReferenceLevelSettings>() {
           @Override
           public void write(JsonWriter out, ReportReferenceLevelSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportReferenceLevelSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportReferenceLevelSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportReferenceLevelSettings
  * @throws IOException if the JSON string is invalid with respect to ReportReferenceLevelSettings
  */
  public static ReportReferenceLevelSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportReferenceLevelSettings.class);
  }

 /**
  * Convert an instance of ReportReferenceLevelSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

