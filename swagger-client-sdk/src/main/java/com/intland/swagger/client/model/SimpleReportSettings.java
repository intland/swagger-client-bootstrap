/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Settings for a simple report.
 */
@ApiModel(description = "Settings for a simple report.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class SimpleReportSettings {
  public static final String SERIALIZED_NAME_ADDED_PERMISSIONS = "addedPermissions";
  @SerializedName(SERIALIZED_NAME_ADDED_PERMISSIONS)
  private List<ReportPermission> addedPermissions = null;

  public static final String SERIALIZED_NAME_CB_QL = "cbQl";
  @SerializedName(SERIALIZED_NAME_CB_QL)
  private String cbQl;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ResizableReportColumnSettings> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private Integer reportId;

  public static final String SERIALIZED_NAME_SHOW_ALL_CHILDREN = "showAllChildren";
  @SerializedName(SERIALIZED_NAME_SHOW_ALL_CHILDREN)
  private Boolean showAllChildren;

  public static final String SERIALIZED_NAME_SHOW_ANCESTORS = "showAncestors";
  @SerializedName(SERIALIZED_NAME_SHOW_ANCESTORS)
  private Boolean showAncestors;

  public static final String SERIALIZED_NAME_SHOW_DESCENDANTS = "showDescendants";
  @SerializedName(SERIALIZED_NAME_SHOW_DESCENDANTS)
  private Boolean showDescendants;

  public SimpleReportSettings() { 
  }

  public SimpleReportSettings addedPermissions(List<ReportPermission> addedPermissions) {
    
    this.addedPermissions = addedPermissions;
    return this;
  }

  public SimpleReportSettings addAddedPermissionsItem(ReportPermission addedPermissionsItem) {
    if (this.addedPermissions == null) {
      this.addedPermissions = new ArrayList<>();
    }
    this.addedPermissions.add(addedPermissionsItem);
    return this;
  }

   /**
   * Access permissions for the report.
   * @return addedPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Access permissions for the report.")

  public List<ReportPermission> getAddedPermissions() {
    return addedPermissions;
  }


  public void setAddedPermissions(List<ReportPermission> addedPermissions) {
    this.addedPermissions = addedPermissions;
  }


  public SimpleReportSettings cbQl(String cbQl) {
    
    this.cbQl = cbQl;
    return this;
  }

   /**
   * CbQL query string of the report.
   * @return cbQl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "priority='Normal'", required = true, value = "CbQL query string of the report.")

  public String getCbQl() {
    return cbQl;
  }


  public void setCbQl(String cbQl) {
    this.cbQl = cbQl;
  }


  public SimpleReportSettings columns(List<ResizableReportColumnSettings> columns) {
    
    this.columns = columns;
    return this;
  }

  public SimpleReportSettings addColumnsItem(ResizableReportColumnSettings columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Column definitions.
   * @return columns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Column definitions.")

  public List<ResizableReportColumnSettings> getColumns() {
    return columns;
  }


  public void setColumns(List<ResizableReportColumnSettings> columns) {
    this.columns = columns;
  }


  public SimpleReportSettings description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the report.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Normal priority items.", required = true, value = "Description of the report.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public SimpleReportSettings name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the report.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My first query", required = true, value = "Name of the report.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SimpleReportSettings reportId(Integer reportId) {
    
    this.reportId = reportId;
    return this;
  }

   /**
   * Id of a report
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Id of a report")

  public Integer getReportId() {
    return reportId;
  }


  public void setReportId(Integer reportId) {
    this.reportId = reportId;
  }


  public SimpleReportSettings showAllChildren(Boolean showAllChildren) {
    
    this.showAllChildren = showAllChildren;
    return this;
  }

   /**
   * Indicator to ability to collapse/expand all child items.
   * @return showAllChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicator to ability to collapse/expand all child items.")

  public Boolean getShowAllChildren() {
    return showAllChildren;
  }


  public void setShowAllChildren(Boolean showAllChildren) {
    this.showAllChildren = showAllChildren;
  }


  public SimpleReportSettings showAncestors(Boolean showAncestors) {
    
    this.showAncestors = showAncestors;
    return this;
  }

   /**
   * Indicator to show the ancestors of a result item.
   * @return showAncestors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicator to show the ancestors of a result item.")

  public Boolean getShowAncestors() {
    return showAncestors;
  }


  public void setShowAncestors(Boolean showAncestors) {
    this.showAncestors = showAncestors;
  }


  public SimpleReportSettings showDescendants(Boolean showDescendants) {
    
    this.showDescendants = showDescendants;
    return this;
  }

   /**
   * Indicator to show the descendants of a result item.
   * @return showDescendants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicator to show the descendants of a result item.")

  public Boolean getShowDescendants() {
    return showDescendants;
  }


  public void setShowDescendants(Boolean showDescendants) {
    this.showDescendants = showDescendants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleReportSettings simpleReportSettings = (SimpleReportSettings) o;
    return Objects.equals(this.addedPermissions, simpleReportSettings.addedPermissions) &&
        Objects.equals(this.cbQl, simpleReportSettings.cbQl) &&
        Objects.equals(this.columns, simpleReportSettings.columns) &&
        Objects.equals(this.description, simpleReportSettings.description) &&
        Objects.equals(this.name, simpleReportSettings.name) &&
        Objects.equals(this.reportId, simpleReportSettings.reportId) &&
        Objects.equals(this.showAllChildren, simpleReportSettings.showAllChildren) &&
        Objects.equals(this.showAncestors, simpleReportSettings.showAncestors) &&
        Objects.equals(this.showDescendants, simpleReportSettings.showDescendants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedPermissions, cbQl, columns, description, name, reportId, showAllChildren, showAncestors, showDescendants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleReportSettings {\n");
    sb.append("    addedPermissions: ").append(toIndentedString(addedPermissions)).append("\n");
    sb.append("    cbQl: ").append(toIndentedString(cbQl)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    showAllChildren: ").append(toIndentedString(showAllChildren)).append("\n");
    sb.append("    showAncestors: ").append(toIndentedString(showAncestors)).append("\n");
    sb.append("    showDescendants: ").append(toIndentedString(showDescendants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addedPermissions");
    openapiFields.add("cbQl");
    openapiFields.add("columns");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("reportId");
    openapiFields.add("showAllChildren");
    openapiFields.add("showAncestors");
    openapiFields.add("showDescendants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cbQl");
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleReportSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SimpleReportSettings.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleReportSettings is not found in the empty JSON string", SimpleReportSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SimpleReportSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimpleReportSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleReportSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaddedPermissions = jsonObj.getAsJsonArray("addedPermissions");
      if (jsonArrayaddedPermissions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("addedPermissions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `addedPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("addedPermissions").toString()));
        }

        // validate the optional field `addedPermissions` (array)
        for (int i = 0; i < jsonArrayaddedPermissions.size(); i++) {
          ReportPermission.validateJsonObject(jsonArrayaddedPermissions.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("cbQl") != null && !jsonObj.get("cbQl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cbQl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cbQl").toString()));
      }
      JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
      if (jsonArraycolumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
        }

        // validate the optional field `columns` (array)
        for (int i = 0; i < jsonArraycolumns.size(); i++) {
          ResizableReportColumnSettings.validateJsonObject(jsonArraycolumns.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleReportSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleReportSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleReportSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleReportSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleReportSettings>() {
           @Override
           public void write(JsonWriter out, SimpleReportSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleReportSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleReportSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleReportSettings
  * @throws IOException if the JSON string is invalid with respect to SimpleReportSettings
  */
  public static SimpleReportSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleReportSettings.class);
  }

 /**
  * Convert an instance of SimpleReportSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

