/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Traceability level filter
 */
@ApiModel(description = "Traceability level filter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TraceabilityLevelFilter {
  public static final String SERIALIZED_NAME_CB_Q_L = "cbQL";
  @SerializedName(SERIALIZED_NAME_CB_Q_L)
  private String cbQL;

  public static final String SERIALIZED_NAME_FOLDERS_AND_INFORMATION = "foldersAndInformation";
  @SerializedName(SERIALIZED_NAME_FOLDERS_AND_INFORMATION)
  private Boolean foldersAndInformation = false;

  public static final String SERIALIZED_NAME_HISTORY_BASELINE_ID = "historyBaselineId";
  @SerializedName(SERIALIZED_NAME_HISTORY_BASELINE_ID)
  private Integer historyBaselineId;

  public static final String SERIALIZED_NAME_HISTORY_DATE = "historyDate";
  @SerializedName(SERIALIZED_NAME_HISTORY_DATE)
  private OffsetDateTime historyDate;

  public static final String SERIALIZED_NAME_INCOMING_ASSOCIATION = "incomingAssociation";
  @SerializedName(SERIALIZED_NAME_INCOMING_ASSOCIATION)
  private Boolean incomingAssociation = true;

  public static final String SERIALIZED_NAME_INCOMING_REFERENCE = "incomingReference";
  @SerializedName(SERIALIZED_NAME_INCOMING_REFERENCE)
  private Boolean incomingReference = true;

  public static final String SERIALIZED_NAME_OUTGOING_ASSOCIATION = "outgoingAssociation";
  @SerializedName(SERIALIZED_NAME_OUTGOING_ASSOCIATION)
  private Boolean outgoingAssociation = true;

  public static final String SERIALIZED_NAME_OUTGOING_REFERENCE = "outgoingReference";
  @SerializedName(SERIALIZED_NAME_OUTGOING_REFERENCE)
  private Boolean outgoingReference = true;

  public static final String SERIALIZED_NAME_PREVIOUS_LEVEL_ITEMS = "previousLevelItems";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LEVEL_ITEMS)
  private List<TrackerItemRevision> previousLevelItems = null;

  public TraceabilityLevelFilter() { 
  }

  public TraceabilityLevelFilter cbQL(String cbQL) {
    
    this.cbQL = cbQL;
    return this;
  }

   /**
   * cbQL
   * @return cbQL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "cbQL")

  public String getCbQL() {
    return cbQL;
  }


  public void setCbQL(String cbQL) {
    this.cbQL = cbQL;
  }


  public TraceabilityLevelFilter foldersAndInformation(Boolean foldersAndInformation) {
    
    this.foldersAndInformation = foldersAndInformation;
    return this;
  }

   /**
   * Show folders and information
   * @return foldersAndInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show folders and information")

  public Boolean getFoldersAndInformation() {
    return foldersAndInformation;
  }


  public void setFoldersAndInformation(Boolean foldersAndInformation) {
    this.foldersAndInformation = foldersAndInformation;
  }


  public TraceabilityLevelFilter historyBaselineId(Integer historyBaselineId) {
    
    this.historyBaselineId = historyBaselineId;
    return this;
  }

   /**
   * History Baseline Id - Snapshot view of the given baseline
   * @return historyBaselineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "History Baseline Id - Snapshot view of the given baseline")

  public Integer getHistoryBaselineId() {
    return historyBaselineId;
  }


  public void setHistoryBaselineId(Integer historyBaselineId) {
    this.historyBaselineId = historyBaselineId;
  }


  public TraceabilityLevelFilter historyDate(OffsetDateTime historyDate) {
    
    this.historyDate = historyDate;
    return this;
  }

   /**
   * History Date - Snapshot view of the given date
   * @return historyDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "History Date - Snapshot view of the given date")

  public OffsetDateTime getHistoryDate() {
    return historyDate;
  }


  public void setHistoryDate(OffsetDateTime historyDate) {
    this.historyDate = historyDate;
  }


  public TraceabilityLevelFilter incomingAssociation(Boolean incomingAssociation) {
    
    this.incomingAssociation = incomingAssociation;
    return this;
  }

   /**
   * Show incoming association
   * @return incomingAssociation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show incoming association")

  public Boolean getIncomingAssociation() {
    return incomingAssociation;
  }


  public void setIncomingAssociation(Boolean incomingAssociation) {
    this.incomingAssociation = incomingAssociation;
  }


  public TraceabilityLevelFilter incomingReference(Boolean incomingReference) {
    
    this.incomingReference = incomingReference;
    return this;
  }

   /**
   * Show incoming references
   * @return incomingReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show incoming references")

  public Boolean getIncomingReference() {
    return incomingReference;
  }


  public void setIncomingReference(Boolean incomingReference) {
    this.incomingReference = incomingReference;
  }


  public TraceabilityLevelFilter outgoingAssociation(Boolean outgoingAssociation) {
    
    this.outgoingAssociation = outgoingAssociation;
    return this;
  }

   /**
   * Show outgoing association
   * @return outgoingAssociation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show outgoing association")

  public Boolean getOutgoingAssociation() {
    return outgoingAssociation;
  }


  public void setOutgoingAssociation(Boolean outgoingAssociation) {
    this.outgoingAssociation = outgoingAssociation;
  }


  public TraceabilityLevelFilter outgoingReference(Boolean outgoingReference) {
    
    this.outgoingReference = outgoingReference;
    return this;
  }

   /**
   * Show outgoing references
   * @return outgoingReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Show outgoing references")

  public Boolean getOutgoingReference() {
    return outgoingReference;
  }


  public void setOutgoingReference(Boolean outgoingReference) {
    this.outgoingReference = outgoingReference;
  }


  public TraceabilityLevelFilter previousLevelItems(List<TrackerItemRevision> previousLevelItems) {
    
    this.previousLevelItems = previousLevelItems;
    return this;
  }

  public TraceabilityLevelFilter addPreviousLevelItemsItem(TrackerItemRevision previousLevelItemsItem) {
    if (this.previousLevelItems == null) {
      this.previousLevelItems = new ArrayList<>();
    }
    this.previousLevelItems.add(previousLevelItemsItem);
    return this;
  }

   /**
   * Previous Level Items
   * @return previousLevelItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Previous Level Items")

  public List<TrackerItemRevision> getPreviousLevelItems() {
    return previousLevelItems;
  }


  public void setPreviousLevelItems(List<TrackerItemRevision> previousLevelItems) {
    this.previousLevelItems = previousLevelItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceabilityLevelFilter traceabilityLevelFilter = (TraceabilityLevelFilter) o;
    return Objects.equals(this.cbQL, traceabilityLevelFilter.cbQL) &&
        Objects.equals(this.foldersAndInformation, traceabilityLevelFilter.foldersAndInformation) &&
        Objects.equals(this.historyBaselineId, traceabilityLevelFilter.historyBaselineId) &&
        Objects.equals(this.historyDate, traceabilityLevelFilter.historyDate) &&
        Objects.equals(this.incomingAssociation, traceabilityLevelFilter.incomingAssociation) &&
        Objects.equals(this.incomingReference, traceabilityLevelFilter.incomingReference) &&
        Objects.equals(this.outgoingAssociation, traceabilityLevelFilter.outgoingAssociation) &&
        Objects.equals(this.outgoingReference, traceabilityLevelFilter.outgoingReference) &&
        Objects.equals(this.previousLevelItems, traceabilityLevelFilter.previousLevelItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cbQL, foldersAndInformation, historyBaselineId, historyDate, incomingAssociation, incomingReference, outgoingAssociation, outgoingReference, previousLevelItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceabilityLevelFilter {\n");
    sb.append("    cbQL: ").append(toIndentedString(cbQL)).append("\n");
    sb.append("    foldersAndInformation: ").append(toIndentedString(foldersAndInformation)).append("\n");
    sb.append("    historyBaselineId: ").append(toIndentedString(historyBaselineId)).append("\n");
    sb.append("    historyDate: ").append(toIndentedString(historyDate)).append("\n");
    sb.append("    incomingAssociation: ").append(toIndentedString(incomingAssociation)).append("\n");
    sb.append("    incomingReference: ").append(toIndentedString(incomingReference)).append("\n");
    sb.append("    outgoingAssociation: ").append(toIndentedString(outgoingAssociation)).append("\n");
    sb.append("    outgoingReference: ").append(toIndentedString(outgoingReference)).append("\n");
    sb.append("    previousLevelItems: ").append(toIndentedString(previousLevelItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cbQL");
    openapiFields.add("foldersAndInformation");
    openapiFields.add("historyBaselineId");
    openapiFields.add("historyDate");
    openapiFields.add("incomingAssociation");
    openapiFields.add("incomingReference");
    openapiFields.add("outgoingAssociation");
    openapiFields.add("outgoingReference");
    openapiFields.add("previousLevelItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cbQL");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TraceabilityLevelFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TraceabilityLevelFilter.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceabilityLevelFilter is not found in the empty JSON string", TraceabilityLevelFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TraceabilityLevelFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TraceabilityLevelFilter` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TraceabilityLevelFilter.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("cbQL") != null && !jsonObj.get("cbQL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cbQL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cbQL").toString()));
      }
      JsonArray jsonArraypreviousLevelItems = jsonObj.getAsJsonArray("previousLevelItems");
      if (jsonArraypreviousLevelItems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("previousLevelItems").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `previousLevelItems` to be an array in the JSON string but got `%s`", jsonObj.get("previousLevelItems").toString()));
        }

        // validate the optional field `previousLevelItems` (array)
        for (int i = 0; i < jsonArraypreviousLevelItems.size(); i++) {
          TrackerItemRevision.validateJsonObject(jsonArraypreviousLevelItems.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceabilityLevelFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceabilityLevelFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceabilityLevelFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceabilityLevelFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceabilityLevelFilter>() {
           @Override
           public void write(JsonWriter out, TraceabilityLevelFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceabilityLevelFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TraceabilityLevelFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TraceabilityLevelFilter
  * @throws IOException if the JSON string is invalid with respect to TraceabilityLevelFilter
  */
  public static TraceabilityLevelFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceabilityLevelFilter.class);
  }

 /**
  * Convert an instance of TraceabilityLevelFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

