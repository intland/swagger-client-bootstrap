/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Basic properties of a codebeamer tracker
 */
@ApiModel(description = "Basic properties of a codebeamer tracker")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class Tracker {
  public static final String SERIALIZED_NAME_AVAILABLE_AS_TEMPLATE = "availableAsTemplate";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_AS_TEMPLATE)
  private Boolean availableAsTemplate;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserReference createdBy;

  public static final String SERIALIZED_NAME_DEFAULT_SHOW_ANCESTOR_ITEMS = "defaultShowAncestorItems";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SHOW_ANCESTOR_ITEMS)
  private Boolean defaultShowAncestorItems;

  public static final String SERIALIZED_NAME_DEFAULT_SHOW_DESCENDANT_ITEMS = "defaultShowDescendantItems";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SHOW_DESCENDANT_ITEMS)
  private Boolean defaultShowDescendantItems;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Description format of the entity
   */
  @JsonAdapter(DescriptionFormatEnum.Adapter.class)
  public enum DescriptionFormatEnum {
    PLAINTEXT("PlainText"),
    
    HTML("Html"),
    
    WIKI("Wiki");

    private String value;

    DescriptionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionFormatEnum fromValue(String value) {
      for (DescriptionFormatEnum b : DescriptionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DescriptionFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION_FORMAT = "descriptionFormat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FORMAT)
  private DescriptionFormatEnum descriptionFormat;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private UserReference modifiedBy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONLY_WORKFLOW_CAN_CREATE_NEW_REFERRING_ITEM = "onlyWorkflowCanCreateNewReferringItem";
  @SerializedName(SERIALIZED_NAME_ONLY_WORKFLOW_CAN_CREATE_NEW_REFERRING_ITEM)
  private Boolean onlyWorkflowCanCreateNewReferringItem;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectReference project;

  public static final String SERIALIZED_NAME_SHARED_IN_WORKING_SET = "sharedInWorkingSet";
  @SerializedName(SERIALIZED_NAME_SHARED_IN_WORKING_SET)
  private Boolean sharedInWorkingSet;

  public static final String SERIALIZED_NAME_TEMPLATE_TRACKER = "templateTracker";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TRACKER)
  private TrackerReference templateTracker;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TrackerTypeReference type;

  public static final String SERIALIZED_NAME_USING_QUICK_TRANSITIONS = "usingQuickTransitions";
  @SerializedName(SERIALIZED_NAME_USING_QUICK_TRANSITIONS)
  private Boolean usingQuickTransitions;

  public static final String SERIALIZED_NAME_USING_WORKFLOW = "usingWorkflow";
  @SerializedName(SERIALIZED_NAME_USING_WORKFLOW)
  private Boolean usingWorkflow;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Tracker() { 
  }

  public Tracker availableAsTemplate(Boolean availableAsTemplate) {
    
    this.availableAsTemplate = availableAsTemplate;
    return this;
  }

   /**
   * Indicator if the tracker can be used as a template
   * @return availableAsTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicator if the tracker can be used as a template")

  public Boolean getAvailableAsTemplate() {
    return availableAsTemplate;
  }


  public void setAvailableAsTemplate(Boolean availableAsTemplate) {
    this.availableAsTemplate = availableAsTemplate;
  }


  public Tracker color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Color of the tracker
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Color of the tracker")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  public Tracker createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date when the entity was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Tracker createdBy(UserReference createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserReference createdBy) {
    this.createdBy = createdBy;
  }


  public Tracker defaultShowAncestorItems(Boolean defaultShowAncestorItems) {
    
    this.defaultShowAncestorItems = defaultShowAncestorItems;
    return this;
  }

   /**
   * Default Outline should show Ancestor Items or not
   * @return defaultShowAncestorItems
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Default Outline should show Ancestor Items or not")

  public Boolean getDefaultShowAncestorItems() {
    return defaultShowAncestorItems;
  }


  public void setDefaultShowAncestorItems(Boolean defaultShowAncestorItems) {
    this.defaultShowAncestorItems = defaultShowAncestorItems;
  }


  public Tracker defaultShowDescendantItems(Boolean defaultShowDescendantItems) {
    
    this.defaultShowDescendantItems = defaultShowDescendantItems;
    return this;
  }

   /**
   * Default Outline should show Descendant Items or not
   * @return defaultShowDescendantItems
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Default Outline should show Descendant Items or not")

  public Boolean getDefaultShowDescendantItems() {
    return defaultShowDescendantItems;
  }


  public void setDefaultShowDescendantItems(Boolean defaultShowDescendantItems) {
    this.defaultShowDescendantItems = defaultShowDescendantItems;
  }


  public Tracker deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Indicator if the tracker is deleted
   * @return deleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicator if the tracker is deleted")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Tracker description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Tracker descriptionFormat(DescriptionFormatEnum descriptionFormat) {
    
    this.descriptionFormat = descriptionFormat;
    return this;
  }

   /**
   * Description format of the entity
   * @return descriptionFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description format of the entity")

  public DescriptionFormatEnum getDescriptionFormat() {
    return descriptionFormat;
  }


  public void setDescriptionFormat(DescriptionFormatEnum descriptionFormat) {
    this.descriptionFormat = descriptionFormat;
  }


  public Tracker hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * Indicator if the tracker is hidden
   * @return hidden
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicator if the tracker is hidden")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Tracker id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the entity
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the entity")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Tracker keyName(String keyName) {
    
    this.keyName = keyName;
    return this;
  }

   /**
   * Keyname of a tracker
   * @return keyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Keyname of a tracker")

  public String getKeyName() {
    return keyName;
  }


  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public Tracker modifiedAt(OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date when the entity was modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public Tracker modifiedBy(UserReference modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(UserReference modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Tracker name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Tracker onlyWorkflowCanCreateNewReferringItem(Boolean onlyWorkflowCanCreateNewReferringItem) {
    
    this.onlyWorkflowCanCreateNewReferringItem = onlyWorkflowCanCreateNewReferringItem;
    return this;
  }

   /**
   * If true, then the only way to create new referring items is through workflow actions
   * @return onlyWorkflowCanCreateNewReferringItem
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, then the only way to create new referring items is through workflow actions")

  public Boolean getOnlyWorkflowCanCreateNewReferringItem() {
    return onlyWorkflowCanCreateNewReferringItem;
  }


  public void setOnlyWorkflowCanCreateNewReferringItem(Boolean onlyWorkflowCanCreateNewReferringItem) {
    this.onlyWorkflowCanCreateNewReferringItem = onlyWorkflowCanCreateNewReferringItem;
  }


  public Tracker project(ProjectReference project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectReference getProject() {
    return project;
  }


  public void setProject(ProjectReference project) {
    this.project = project;
  }


  public Tracker sharedInWorkingSet(Boolean sharedInWorkingSet) {
    
    this.sharedInWorkingSet = sharedInWorkingSet;
    return this;
  }

   /**
   * If the tracker is shared in a WorkingSet
   * @return sharedInWorkingSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the tracker is shared in a WorkingSet")

  public Boolean getSharedInWorkingSet() {
    return sharedInWorkingSet;
  }


  public void setSharedInWorkingSet(Boolean sharedInWorkingSet) {
    this.sharedInWorkingSet = sharedInWorkingSet;
  }


  public Tracker templateTracker(TrackerReference templateTracker) {
    
    this.templateTracker = templateTracker;
    return this;
  }

   /**
   * Get templateTracker
   * @return templateTracker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerReference getTemplateTracker() {
    return templateTracker;
  }


  public void setTemplateTracker(TrackerReference templateTracker) {
    this.templateTracker = templateTracker;
  }


  public Tracker type(TrackerTypeReference type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerTypeReference getType() {
    return type;
  }


  public void setType(TrackerTypeReference type) {
    this.type = type;
  }


  public Tracker usingQuickTransitions(Boolean usingQuickTransitions) {
    
    this.usingQuickTransitions = usingQuickTransitions;
    return this;
  }

   /**
   * If true, then every transition will be executed immediately (if possible) without opening an editor for the item
   * @return usingQuickTransitions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, then every transition will be executed immediately (if possible) without opening an editor for the item")

  public Boolean getUsingQuickTransitions() {
    return usingQuickTransitions;
  }


  public void setUsingQuickTransitions(Boolean usingQuickTransitions) {
    this.usingQuickTransitions = usingQuickTransitions;
  }


  public Tracker usingWorkflow(Boolean usingWorkflow) {
    
    this.usingWorkflow = usingWorkflow;
    return this;
  }

   /**
   * Should transitions and workflow actions be available in the tracker or not
   * @return usingWorkflow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Should transitions and workflow actions be available in the tracker or not")

  public Boolean getUsingWorkflow() {
    return usingWorkflow;
  }


  public void setUsingWorkflow(Boolean usingWorkflow) {
    this.usingWorkflow = usingWorkflow;
  }


  public Tracker version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of a tracker
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of a tracker")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tracker tracker = (Tracker) o;
    return Objects.equals(this.availableAsTemplate, tracker.availableAsTemplate) &&
        Objects.equals(this.color, tracker.color) &&
        Objects.equals(this.createdAt, tracker.createdAt) &&
        Objects.equals(this.createdBy, tracker.createdBy) &&
        Objects.equals(this.defaultShowAncestorItems, tracker.defaultShowAncestorItems) &&
        Objects.equals(this.defaultShowDescendantItems, tracker.defaultShowDescendantItems) &&
        Objects.equals(this.deleted, tracker.deleted) &&
        Objects.equals(this.description, tracker.description) &&
        Objects.equals(this.descriptionFormat, tracker.descriptionFormat) &&
        Objects.equals(this.hidden, tracker.hidden) &&
        Objects.equals(this.id, tracker.id) &&
        Objects.equals(this.keyName, tracker.keyName) &&
        Objects.equals(this.modifiedAt, tracker.modifiedAt) &&
        Objects.equals(this.modifiedBy, tracker.modifiedBy) &&
        Objects.equals(this.name, tracker.name) &&
        Objects.equals(this.onlyWorkflowCanCreateNewReferringItem, tracker.onlyWorkflowCanCreateNewReferringItem) &&
        Objects.equals(this.project, tracker.project) &&
        Objects.equals(this.sharedInWorkingSet, tracker.sharedInWorkingSet) &&
        Objects.equals(this.templateTracker, tracker.templateTracker) &&
        Objects.equals(this.type, tracker.type) &&
        Objects.equals(this.usingQuickTransitions, tracker.usingQuickTransitions) &&
        Objects.equals(this.usingWorkflow, tracker.usingWorkflow) &&
        Objects.equals(this.version, tracker.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableAsTemplate, color, createdAt, createdBy, defaultShowAncestorItems, defaultShowDescendantItems, deleted, description, descriptionFormat, hidden, id, keyName, modifiedAt, modifiedBy, name, onlyWorkflowCanCreateNewReferringItem, project, sharedInWorkingSet, templateTracker, type, usingQuickTransitions, usingWorkflow, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tracker {\n");
    sb.append("    availableAsTemplate: ").append(toIndentedString(availableAsTemplate)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    defaultShowAncestorItems: ").append(toIndentedString(defaultShowAncestorItems)).append("\n");
    sb.append("    defaultShowDescendantItems: ").append(toIndentedString(defaultShowDescendantItems)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionFormat: ").append(toIndentedString(descriptionFormat)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onlyWorkflowCanCreateNewReferringItem: ").append(toIndentedString(onlyWorkflowCanCreateNewReferringItem)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    sharedInWorkingSet: ").append(toIndentedString(sharedInWorkingSet)).append("\n");
    sb.append("    templateTracker: ").append(toIndentedString(templateTracker)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usingQuickTransitions: ").append(toIndentedString(usingQuickTransitions)).append("\n");
    sb.append("    usingWorkflow: ").append(toIndentedString(usingWorkflow)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableAsTemplate");
    openapiFields.add("color");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("defaultShowAncestorItems");
    openapiFields.add("defaultShowDescendantItems");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("descriptionFormat");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("keyName");
    openapiFields.add("modifiedAt");
    openapiFields.add("modifiedBy");
    openapiFields.add("name");
    openapiFields.add("onlyWorkflowCanCreateNewReferringItem");
    openapiFields.add("project");
    openapiFields.add("sharedInWorkingSet");
    openapiFields.add("templateTracker");
    openapiFields.add("type");
    openapiFields.add("usingQuickTransitions");
    openapiFields.add("usingWorkflow");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultShowAncestorItems");
    openapiRequiredFields.add("defaultShowDescendantItems");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("hidden");
    openapiRequiredFields.add("onlyWorkflowCanCreateNewReferringItem");
    openapiRequiredFields.add("usingQuickTransitions");
    openapiRequiredFields.add("usingWorkflow");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Tracker
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Tracker.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tracker is not found in the empty JSON string", Tracker.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Tracker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tracker` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Tracker.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `createdBy`
      if (jsonObj.getAsJsonObject("createdBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("createdBy"));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("descriptionFormat") != null && !jsonObj.get("descriptionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionFormat").toString()));
      }
      if (jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      // validate the optional field `modifiedBy`
      if (jsonObj.getAsJsonObject("modifiedBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("modifiedBy"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `project`
      if (jsonObj.getAsJsonObject("project") != null) {
        ProjectReference.validateJsonObject(jsonObj.getAsJsonObject("project"));
      }
      // validate the optional field `templateTracker`
      if (jsonObj.getAsJsonObject("templateTracker") != null) {
        TrackerReference.validateJsonObject(jsonObj.getAsJsonObject("templateTracker"));
      }
      // validate the optional field `type`
      if (jsonObj.getAsJsonObject("type") != null) {
        TrackerTypeReference.validateJsonObject(jsonObj.getAsJsonObject("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tracker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tracker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tracker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tracker.class));

       return (TypeAdapter<T>) new TypeAdapter<Tracker>() {
           @Override
           public void write(JsonWriter out, Tracker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tracker read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Tracker given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Tracker
  * @throws IOException if the JSON string is invalid with respect to Tracker
  */
  public static Tracker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tracker.class);
  }

 /**
  * Convert an instance of Tracker to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

