/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModelProperty;

/**
 * TrackerFilteringRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerFilteringRequest {
  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<TrackerTypeReference> types = null;

  public TrackerFilteringRequest() { 
  }

  public TrackerFilteringRequest deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * True to also show removed trackers.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True to also show removed trackers.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public TrackerFilteringRequest hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * True to also show hidden trackers.
   * @return hidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True to also show hidden trackers.")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public TrackerFilteringRequest keyName(String keyName) {
    
    this.keyName = keyName;
    return this;
  }

   /**
   * Filter by project key name
   * @return keyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by project key name")

  public String getKeyName() {
    return keyName;
  }


  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public TrackerFilteringRequest types(List<TrackerTypeReference> types) {
    
    this.types = types;
    return this;
  }

  public TrackerFilteringRequest addTypesItem(TrackerTypeReference typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * List of tracker type references, to only show trackers of these types.
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tracker type references, to only show trackers of these types.")

  public List<TrackerTypeReference> getTypes() {
    return types;
  }


  public void setTypes(List<TrackerTypeReference> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerFilteringRequest trackerFilteringRequest = (TrackerFilteringRequest) o;
    return Objects.equals(this.deleted, trackerFilteringRequest.deleted) &&
        Objects.equals(this.hidden, trackerFilteringRequest.hidden) &&
        Objects.equals(this.keyName, trackerFilteringRequest.keyName) &&
        Objects.equals(this.types, trackerFilteringRequest.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleted, hidden, keyName, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerFilteringRequest {\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleted");
    openapiFields.add("hidden");
    openapiFields.add("keyName");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerFilteringRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerFilteringRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerFilteringRequest is not found in the empty JSON string", TrackerFilteringRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerFilteringRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerFilteringRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      JsonArray jsonArraytypes = jsonObj.getAsJsonArray("types");
      if (jsonArraytypes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("types").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
        }

        // validate the optional field `types` (array)
        for (int i = 0; i < jsonArraytypes.size(); i++) {
          TrackerTypeReference.validateJsonObject(jsonArraytypes.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerFilteringRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerFilteringRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerFilteringRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerFilteringRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerFilteringRequest>() {
           @Override
           public void write(JsonWriter out, TrackerFilteringRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerFilteringRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerFilteringRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerFilteringRequest
  * @throws IOException if the JSON string is invalid with respect to TrackerFilteringRequest
  */
  public static TrackerFilteringRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerFilteringRequest.class);
  }

 /**
  * Convert an instance of TrackerFilteringRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

