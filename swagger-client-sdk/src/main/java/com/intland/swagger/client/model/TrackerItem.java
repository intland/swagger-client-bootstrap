/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Basic properties of a codebeamer tracker item
 */
@ApiModel(description = "Basic properties of a codebeamer tracker item")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerItem {
  public static final String SERIALIZED_NAME_ACCRUED_MILLIS = "accruedMillis";
  @SerializedName(SERIALIZED_NAME_ACCRUED_MILLIS)
  private Long accruedMillis;

  public static final String SERIALIZED_NAME_AREAS = "areas";
  @SerializedName(SERIALIZED_NAME_AREAS)
  private List<AbstractReference> areas = null;

  public static final String SERIALIZED_NAME_ASSIGNED_AT = "assignedAt";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_AT)
  private OffsetDateTime assignedAt;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private List<AbstractReference> assignedTo = null;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<AbstractReference> categories = null;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<TrackerItemReference> children = null;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closedAt";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<CommentReference> comments = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserReference createdBy;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<AbstractFieldValue> customFields = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Description format of the entity
   */
  @JsonAdapter(DescriptionFormatEnum.Adapter.class)
  public enum DescriptionFormatEnum {
    PLAINTEXT("PlainText"),
    
    HTML("Html"),
    
    WIKI("Wiki");

    private String value;

    DescriptionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionFormatEnum fromValue(String value) {
      for (DescriptionFormatEnum b : DescriptionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DescriptionFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION_FORMAT = "descriptionFormat";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FORMAT)
  private DescriptionFormatEnum descriptionFormat;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ESTIMATED_MILLIS = "estimatedMillis";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_MILLIS)
  private Long estimatedMillis;

  public static final String SERIALIZED_NAME_FORMALITY = "formality";
  @SerializedName(SERIALIZED_NAME_FORMALITY)
  private AbstractReference formality;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private UserReference modifiedBy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  private Integer ordinal;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<AbstractReference> owners = null;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private TrackerItemReference parent;

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private List<AbstractReference> platforms = null;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private AbstractReference priority;

  public static final String SERIALIZED_NAME_RELEASE_METHOD = "releaseMethod";
  @SerializedName(SERIALIZED_NAME_RELEASE_METHOD)
  private AbstractReference releaseMethod;

  public static final String SERIALIZED_NAME_RESOLUTIONS = "resolutions";
  @SerializedName(SERIALIZED_NAME_RESOLUTIONS)
  private List<AbstractReference> resolutions = null;

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List<AbstractReference> severities = null;

  public static final String SERIALIZED_NAME_SPENT_MILLIS = "spentMillis";
  @SerializedName(SERIALIZED_NAME_SPENT_MILLIS)
  private Long spentMillis;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AbstractReference status;

  public static final String SERIALIZED_NAME_STORY_POINTS = "storyPoints";
  @SerializedName(SERIALIZED_NAME_STORY_POINTS)
  private Integer storyPoints;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<AbstractReference> subjects = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Label> tags = null;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<AbstractReference> teams = null;

  public static final String SERIALIZED_NAME_TRACKER = "tracker";
  @SerializedName(SERIALIZED_NAME_TRACKER)
  private TrackerReference tracker;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<AbstractReference> versions = null;

  public TrackerItem() { 
  }

  
  public TrackerItem(
     Long accruedMillis, 
     OffsetDateTime assignedAt, 
     List<TrackerItemReference> children, 
     List<CommentReference> comments, 
     List<Label> tags, 
     Integer version
  ) {
    this();
    this.accruedMillis = accruedMillis;
    this.assignedAt = assignedAt;
    this.children = children;
    this.comments = comments;
    this.tags = tags;
    this.version = version;
  }

   /**
   * Accrued work time of a tracker item in milliseconds
   * @return accruedMillis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accrued work time of a tracker item in milliseconds")

  public Long getAccruedMillis() {
    return accruedMillis;
  }




  public TrackerItem areas(List<AbstractReference> areas) {
    
    this.areas = areas;
    return this;
  }

  public TrackerItem addAreasItem(AbstractReference areasItem) {
    if (this.areas == null) {
      this.areas = new ArrayList<>();
    }
    this.areas.add(areasItem);
    return this;
  }

   /**
   * Areas of a tracker item
   * @return areas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Areas of a tracker item")

  public List<AbstractReference> getAreas() {
    return areas;
  }


  public void setAreas(List<AbstractReference> areas) {
    this.areas = areas;
  }


   /**
   * Assignee date of a tracker item
   * @return assignedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Assignee date of a tracker item")

  public OffsetDateTime getAssignedAt() {
    return assignedAt;
  }




  public TrackerItem assignedTo(List<AbstractReference> assignedTo) {
    
    this.assignedTo = assignedTo;
    return this;
  }

  public TrackerItem addAssignedToItem(AbstractReference assignedToItem) {
    if (this.assignedTo == null) {
      this.assignedTo = new ArrayList<>();
    }
    this.assignedTo.add(assignedToItem);
    return this;
  }

   /**
   * Assignees of a tracker item
   * @return assignedTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Assignees of a tracker item")

  public List<AbstractReference> getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(List<AbstractReference> assignedTo) {
    this.assignedTo = assignedTo;
  }


  public TrackerItem categories(List<AbstractReference> categories) {
    
    this.categories = categories;
    return this;
  }

  public TrackerItem addCategoriesItem(AbstractReference categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Categories of a tracker item
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Categories of a tracker item")

  public List<AbstractReference> getCategories() {
    return categories;
  }


  public void setCategories(List<AbstractReference> categories) {
    this.categories = categories;
  }


   /**
   * Children of a tracker item
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Children of a tracker item")

  public List<TrackerItemReference> getChildren() {
    return children;
  }




  public TrackerItem closedAt(OffsetDateTime closedAt) {
    
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Close date of a tracker item
   * @return closedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Close date of a tracker item")

  public OffsetDateTime getClosedAt() {
    return closedAt;
  }


  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


   /**
   * Comment in the tracker item
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comment in the tracker item")

  public List<CommentReference> getComments() {
    return comments;
  }




  public TrackerItem createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date when the entity was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TrackerItem createdBy(UserReference createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserReference createdBy) {
    this.createdBy = createdBy;
  }


  public TrackerItem customFields(List<AbstractFieldValue> customFields) {
    
    this.customFields = customFields;
    return this;
  }

  public TrackerItem addCustomFieldsItem(AbstractFieldValue customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Custom field of a tracker item
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom field of a tracker item")

  public List<AbstractFieldValue> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<AbstractFieldValue> customFields) {
    this.customFields = customFields;
  }


  public TrackerItem description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TrackerItem descriptionFormat(DescriptionFormatEnum descriptionFormat) {
    
    this.descriptionFormat = descriptionFormat;
    return this;
  }

   /**
   * Description format of the entity
   * @return descriptionFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description format of the entity")

  public DescriptionFormatEnum getDescriptionFormat() {
    return descriptionFormat;
  }


  public void setDescriptionFormat(DescriptionFormatEnum descriptionFormat) {
    this.descriptionFormat = descriptionFormat;
  }


  public TrackerItem endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of a tracker item
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "End date of a tracker item")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public TrackerItem estimatedMillis(Long estimatedMillis) {
    
    this.estimatedMillis = estimatedMillis;
    return this;
  }

   /**
   * Estimated work time of a tracker item in milliseconds
   * @return estimatedMillis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Estimated work time of a tracker item in milliseconds")

  public Long getEstimatedMillis() {
    return estimatedMillis;
  }


  public void setEstimatedMillis(Long estimatedMillis) {
    this.estimatedMillis = estimatedMillis;
  }


  public TrackerItem formality(AbstractReference formality) {
    
    this.formality = formality;
    return this;
  }

   /**
   * Get formality
   * @return formality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractReference getFormality() {
    return formality;
  }


  public void setFormality(AbstractReference formality) {
    this.formality = formality;
  }


  public TrackerItem id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the entity
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the entity")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public TrackerItem modifiedAt(OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date when the entity was modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the entity was modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public TrackerItem modifiedBy(UserReference modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserReference getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(UserReference modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public TrackerItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TrackerItem ordinal(Integer ordinal) {
    
    this.ordinal = ordinal;
    return this;
  }

   /**
   * Ordinal of a tracker item
   * @return ordinal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ordinal of a tracker item")

  public Integer getOrdinal() {
    return ordinal;
  }


  public void setOrdinal(Integer ordinal) {
    this.ordinal = ordinal;
  }


  public TrackerItem owners(List<AbstractReference> owners) {
    
    this.owners = owners;
    return this;
  }

  public TrackerItem addOwnersItem(AbstractReference ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Owners of a tracker item
   * @return owners
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Owners of a tracker item")

  public List<AbstractReference> getOwners() {
    return owners;
  }


  public void setOwners(List<AbstractReference> owners) {
    this.owners = owners;
  }


  public TrackerItem parent(TrackerItemReference parent) {
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItemReference getParent() {
    return parent;
  }


  public void setParent(TrackerItemReference parent) {
    this.parent = parent;
  }


  public TrackerItem platforms(List<AbstractReference> platforms) {
    
    this.platforms = platforms;
    return this;
  }

  public TrackerItem addPlatformsItem(AbstractReference platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

   /**
   * Platforms of a tracker item
   * @return platforms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Platforms of a tracker item")

  public List<AbstractReference> getPlatforms() {
    return platforms;
  }


  public void setPlatforms(List<AbstractReference> platforms) {
    this.platforms = platforms;
  }


  public TrackerItem priority(AbstractReference priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractReference getPriority() {
    return priority;
  }


  public void setPriority(AbstractReference priority) {
    this.priority = priority;
  }


  public TrackerItem releaseMethod(AbstractReference releaseMethod) {
    
    this.releaseMethod = releaseMethod;
    return this;
  }

   /**
   * Get releaseMethod
   * @return releaseMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractReference getReleaseMethod() {
    return releaseMethod;
  }


  public void setReleaseMethod(AbstractReference releaseMethod) {
    this.releaseMethod = releaseMethod;
  }


  public TrackerItem resolutions(List<AbstractReference> resolutions) {
    
    this.resolutions = resolutions;
    return this;
  }

  public TrackerItem addResolutionsItem(AbstractReference resolutionsItem) {
    if (this.resolutions == null) {
      this.resolutions = new ArrayList<>();
    }
    this.resolutions.add(resolutionsItem);
    return this;
  }

   /**
   * Resolutions of a tracker item
   * @return resolutions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Resolutions of a tracker item")

  public List<AbstractReference> getResolutions() {
    return resolutions;
  }


  public void setResolutions(List<AbstractReference> resolutions) {
    this.resolutions = resolutions;
  }


  public TrackerItem severities(List<AbstractReference> severities) {
    
    this.severities = severities;
    return this;
  }

  public TrackerItem addSeveritiesItem(AbstractReference severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

   /**
   * Severities of a tracker item
   * @return severities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Severities of a tracker item")

  public List<AbstractReference> getSeverities() {
    return severities;
  }


  public void setSeverities(List<AbstractReference> severities) {
    this.severities = severities;
  }


  public TrackerItem spentMillis(Long spentMillis) {
    
    this.spentMillis = spentMillis;
    return this;
  }

   /**
   * Spent work time of a tracker item in milliseconds
   * @return spentMillis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Spent work time of a tracker item in milliseconds")

  public Long getSpentMillis() {
    return spentMillis;
  }


  public void setSpentMillis(Long spentMillis) {
    this.spentMillis = spentMillis;
  }


  public TrackerItem startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of a tracker item
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start date of a tracker item")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public TrackerItem status(AbstractReference status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbstractReference getStatus() {
    return status;
  }


  public void setStatus(AbstractReference status) {
    this.status = status;
  }


  public TrackerItem storyPoints(Integer storyPoints) {
    
    this.storyPoints = storyPoints;
    return this;
  }

   /**
   * Story points of a tracker item
   * @return storyPoints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Story points of a tracker item")

  public Integer getStoryPoints() {
    return storyPoints;
  }


  public void setStoryPoints(Integer storyPoints) {
    this.storyPoints = storyPoints;
  }


  public TrackerItem subjects(List<AbstractReference> subjects) {
    
    this.subjects = subjects;
    return this;
  }

  public TrackerItem addSubjectsItem(AbstractReference subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

   /**
   * Subjects of a tracker item
   * @return subjects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subjects of a tracker item")

  public List<AbstractReference> getSubjects() {
    return subjects;
  }


  public void setSubjects(List<AbstractReference> subjects) {
    this.subjects = subjects;
  }


   /**
   * Tags of the tracker item
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags of the tracker item")

  public List<Label> getTags() {
    return tags;
  }




  public TrackerItem teams(List<AbstractReference> teams) {
    
    this.teams = teams;
    return this;
  }

  public TrackerItem addTeamsItem(AbstractReference teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Teams of a tracker item
   * @return teams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Teams of a tracker item")

  public List<AbstractReference> getTeams() {
    return teams;
  }


  public void setTeams(List<AbstractReference> teams) {
    this.teams = teams;
  }


  public TrackerItem tracker(TrackerReference tracker) {
    
    this.tracker = tracker;
    return this;
  }

   /**
   * Get tracker
   * @return tracker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerReference getTracker() {
    return tracker;
  }


  public void setTracker(TrackerReference tracker) {
    this.tracker = tracker;
  }


  public TrackerItem typeName(String typeName) {
    
    this.typeName = typeName;
    return this;
  }

   /**
   * Type name of a tracker item
   * @return typeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type name of a tracker item")

  public String getTypeName() {
    return typeName;
  }


  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


   /**
   * Version of a tracker item
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of a tracker item")

  public Integer getVersion() {
    return version;
  }




  public TrackerItem versions(List<AbstractReference> versions) {
    
    this.versions = versions;
    return this;
  }

  public TrackerItem addVersionsItem(AbstractReference versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * Versions of a tracker item
   * @return versions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Versions of a tracker item")

  public List<AbstractReference> getVersions() {
    return versions;
  }


  public void setVersions(List<AbstractReference> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItem trackerItem = (TrackerItem) o;
    return Objects.equals(this.accruedMillis, trackerItem.accruedMillis) &&
        Objects.equals(this.areas, trackerItem.areas) &&
        Objects.equals(this.assignedAt, trackerItem.assignedAt) &&
        Objects.equals(this.assignedTo, trackerItem.assignedTo) &&
        Objects.equals(this.categories, trackerItem.categories) &&
        Objects.equals(this.children, trackerItem.children) &&
        Objects.equals(this.closedAt, trackerItem.closedAt) &&
        Objects.equals(this.comments, trackerItem.comments) &&
        Objects.equals(this.createdAt, trackerItem.createdAt) &&
        Objects.equals(this.createdBy, trackerItem.createdBy) &&
        Objects.equals(this.customFields, trackerItem.customFields) &&
        Objects.equals(this.description, trackerItem.description) &&
        Objects.equals(this.descriptionFormat, trackerItem.descriptionFormat) &&
        Objects.equals(this.endDate, trackerItem.endDate) &&
        Objects.equals(this.estimatedMillis, trackerItem.estimatedMillis) &&
        Objects.equals(this.formality, trackerItem.formality) &&
        Objects.equals(this.id, trackerItem.id) &&
        Objects.equals(this.modifiedAt, trackerItem.modifiedAt) &&
        Objects.equals(this.modifiedBy, trackerItem.modifiedBy) &&
        Objects.equals(this.name, trackerItem.name) &&
        Objects.equals(this.ordinal, trackerItem.ordinal) &&
        Objects.equals(this.owners, trackerItem.owners) &&
        Objects.equals(this.parent, trackerItem.parent) &&
        Objects.equals(this.platforms, trackerItem.platforms) &&
        Objects.equals(this.priority, trackerItem.priority) &&
        Objects.equals(this.releaseMethod, trackerItem.releaseMethod) &&
        Objects.equals(this.resolutions, trackerItem.resolutions) &&
        Objects.equals(this.severities, trackerItem.severities) &&
        Objects.equals(this.spentMillis, trackerItem.spentMillis) &&
        Objects.equals(this.startDate, trackerItem.startDate) &&
        Objects.equals(this.status, trackerItem.status) &&
        Objects.equals(this.storyPoints, trackerItem.storyPoints) &&
        Objects.equals(this.subjects, trackerItem.subjects) &&
        Objects.equals(this.tags, trackerItem.tags) &&
        Objects.equals(this.teams, trackerItem.teams) &&
        Objects.equals(this.tracker, trackerItem.tracker) &&
        Objects.equals(this.typeName, trackerItem.typeName) &&
        Objects.equals(this.version, trackerItem.version) &&
        Objects.equals(this.versions, trackerItem.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accruedMillis, areas, assignedAt, assignedTo, categories, children, closedAt, comments, createdAt, createdBy, customFields, description, descriptionFormat, endDate, estimatedMillis, formality, id, modifiedAt, modifiedBy, name, ordinal, owners, parent, platforms, priority, releaseMethod, resolutions, severities, spentMillis, startDate, status, storyPoints, subjects, tags, teams, tracker, typeName, version, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItem {\n");
    sb.append("    accruedMillis: ").append(toIndentedString(accruedMillis)).append("\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    assignedAt: ").append(toIndentedString(assignedAt)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionFormat: ").append(toIndentedString(descriptionFormat)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    estimatedMillis: ").append(toIndentedString(estimatedMillis)).append("\n");
    sb.append("    formality: ").append(toIndentedString(formality)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    releaseMethod: ").append(toIndentedString(releaseMethod)).append("\n");
    sb.append("    resolutions: ").append(toIndentedString(resolutions)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    spentMillis: ").append(toIndentedString(spentMillis)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storyPoints: ").append(toIndentedString(storyPoints)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    tracker: ").append(toIndentedString(tracker)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accruedMillis");
    openapiFields.add("areas");
    openapiFields.add("assignedAt");
    openapiFields.add("assignedTo");
    openapiFields.add("categories");
    openapiFields.add("children");
    openapiFields.add("closedAt");
    openapiFields.add("comments");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("customFields");
    openapiFields.add("description");
    openapiFields.add("descriptionFormat");
    openapiFields.add("endDate");
    openapiFields.add("estimatedMillis");
    openapiFields.add("formality");
    openapiFields.add("id");
    openapiFields.add("modifiedAt");
    openapiFields.add("modifiedBy");
    openapiFields.add("name");
    openapiFields.add("ordinal");
    openapiFields.add("owners");
    openapiFields.add("parent");
    openapiFields.add("platforms");
    openapiFields.add("priority");
    openapiFields.add("releaseMethod");
    openapiFields.add("resolutions");
    openapiFields.add("severities");
    openapiFields.add("spentMillis");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("storyPoints");
    openapiFields.add("subjects");
    openapiFields.add("tags");
    openapiFields.add("teams");
    openapiFields.add("tracker");
    openapiFields.add("typeName");
    openapiFields.add("version");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerItem is not found in the empty JSON string", TrackerItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayareas = jsonObj.getAsJsonArray("areas");
      if (jsonArrayareas != null) {
        // ensure the json data is an array
        if (!jsonObj.get("areas").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `areas` to be an array in the JSON string but got `%s`", jsonObj.get("areas").toString()));
        }

        // validate the optional field `areas` (array)
        for (int i = 0; i < jsonArrayareas.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayareas.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayassignedTo = jsonObj.getAsJsonArray("assignedTo");
      if (jsonArrayassignedTo != null) {
        // ensure the json data is an array
        if (!jsonObj.get("assignedTo").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `assignedTo` to be an array in the JSON string but got `%s`", jsonObj.get("assignedTo").toString()));
        }

        // validate the optional field `assignedTo` (array)
        for (int i = 0; i < jsonArrayassignedTo.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayassignedTo.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      if (jsonArraycategories != null) {
        // ensure the json data is an array
        if (!jsonObj.get("categories").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
        }

        // validate the optional field `categories` (array)
        for (int i = 0; i < jsonArraycategories.size(); i++) {
          AbstractReference.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
      if (jsonArraychildren != null) {
        // ensure the json data is an array
        if (!jsonObj.get("children").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
        }

        // validate the optional field `children` (array)
        for (int i = 0; i < jsonArraychildren.size(); i++) {
          TrackerItemReference.validateJsonObject(jsonArraychildren.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
      if (jsonArraycomments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("comments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
        }

        // validate the optional field `comments` (array)
        for (int i = 0; i < jsonArraycomments.size(); i++) {
          CommentReference.validateJsonObject(jsonArraycomments.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `createdBy`
      if (jsonObj.getAsJsonObject("createdBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("createdBy"));
      }
      JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
      if (jsonArraycustomFields != null) {
        // ensure the json data is an array
        if (!jsonObj.get("customFields").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
        }

        // validate the optional field `customFields` (array)
        for (int i = 0; i < jsonArraycustomFields.size(); i++) {
          AbstractFieldValue.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("descriptionFormat") != null && !jsonObj.get("descriptionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionFormat").toString()));
      }
      // validate the optional field `formality`
      if (jsonObj.getAsJsonObject("formality") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("formality"));
      }
      // validate the optional field `modifiedBy`
      if (jsonObj.getAsJsonObject("modifiedBy") != null) {
        UserReference.validateJsonObject(jsonObj.getAsJsonObject("modifiedBy"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
      if (jsonArrayowners != null) {
        // ensure the json data is an array
        if (!jsonObj.get("owners").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
        }

        // validate the optional field `owners` (array)
        for (int i = 0; i < jsonArrayowners.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayowners.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `parent`
      if (jsonObj.getAsJsonObject("parent") != null) {
        TrackerItemReference.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      JsonArray jsonArrayplatforms = jsonObj.getAsJsonArray("platforms");
      if (jsonArrayplatforms != null) {
        // ensure the json data is an array
        if (!jsonObj.get("platforms").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
        }

        // validate the optional field `platforms` (array)
        for (int i = 0; i < jsonArrayplatforms.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayplatforms.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `priority`
      if (jsonObj.getAsJsonObject("priority") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("priority"));
      }
      // validate the optional field `releaseMethod`
      if (jsonObj.getAsJsonObject("releaseMethod") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("releaseMethod"));
      }
      JsonArray jsonArrayresolutions = jsonObj.getAsJsonArray("resolutions");
      if (jsonArrayresolutions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("resolutions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `resolutions` to be an array in the JSON string but got `%s`", jsonObj.get("resolutions").toString()));
        }

        // validate the optional field `resolutions` (array)
        for (int i = 0; i < jsonArrayresolutions.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayresolutions.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayseverities = jsonObj.getAsJsonArray("severities");
      if (jsonArrayseverities != null) {
        // ensure the json data is an array
        if (!jsonObj.get("severities").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
        }

        // validate the optional field `severities` (array)
        for (int i = 0; i < jsonArrayseverities.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayseverities.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `status`
      if (jsonObj.getAsJsonObject("status") != null) {
        AbstractReference.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
      JsonArray jsonArraysubjects = jsonObj.getAsJsonArray("subjects");
      if (jsonArraysubjects != null) {
        // ensure the json data is an array
        if (!jsonObj.get("subjects").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
        }

        // validate the optional field `subjects` (array)
        for (int i = 0; i < jsonArraysubjects.size(); i++) {
          AbstractReference.validateJsonObject(jsonArraysubjects.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
        }

        // validate the optional field `tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          Label.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
      if (jsonArrayteams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("teams").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
        }

        // validate the optional field `teams` (array)
        for (int i = 0; i < jsonArrayteams.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayteams.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `tracker`
      if (jsonObj.getAsJsonObject("tracker") != null) {
        TrackerReference.validateJsonObject(jsonObj.getAsJsonObject("tracker"));
      }
      if (jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
      if (jsonArrayversions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("versions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
        }

        // validate the optional field `versions` (array)
        for (int i = 0; i < jsonArrayversions.size(); i++) {
          AbstractReference.validateJsonObject(jsonArrayversions.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerItem>() {
           @Override
           public void write(JsonWriter out, TrackerItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerItem
  * @throws IOException if the JSON string is invalid with respect to TrackerItem
  */
  public static TrackerItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerItem.class);
  }

 /**
  * Convert an instance of TrackerItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

