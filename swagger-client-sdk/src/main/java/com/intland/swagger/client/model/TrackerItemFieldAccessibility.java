/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Accessibilities of fields
 */
@ApiModel(description = "Accessibilities of fields")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerItemFieldAccessibility {
  public static final String SERIALIZED_NAME_EDITABLE = "editable";
  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private FieldReference field;

  public static final String SERIALIZED_NAME_MANDATORY = "mandatory";
  @SerializedName(SERIALIZED_NAME_MANDATORY)
  private Boolean mandatory;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public TrackerItemFieldAccessibility() { 
  }

  public TrackerItemFieldAccessibility editable(Boolean editable) {
    
    this.editable = editable;
    return this;
  }

   /**
   * Field is editable
   * @return editable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Field is editable")

  public Boolean getEditable() {
    return editable;
  }


  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public TrackerItemFieldAccessibility field(FieldReference field) {
    
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldReference getField() {
    return field;
  }


  public void setField(FieldReference field) {
    this.field = field;
  }


  public TrackerItemFieldAccessibility mandatory(Boolean mandatory) {
    
    this.mandatory = mandatory;
    return this;
  }

   /**
   * Field is mandatory
   * @return mandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Field is mandatory")

  public Boolean getMandatory() {
    return mandatory;
  }


  public void setMandatory(Boolean mandatory) {
    this.mandatory = mandatory;
  }


  public TrackerItemFieldAccessibility visible(Boolean visible) {
    
    this.visible = visible;
    return this;
  }

   /**
   * Field is visible
   * @return visible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Field is visible")

  public Boolean getVisible() {
    return visible;
  }


  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItemFieldAccessibility trackerItemFieldAccessibility = (TrackerItemFieldAccessibility) o;
    return Objects.equals(this.editable, trackerItemFieldAccessibility.editable) &&
        Objects.equals(this.field, trackerItemFieldAccessibility.field) &&
        Objects.equals(this.mandatory, trackerItemFieldAccessibility.mandatory) &&
        Objects.equals(this.visible, trackerItemFieldAccessibility.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editable, field, mandatory, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItemFieldAccessibility {\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editable");
    openapiFields.add("field");
    openapiFields.add("mandatory");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerItemFieldAccessibility
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerItemFieldAccessibility.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerItemFieldAccessibility is not found in the empty JSON string", TrackerItemFieldAccessibility.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerItemFieldAccessibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerItemFieldAccessibility` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `field`
      if (jsonObj.getAsJsonObject("field") != null) {
        FieldReference.validateJsonObject(jsonObj.getAsJsonObject("field"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerItemFieldAccessibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerItemFieldAccessibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerItemFieldAccessibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerItemFieldAccessibility.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerItemFieldAccessibility>() {
           @Override
           public void write(JsonWriter out, TrackerItemFieldAccessibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerItemFieldAccessibility read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerItemFieldAccessibility given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerItemFieldAccessibility
  * @throws IOException if the JSON string is invalid with respect to TrackerItemFieldAccessibility
  */
  public static TrackerItemFieldAccessibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerItemFieldAccessibility.class);
  }

 /**
  * Convert an instance of TrackerItemFieldAccessibility to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

