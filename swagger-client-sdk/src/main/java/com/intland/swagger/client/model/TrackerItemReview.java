/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A tracker item review instance including its reviewers and their decisions
 */
@ApiModel(description = "A tracker item review instance including its reviewers and their decisions")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerItemReview {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private TrackerItemReviewConfig config;

  /**
   * Whether the review is approved or rejected
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED"),
    
    UNDECIDED("UNDECIDED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<TrackerItemReviewVote> reviewers = null;

  public static final String SERIALIZED_NAME_TRACKER_ITEM = "trackerItem";
  @SerializedName(SERIALIZED_NAME_TRACKER_ITEM)
  private TrackerItemRevision trackerItem;

  public TrackerItemReview() { 
  }

  public TrackerItemReview config(TrackerItemReviewConfig config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItemReviewConfig getConfig() {
    return config;
  }


  public void setConfig(TrackerItemReviewConfig config) {
    this.config = config;
  }


  public TrackerItemReview result(ResultEnum result) {
    
    this.result = result;
    return this;
  }

   /**
   * Whether the review is approved or rejected
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the review is approved or rejected")

  public ResultEnum getResult() {
    return result;
  }


  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public TrackerItemReview reviewers(List<TrackerItemReviewVote> reviewers) {
    
    this.reviewers = reviewers;
    return this;
  }

  public TrackerItemReview addReviewersItem(TrackerItemReviewVote reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

   /**
   * List of reviewers, and their votes
   * @return reviewers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of reviewers, and their votes")

  public List<TrackerItemReviewVote> getReviewers() {
    return reviewers;
  }


  public void setReviewers(List<TrackerItemReviewVote> reviewers) {
    this.reviewers = reviewers;
  }


  public TrackerItemReview trackerItem(TrackerItemRevision trackerItem) {
    
    this.trackerItem = trackerItem;
    return this;
  }

   /**
   * Get trackerItem
   * @return trackerItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackerItemRevision getTrackerItem() {
    return trackerItem;
  }


  public void setTrackerItem(TrackerItemRevision trackerItem) {
    this.trackerItem = trackerItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItemReview trackerItemReview = (TrackerItemReview) o;
    return Objects.equals(this.config, trackerItemReview.config) &&
        Objects.equals(this.result, trackerItemReview.result) &&
        Objects.equals(this.reviewers, trackerItemReview.reviewers) &&
        Objects.equals(this.trackerItem, trackerItemReview.trackerItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, result, reviewers, trackerItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItemReview {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    trackerItem: ").append(toIndentedString(trackerItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("result");
    openapiFields.add("reviewers");
    openapiFields.add("trackerItem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerItemReview
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerItemReview.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerItemReview is not found in the empty JSON string", TrackerItemReview.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerItemReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerItemReview` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `config`
      if (jsonObj.getAsJsonObject("config") != null) {
        TrackerItemReviewConfig.validateJsonObject(jsonObj.getAsJsonObject("config"));
      }
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      JsonArray jsonArrayreviewers = jsonObj.getAsJsonArray("reviewers");
      if (jsonArrayreviewers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("reviewers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
        }

        // validate the optional field `reviewers` (array)
        for (int i = 0; i < jsonArrayreviewers.size(); i++) {
          TrackerItemReviewVote.validateJsonObject(jsonArrayreviewers.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `trackerItem`
      if (jsonObj.getAsJsonObject("trackerItem") != null) {
        TrackerItemRevision.validateJsonObject(jsonObj.getAsJsonObject("trackerItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerItemReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerItemReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerItemReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerItemReview.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerItemReview>() {
           @Override
           public void write(JsonWriter out, TrackerItemReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerItemReview read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerItemReview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerItemReview
  * @throws IOException if the JSON string is invalid with respect to TrackerItemReview
  */
  public static TrackerItemReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerItemReview.class);
  }

 /**
  * Convert an instance of TrackerItemReview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

