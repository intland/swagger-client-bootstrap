/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The configuration from which the review was created
 */
@ApiModel(description = "The configuration from which the review was created")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerItemReviewConfig {
  public static final String SERIALIZED_NAME_REQUIRED_APPROVALS = "requiredApprovals";
  @SerializedName(SERIALIZED_NAME_REQUIRED_APPROVALS)
  private Integer requiredApprovals;

  public static final String SERIALIZED_NAME_REQUIRED_REJECTIONS = "requiredRejections";
  @SerializedName(SERIALIZED_NAME_REQUIRED_REJECTIONS)
  private Integer requiredRejections;

  /**
   * Whether the user has to provide its credentials to vote
   */
  @JsonAdapter(RequiredSignatureEnum.Adapter.class)
  public enum RequiredSignatureEnum {
    NONE("NONE"),
    
    PASSWORD("PASSWORD"),
    
    USERNAME_AND_PASSWORD("USERNAME_AND_PASSWORD");

    private String value;

    RequiredSignatureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredSignatureEnum fromValue(String value) {
      for (RequiredSignatureEnum b : RequiredSignatureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredSignatureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredSignatureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredSignatureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredSignatureEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_SIGNATURE = "requiredSignature";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SIGNATURE)
  private RequiredSignatureEnum requiredSignature;

  public static final String SERIALIZED_NAME_ROLE_REQUIRED = "roleRequired";
  @SerializedName(SERIALIZED_NAME_ROLE_REQUIRED)
  private Boolean roleRequired;

  public TrackerItemReviewConfig() { 
  }

  public TrackerItemReviewConfig requiredApprovals(Integer requiredApprovals) {
    
    this.requiredApprovals = requiredApprovals;
    return this;
  }

   /**
   * Number of approvals after which the review is considered approved
   * @return requiredApprovals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of approvals after which the review is considered approved")

  public Integer getRequiredApprovals() {
    return requiredApprovals;
  }


  public void setRequiredApprovals(Integer requiredApprovals) {
    this.requiredApprovals = requiredApprovals;
  }


  public TrackerItemReviewConfig requiredRejections(Integer requiredRejections) {
    
    this.requiredRejections = requiredRejections;
    return this;
  }

   /**
   * Number of rejections after which the review is considered rejected
   * @return requiredRejections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of rejections after which the review is considered rejected")

  public Integer getRequiredRejections() {
    return requiredRejections;
  }


  public void setRequiredRejections(Integer requiredRejections) {
    this.requiredRejections = requiredRejections;
  }


  public TrackerItemReviewConfig requiredSignature(RequiredSignatureEnum requiredSignature) {
    
    this.requiredSignature = requiredSignature;
    return this;
  }

   /**
   * Whether the user has to provide its credentials to vote
   * @return requiredSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the user has to provide its credentials to vote")

  public RequiredSignatureEnum getRequiredSignature() {
    return requiredSignature;
  }


  public void setRequiredSignature(RequiredSignatureEnum requiredSignature) {
    this.requiredSignature = requiredSignature;
  }


  public TrackerItemReviewConfig roleRequired(Boolean roleRequired) {
    
    this.roleRequired = roleRequired;
    return this;
  }

   /**
   * Whether the reviewers have to chose in which of their roles do they want to vote
   * @return roleRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the reviewers have to chose in which of their roles do they want to vote")

  public Boolean getRoleRequired() {
    return roleRequired;
  }


  public void setRoleRequired(Boolean roleRequired) {
    this.roleRequired = roleRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItemReviewConfig trackerItemReviewConfig = (TrackerItemReviewConfig) o;
    return Objects.equals(this.requiredApprovals, trackerItemReviewConfig.requiredApprovals) &&
        Objects.equals(this.requiredRejections, trackerItemReviewConfig.requiredRejections) &&
        Objects.equals(this.requiredSignature, trackerItemReviewConfig.requiredSignature) &&
        Objects.equals(this.roleRequired, trackerItemReviewConfig.roleRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requiredApprovals, requiredRejections, requiredSignature, roleRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItemReviewConfig {\n");
    sb.append("    requiredApprovals: ").append(toIndentedString(requiredApprovals)).append("\n");
    sb.append("    requiredRejections: ").append(toIndentedString(requiredRejections)).append("\n");
    sb.append("    requiredSignature: ").append(toIndentedString(requiredSignature)).append("\n");
    sb.append("    roleRequired: ").append(toIndentedString(roleRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requiredApprovals");
    openapiFields.add("requiredRejections");
    openapiFields.add("requiredSignature");
    openapiFields.add("roleRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerItemReviewConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerItemReviewConfig.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerItemReviewConfig is not found in the empty JSON string", TrackerItemReviewConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerItemReviewConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerItemReviewConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("requiredSignature") != null && !jsonObj.get("requiredSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredSignature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerItemReviewConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerItemReviewConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerItemReviewConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerItemReviewConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerItemReviewConfig>() {
           @Override
           public void write(JsonWriter out, TrackerItemReviewConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerItemReviewConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerItemReviewConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerItemReviewConfig
  * @throws IOException if the JSON string is invalid with respect to TrackerItemReviewConfig
  */
  public static TrackerItemReviewConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerItemReviewConfig.class);
  }

 /**
  * Convert an instance of TrackerItemReviewConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

