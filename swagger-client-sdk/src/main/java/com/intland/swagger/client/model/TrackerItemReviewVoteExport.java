/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A reviewer and its vote for a particular Tracker Item Review instance
 */
@ApiModel(description = "A reviewer and its vote for a particular Tracker Item Review instance")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerItemReviewVoteExport {
  public static final String SERIALIZED_NAME_DECISION = "decision";
  @SerializedName(SERIALIZED_NAME_DECISION)
  private String decision;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewedAt";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private OffsetDateTime reviewedAt;

  public static final String SERIALIZED_NAME_ROLE_NAME = "roleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public TrackerItemReviewVoteExport() { 
  }

  public TrackerItemReviewVoteExport decision(String decision) {
    
    this.decision = decision;
    return this;
  }

   /**
   * What the reviewer voted for
   * @return decision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What the reviewer voted for")

  public String getDecision() {
    return decision;
  }


  public void setDecision(String decision) {
    this.decision = decision;
  }


  public TrackerItemReviewVoteExport firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the reviewer
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name of the reviewer")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public TrackerItemReviewVoteExport lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the reviewer
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name of the reviewer")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public TrackerItemReviewVoteExport reviewedAt(OffsetDateTime reviewedAt) {
    
    this.reviewedAt = reviewedAt;
    return this;
  }

   /**
   * Time at when the review was performed
   * @return reviewedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time at when the review was performed")

  public OffsetDateTime getReviewedAt() {
    return reviewedAt;
  }


  public void setReviewedAt(OffsetDateTime reviewedAt) {
    this.reviewedAt = reviewedAt;
  }


  public TrackerItemReviewVoteExport roleName(String roleName) {
    
    this.roleName = roleName;
    return this;
  }

   /**
   * Name of the role which the reviewer chose to use to vote
   * @return roleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the role which the reviewer chose to use to vote")

  public String getRoleName() {
    return roleName;
  }


  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public TrackerItemReviewVoteExport userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Username of the user who voted
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Username of the user who voted")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerItemReviewVoteExport trackerItemReviewVoteExport = (TrackerItemReviewVoteExport) o;
    return Objects.equals(this.decision, trackerItemReviewVoteExport.decision) &&
        Objects.equals(this.firstName, trackerItemReviewVoteExport.firstName) &&
        Objects.equals(this.lastName, trackerItemReviewVoteExport.lastName) &&
        Objects.equals(this.reviewedAt, trackerItemReviewVoteExport.reviewedAt) &&
        Objects.equals(this.roleName, trackerItemReviewVoteExport.roleName) &&
        Objects.equals(this.userName, trackerItemReviewVoteExport.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decision, firstName, lastName, reviewedAt, roleName, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerItemReviewVoteExport {\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decision");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("reviewedAt");
    openapiFields.add("roleName");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerItemReviewVoteExport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerItemReviewVoteExport.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerItemReviewVoteExport is not found in the empty JSON string", TrackerItemReviewVoteExport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerItemReviewVoteExport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerItemReviewVoteExport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decision").toString()));
      }
      if (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (jsonObj.get("roleName") != null && !jsonObj.get("roleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleName").toString()));
      }
      if (jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerItemReviewVoteExport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerItemReviewVoteExport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerItemReviewVoteExport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerItemReviewVoteExport.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerItemReviewVoteExport>() {
           @Override
           public void write(JsonWriter out, TrackerItemReviewVoteExport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerItemReviewVoteExport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerItemReviewVoteExport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerItemReviewVoteExport
  * @throws IOException if the JSON string is invalid with respect to TrackerItemReviewVoteExport
  */
  public static TrackerItemReviewVoteExport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerItemReviewVoteExport.class);
  }

 /**
  * Convert an instance of TrackerItemReviewVoteExport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

