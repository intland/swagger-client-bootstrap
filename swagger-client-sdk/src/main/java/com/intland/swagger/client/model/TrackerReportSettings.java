/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.JSON;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Settings of a report on a tracker.
 */
@ApiModel(description = "Settings of a report on a tracker.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-18T11:38:56.646+02:00[Europe/Budapest]")
public class TrackerReportSettings {
  public static final String SERIALIZED_NAME_CB_QL = "cbQl";
  @SerializedName(SERIALIZED_NAME_CB_QL)
  private String cbQl;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ResizableReportColumnSettings> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFERENCE_LEVEL_SETTINGS = "referenceLevelSettings";
  @SerializedName(SERIALIZED_NAME_REFERENCE_LEVEL_SETTINGS)
  private List<ReportReferenceLevelSettings> referenceLevelSettings = null;

  /**
   * Rendering method for Intelligent Table View.
   */
  @JsonAdapter(RenderingMethodEnum.Adapter.class)
  public enum RenderingMethodEnum {
    DISABLED("disabled"),
    
    TABLE("table"),
    
    TREE("tree");

    private String value;

    RenderingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderingMethodEnum fromValue(String value) {
      for (RenderingMethodEnum b : RenderingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenderingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenderingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RENDERING_METHOD = "renderingMethod";
  @SerializedName(SERIALIZED_NAME_RENDERING_METHOD)
  private RenderingMethodEnum renderingMethod;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private Integer reportId;

  public static final String SERIALIZED_NAME_SHOW_ALL_CHILDREN = "showAllChildren";
  @SerializedName(SERIALIZED_NAME_SHOW_ALL_CHILDREN)
  private Boolean showAllChildren;

  public static final String SERIALIZED_NAME_SHOW_ANCESTORS = "showAncestors";
  @SerializedName(SERIALIZED_NAME_SHOW_ANCESTORS)
  private Boolean showAncestors;

  public static final String SERIALIZED_NAME_SHOW_DESCENDANTS = "showDescendants";
  @SerializedName(SERIALIZED_NAME_SHOW_DESCENDANTS)
  private Boolean showDescendants;

  public static final String SERIALIZED_NAME_TRACKER = "tracker";
  @SerializedName(SERIALIZED_NAME_TRACKER)
  private TrackerReference tracker;

  public TrackerReportSettings() { 
  }

  public TrackerReportSettings cbQl(String cbQl) {
    
    this.cbQl = cbQl;
    return this;
  }

   /**
   * CbQL query string of the report.
   * @return cbQl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "priority='Normal'", required = true, value = "CbQL query string of the report.")

  public String getCbQl() {
    return cbQl;
  }


  public void setCbQl(String cbQl) {
    this.cbQl = cbQl;
  }


  public TrackerReportSettings columns(List<ResizableReportColumnSettings> columns) {
    
    this.columns = columns;
    return this;
  }

  public TrackerReportSettings addColumnsItem(ResizableReportColumnSettings columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Column definitions.
   * @return columns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Column definitions.")

  public List<ResizableReportColumnSettings> getColumns() {
    return columns;
  }


  public void setColumns(List<ResizableReportColumnSettings> columns) {
    this.columns = columns;
  }


  public TrackerReportSettings description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the report.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Normal priority items.", required = true, value = "Description of the report.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TrackerReportSettings isPublic(Boolean isPublic) {
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Public report indicator.
   * @return isPublic
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Public report indicator.")

  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public TrackerReportSettings name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the report.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My first query", required = true, value = "Name of the report.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TrackerReportSettings referenceLevelSettings(List<ReportReferenceLevelSettings> referenceLevelSettings) {
    
    this.referenceLevelSettings = referenceLevelSettings;
    return this;
  }

  public TrackerReportSettings addReferenceLevelSettingsItem(ReportReferenceLevelSettings referenceLevelSettingsItem) {
    if (this.referenceLevelSettings == null) {
      this.referenceLevelSettings = new ArrayList<>();
    }
    this.referenceLevelSettings.add(referenceLevelSettingsItem);
    return this;
  }

   /**
   * Reference level setting for Intelligent Table View.
   * @return referenceLevelSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reference level setting for Intelligent Table View.")

  public List<ReportReferenceLevelSettings> getReferenceLevelSettings() {
    return referenceLevelSettings;
  }


  public void setReferenceLevelSettings(List<ReportReferenceLevelSettings> referenceLevelSettings) {
    this.referenceLevelSettings = referenceLevelSettings;
  }


  public TrackerReportSettings renderingMethod(RenderingMethodEnum renderingMethod) {
    
    this.renderingMethod = renderingMethod;
    return this;
  }

   /**
   * Rendering method for Intelligent Table View.
   * @return renderingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "table", value = "Rendering method for Intelligent Table View.")

  public RenderingMethodEnum getRenderingMethod() {
    return renderingMethod;
  }


  public void setRenderingMethod(RenderingMethodEnum renderingMethod) {
    this.renderingMethod = renderingMethod;
  }


  public TrackerReportSettings reportId(Integer reportId) {
    
    this.reportId = reportId;
    return this;
  }

   /**
   * Id of a report
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Id of a report")

  public Integer getReportId() {
    return reportId;
  }


  public void setReportId(Integer reportId) {
    this.reportId = reportId;
  }


  public TrackerReportSettings showAllChildren(Boolean showAllChildren) {
    
    this.showAllChildren = showAllChildren;
    return this;
  }

   /**
   * Indicator to ability to collapse/expand all child items.
   * @return showAllChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicator to ability to collapse/expand all child items.")

  public Boolean getShowAllChildren() {
    return showAllChildren;
  }


  public void setShowAllChildren(Boolean showAllChildren) {
    this.showAllChildren = showAllChildren;
  }


  public TrackerReportSettings showAncestors(Boolean showAncestors) {
    
    this.showAncestors = showAncestors;
    return this;
  }

   /**
   * Indicator to show the ancestors of a result item.
   * @return showAncestors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicator to show the ancestors of a result item.")

  public Boolean getShowAncestors() {
    return showAncestors;
  }


  public void setShowAncestors(Boolean showAncestors) {
    this.showAncestors = showAncestors;
  }


  public TrackerReportSettings showDescendants(Boolean showDescendants) {
    
    this.showDescendants = showDescendants;
    return this;
  }

   /**
   * Indicator to show the descendants of a result item.
   * @return showDescendants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicator to show the descendants of a result item.")

  public Boolean getShowDescendants() {
    return showDescendants;
  }


  public void setShowDescendants(Boolean showDescendants) {
    this.showDescendants = showDescendants;
  }


  public TrackerReportSettings tracker(TrackerReference tracker) {
    
    this.tracker = tracker;
    return this;
  }

   /**
   * Get tracker
   * @return tracker
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TrackerReference getTracker() {
    return tracker;
  }


  public void setTracker(TrackerReference tracker) {
    this.tracker = tracker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackerReportSettings trackerReportSettings = (TrackerReportSettings) o;
    return Objects.equals(this.cbQl, trackerReportSettings.cbQl) &&
        Objects.equals(this.columns, trackerReportSettings.columns) &&
        Objects.equals(this.description, trackerReportSettings.description) &&
        Objects.equals(this.isPublic, trackerReportSettings.isPublic) &&
        Objects.equals(this.name, trackerReportSettings.name) &&
        Objects.equals(this.referenceLevelSettings, trackerReportSettings.referenceLevelSettings) &&
        Objects.equals(this.renderingMethod, trackerReportSettings.renderingMethod) &&
        Objects.equals(this.reportId, trackerReportSettings.reportId) &&
        Objects.equals(this.showAllChildren, trackerReportSettings.showAllChildren) &&
        Objects.equals(this.showAncestors, trackerReportSettings.showAncestors) &&
        Objects.equals(this.showDescendants, trackerReportSettings.showDescendants) &&
        Objects.equals(this.tracker, trackerReportSettings.tracker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cbQl, columns, description, isPublic, name, referenceLevelSettings, renderingMethod, reportId, showAllChildren, showAncestors, showDescendants, tracker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackerReportSettings {\n");
    sb.append("    cbQl: ").append(toIndentedString(cbQl)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    referenceLevelSettings: ").append(toIndentedString(referenceLevelSettings)).append("\n");
    sb.append("    renderingMethod: ").append(toIndentedString(renderingMethod)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    showAllChildren: ").append(toIndentedString(showAllChildren)).append("\n");
    sb.append("    showAncestors: ").append(toIndentedString(showAncestors)).append("\n");
    sb.append("    showDescendants: ").append(toIndentedString(showDescendants)).append("\n");
    sb.append("    tracker: ").append(toIndentedString(tracker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cbQl");
    openapiFields.add("columns");
    openapiFields.add("description");
    openapiFields.add("isPublic");
    openapiFields.add("name");
    openapiFields.add("referenceLevelSettings");
    openapiFields.add("renderingMethod");
    openapiFields.add("reportId");
    openapiFields.add("showAllChildren");
    openapiFields.add("showAncestors");
    openapiFields.add("showDescendants");
    openapiFields.add("tracker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cbQl");
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("isPublic");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tracker");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackerReportSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TrackerReportSettings.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackerReportSettings is not found in the empty JSON string", TrackerReportSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrackerReportSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackerReportSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrackerReportSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("cbQl") != null && !jsonObj.get("cbQl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cbQl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cbQl").toString()));
      }
      JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
      if (jsonArraycolumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
        }

        // validate the optional field `columns` (array)
        for (int i = 0; i < jsonArraycolumns.size(); i++) {
          ResizableReportColumnSettings.validateJsonObject(jsonArraycolumns.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayreferenceLevelSettings = jsonObj.getAsJsonArray("referenceLevelSettings");
      if (jsonArrayreferenceLevelSettings != null) {
        // ensure the json data is an array
        if (!jsonObj.get("referenceLevelSettings").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `referenceLevelSettings` to be an array in the JSON string but got `%s`", jsonObj.get("referenceLevelSettings").toString()));
        }

        // validate the optional field `referenceLevelSettings` (array)
        for (int i = 0; i < jsonArrayreferenceLevelSettings.size(); i++) {
          ReportReferenceLevelSettings.validateJsonObject(jsonArrayreferenceLevelSettings.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("renderingMethod") != null && !jsonObj.get("renderingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderingMethod").toString()));
      }
      // validate the optional field `tracker`
      if (jsonObj.getAsJsonObject("tracker") != null) {
        TrackerReference.validateJsonObject(jsonObj.getAsJsonObject("tracker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackerReportSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackerReportSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackerReportSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackerReportSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackerReportSettings>() {
           @Override
           public void write(JsonWriter out, TrackerReportSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackerReportSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackerReportSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackerReportSettings
  * @throws IOException if the JSON string is invalid with respect to TrackerReportSettings
  */
  public static TrackerReportSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackerReportSettings.class);
  }

 /**
  * Convert an instance of TrackerReportSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

