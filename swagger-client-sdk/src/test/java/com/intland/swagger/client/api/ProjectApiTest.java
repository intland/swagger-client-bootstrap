/*
 * codebeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import java.util.List;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.model.DeployProject;
import com.intland.swagger.client.model.MemberReferenceSearchResult;
import com.intland.swagger.client.model.Project;
import com.intland.swagger.client.model.ProjectFilteringRequest;
import com.intland.swagger.client.model.ProjectMemberPermissions;
import com.intland.swagger.client.model.ProjectReference;
import com.intland.swagger.client.model.ProjectSearchResult;
import com.intland.swagger.client.model.Tracker;
import com.intland.swagger.client.model.TrackerFilteringRequest;
import com.intland.swagger.client.model.TrackerReference;
import com.intland.swagger.client.model.TrackerSearchResult;
import com.intland.swagger.client.model.WikiOutlineSearchResult;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * Create a tracker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrackerTest() throws ApiException {
        Integer projectId = null;
        Tracker tracker = null;
        Integer templateId = null;
        Tracker response = api.createTracker(projectId, tracker, templateId);
        // TODO: test validations
    }

    /**
     * Deploy a project configuration to a Project
     *
     * The configuration file needs to be uploaded to codebeamer Documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployConfigurationTest() throws ApiException {
        DeployProject deployProject = null;
        Project response = api.deployConfiguration(deployProject);
        // TODO: test validations
    }

    /**
     * Get all members of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersOfProjectTest() throws ApiException {
        Integer projectId = null;
        Integer page = null;
        Integer pageSize = null;
        MemberReferenceSearchResult response = api.getMembersOfProject(projectId, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectByIdTest() throws ApiException {
        Integer projectId = null;
        Project response = api.getProjectById(projectId);
        // TODO: test validations
    }

    /**
     * Get all roles the user has on a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectRolesOfMemberTest() throws ApiException {
        Integer projectId = null;
        Integer userId = null;
        ProjectMemberPermissions response = api.getProjectRolesOfMember(projectId, userId);
        // TODO: test validations
    }

    /**
     * Get projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        List<ProjectReference> response = api.getProjects();
        // TODO: test validations
    }

    /**
     * Get wiki pages of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopLevelWikiPagesTest() throws ApiException {
        Integer projectId = null;
        WikiOutlineSearchResult response = api.getTopLevelWikiPages(projectId);
        // TODO: test validations
    }

    /**
     * Get trackers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackersTest() throws ApiException {
        Integer projectId = null;
        List<TrackerReference> response = api.getTrackers(projectId);
        // TODO: test validations
    }

    /**
     * Get the list of all trackers in a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAllTrackersInProjectTest() throws ApiException {
        Integer projectId = null;
        TrackerFilteringRequest trackerFilteringRequest = null;
        TrackerSearchResult response = api.searchAllTrackersInProject(projectId, trackerFilteringRequest);
        // TODO: test validations
    }

    /**
     * Search projects by given criteria
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProjectsTest() throws ApiException {
        ProjectFilteringRequest projectFilteringRequest = null;
        ProjectSearchResult response = api.searchProjects(projectFilteringRequest);
        // TODO: test validations
    }

}
